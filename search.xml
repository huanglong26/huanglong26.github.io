<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端工程化</title>
      <link href="/2024/03/22/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
      <url>/2024/03/22/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前端工程化开篇"><a href="#一、前端工程化开篇" class="headerlink" title="一、前端工程化开篇"></a>一、前端工程化开篇</h2><h3 id="1-1-什么是前端工程化"><a href="#1-1-什么是前端工程化" class="headerlink" title="1.1 什么是前端工程化"></a>1.1 什么是前端工程化</h3><p><code>前端工程化</code>是使用<code>软件工程的方法</code>来<code>单独</code>解决<code>前端</code>的开发流程中<code>模块化、组件化、规范化、自动化</code>的问题,其主要目的为了提高效率和降低成本。</p><h3 id="1-2-前端工程化实现技术栈"><a href="#1-2-前端工程化实现技术栈" class="headerlink" title="1.2 前端工程化实现技术栈"></a>1.2 前端工程化实现技术栈</h3><p>前端工程化实现的技术栈有很多,我们采用ES6+nodejs+npm+Vite+VUE3+router+pinia+axios+Element-plus组合来实现</p><ul><li><p>ECMAScript6    VUE3中大量使用ES6语法</p></li><li><p>Nodejs         前端项目运行环境</p></li><li><p>npm           依赖下载工具</p></li><li><p>vite            前端项目构建工具</p></li><li><p>VUE3          优秀的渐进式前端框架</p></li><li><p>router         通过路由实现页面切换</p></li><li><p>pinia          通过状态管理实现组件数据传递</p></li><li><p>axios          ajax异步请求封装技术实现前后端数据交互</p></li><li><p>Element-plus   可以提供丰富的快速构建网页的组件仓库</p></li></ul><h2 id="二、ECMA6Script"><a href="#二、ECMA6Script" class="headerlink" title="二、ECMA6Script"></a>二、ECMA6Script</h2><h3 id="2-1-es6的介绍"><a href="#2-1-es6的介绍" class="headerlink" title="2.1. es6的介绍"></a>2.1. es6的介绍</h3><p>ECMAScript 6，简称ES6，是<strong>JavaScript</strong>语言的一次重大更新。它于<strong>2015</strong>年发布，是原来的ECMAScript标准的第六个版本。ES6带来了大量的新特性，包括箭头函数、模板字符串、let和const关键字、解构、默认参数值、模块系统等等，大大提升了JavaScript的开发体验。<code>由于VUE3中大量使用了ES6的语法,所以ES6成为了学习VUE3的门槛之一</code><br>ES6对JavaScript的改进在以下几个方面：</p><ol><li><p>更加简洁：ES6引入了一些新的语法，如箭头函数、类和模板字符串等，使代码更加简洁易懂。</p></li><li><p>更强大的功能：ES6引入了一些新的API、解构语法和迭代器等功能，从而使得JavaScript更加强大。</p></li><li><p>更好的适用性：ES6引入的模块化功能为JavaScript代码的组织和管理提供了更好的方式，不仅提高了程序的可维护性，还让JavaScript更方便地应用于大型的应用程序。</p></li></ol><p>总的来说，ES6在提高JavaScript的核心语言特性和功能方面取得了很大的进展。由于ES6已经成为了JavaScript的标准，它的大多数新特性都已被现在浏览器所支持，因此现在可以放心地使用ES6来开发前端应用程序。</p><p><strong>历史版本：</strong></p><table><thead><tr><th>标准版本</th><th>发布时间</th><th>新特性</th></tr></thead><tbody><tr><td>ES1</td><td>1997年</td><td>第一版 ECMAScript</td></tr><tr><td>ES2</td><td>1998年</td><td>引入setter和getter函数，增加了try&#x2F;catch，switch语句允许字符串</td></tr><tr><td>ES3</td><td>1999年</td><td>引入了正则表达式和更好的字符串处理</td></tr><tr><td>ES4</td><td>取消</td><td>取消，部分特性被ES3.1和ES5继承</td></tr><tr><td>ES5</td><td>2009年</td><td>Object.defineProperty，JSON，严格模式，数组新增方法等</td></tr><tr><td>ES5.1</td><td>2011年</td><td>对ES5做了一些勘误和例行修订</td></tr><tr><td><code>ES6</code></td><td><code>2015年</code></td><td><code>箭头函数、模板字符串、解构、let和const关键字、类、模块系统等</code></td></tr><tr><td>ES2016</td><td>2016年</td><td>数组.includes，指数操作符（**），Array.prototype.fill等</td></tr><tr><td>ES2017</td><td>2017年</td><td>异步函数async&#x2F;await，Object.values&#x2F;Object.entries，字符串填充</td></tr><tr><td>ES2018</td><td>2018年</td><td>正则表达式命名捕获组，几个有用的对象方法，异步迭代器等</td></tr><tr><td>ES2019</td><td>2019年</td><td>Array.prototype.{flat,flatMap}，Object.fromEntries等</td></tr><tr><td>ES2020</td><td>2020年</td><td>BigInt、动态导入、可选链操作符、空位合并操作符</td></tr><tr><td>ES2021</td><td>2021年</td><td>String.prototype.replaceAll，逻辑赋值运算符，Promise.any等</td></tr><tr><td>… …</td><td></td><td></td></tr></tbody></table><h3 id="2-2-es6的变量和模板-字符串"><a href="#2-2-es6的变量和模板-字符串" class="headerlink" title="2.2 es6的变量和模板 字符串"></a>2.2 es6的变量和模板 字符串</h3><p>ES6 新增了<code>let</code>和<code>const</code>，用来声明变量,使用的细节上也存在诸多差异</p><ul><li>let 和var的差别<br>  1、let 不能重复声明<br>  2、let有块级作用域，非函数的花括号遇见let会有块级作用域，也就是只能在花括号里面访问。<br>  3、let不会预解析进行变量提升<br>  4、let 定义的全局变量不会作为window的属性<br>  5、let在es6中推荐优先使用</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. let只有在当前代码块有效代码块. 代码块、函数、全局</span></span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> a = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> b = <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">    &#125;   </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">// a is not defined   花括号外面无法访问</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);  <span class="comment">// 可以正常输出</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2. 不能重复声明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> name = <span class="string">&#x27;天真&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> name = <span class="string">&#x27;无邪&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//3. 不存在变量提升（先声明，在使用）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(test) <span class="comment">//可以     但是值为undefined</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> test = <span class="string">&#x27;test&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(test1) <span class="comment">//不可以  let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> test1 = <span class="string">&#x27;test1&#x27;</span> </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//4、不会成为window的属性   </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a = <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>) <span class="comment">//100</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> b = <span class="number">200</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">b</span>) <span class="comment">//undefined</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//5. 循环中推荐使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// ...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>const和var的差异<br>  1、新增const和let类似，只是const定义的变量不能修改<br>  2、并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//声明场景语法,建议变量名大写区分</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.1415926</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.常量声明必须有初始化值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//const A ; //报错</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.常量值不可以改动</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//const A  = &#x27;atguigu&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//A  = &#x27;xx&#x27; //不可改动</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//3.和let一样，块儿作用域</span></span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> A = <span class="string">&#x27;atguigu&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(A);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//console.log(A);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//4.对应数组和对象元素修改，不算常量修改，修改值，不修改地址</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="variable constant_">TEAM</span> = [<span class="string">&#x27;刘德华&#x27;</span>,<span class="string">&#x27;张学友&#x27;</span>,<span class="string">&#x27;郭富城&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="variable constant_">TEAM</span>.<span class="title function_">push</span>(<span class="string">&#x27;黎明&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable constant_">TEAM</span>=[] <span class="comment">// 报错</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">TEAM</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板字符串（template string）是增强版的字符串，用反引号（&#96;）标识</p><p>1、字符串中可以出现换行符</p><p>2、可以使用 ${xxx} 形式输出变量和拼接变量</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1 多行普通字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> ulStr =</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;ul&gt;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;li&gt;JAVA&lt;/li&gt;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;li&gt;html&lt;/li&gt;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;li&gt;VUE&lt;/li&gt;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;/ul&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ulStr)    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2 多行模板字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> ulStr2 = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;ul&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;li&gt;JAVA&lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;li&gt;html&lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;li&gt;VUE&lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/ul&gt;`</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ulStr2)        </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3  普通字符串拼接</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> name =<span class="string">&#x27;张小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> infoStr =name+<span class="string">&#x27;被评为本年级优秀学员&#x27;</span>  </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(infoStr)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4  模板字符串拼接</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> infoStr2 =<span class="string">`<span class="subst">$&#123;name&#125;</span>被评为本年级优秀学员`</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(infoStr2)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-es6的解构表达式"><a href="#2-3-es6的解构表达式" class="headerlink" title="2.3 es6的解构表达式"></a>2.3 es6的解构表达式</h3><p>ES6 的解构赋值是一种方便的语法，可以快速将数组或对象中的值拆分并赋值给变量。解构赋值的语法使用花括号 <code>&#123;&#125;</code> 表示对象，方括号 <code>[]</code> 表示数组。通过解构赋值，函数更方便进行参数接受等！</p><p><strong>数组解构赋值</strong></p><ul><li>可以通过数组解构将数组中的值赋值给变量，语法为：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//新增变量名任意合法即可，本质是按照顺序进行初始化变量的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>该语句将数组 [1, 2, 3] 中的第一个值赋值给 a 变量，第二个值赋值给 b 变量，第三个值赋值给 c 变量。<br>可以使用默认值为变量提供备选值，在数组中缺失对应位置的值时使用该默认值。例如：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d = <span class="number">4</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p><strong>对象解构赋值</strong></p><ul><li>可以通过对象解构将对象中的值赋值给变量，语法为：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a, b&#125; = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="comment">//新增变量名必须和属性名相同，本质是初始化变量的值为对象中同名属性的值</span></span><br><span class="line"><span class="comment">//等价于 let a = 对象.a  let b = 对象.b</span></span><br><span class="line">  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>该语句将对象 {a: 1, b: 2} 中的 a 属性值赋值给 a 变量，b 属性值赋值给 b 变量。<br>可以为标识符分配不同的变量名称，使用 : 操作符指定新的变量名。例如：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>: x, <span class="attr">b</span>: y&#125; = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>函数参数解构赋值</strong></p><ul><li>解构赋值也可以用于函数参数。例如：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">[x, y]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li><p>该函数接受一个数组作为参数，将其中的第一个值赋给 x，第二个值赋给 y，然后返回它们的和。 </p></li><li><p>ES6 解构赋值让变量的初始化更加简单和便捷。通过解构赋值，我们可以访问到对象中的属性，并将其赋值给对应的变量，从而提高代码的可读性和可维护性。</p></li></ul><h3 id="2-4-es6的箭头函数"><a href="#2-4-es6的箭头函数" class="headerlink" title="2.4 es6的箭头函数"></a>2.4 es6的箭头函数</h3><p>ES6 允许使用“箭头” 义函数。语法类似Java中的Lambda表达式</p><h4 id="2-4-1-声明和特点"><a href="#2-4-1-声明和特点" class="headerlink" title="2.4.1 声明和特点"></a>2.4.1 声明和特点</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//ES6 允许使用“箭头”（=&gt;）定义函数。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 函数声明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> fn1 = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fn2</span> = (<span class="params"></span>)=&gt;&#123;&#125; <span class="comment">//箭头函数,此处不需要书写function关键字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fn3</span> = x =&gt;&#123;&#125; <span class="comment">//单参数可以 省略(),多参数无参数不可以!</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fn4</span> = x =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">//只有一行方法体可以省略&#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun5</span> = x =&gt; x + <span class="number">1</span> <span class="comment">//当函数体只有一句返回值时，可以省略花括号和 return 语句</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2. 使用特点 箭头函数this关键字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 在 JavaScript 中，this 关键字通常用来引用函数所在的对象，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 或者在函数本身作为构造函数时，来引用新对象的实例。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 但是在箭头函数中，this 的含义与常规函数定义中的含义不同，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 并且是由箭头函数定义时的上下文来决定的，而不是由函数调用时的上下文来决定的。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 箭头函数没有自己的this，this指向的是外层上下文环境的this</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person =&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">showName</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//  这里的this是person</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">viewName</span>: <span class="function">() =&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//  这里的this是window</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    person.<span class="title function_">showName</span>()</span></span><br><span class="line"><span class="language-javascript">    person.<span class="title function_">viewName</span>()</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//this应用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 这里的 this 是上一层作用域中的 this，即 Counter实例化对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">count</span>++;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">count</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> counter = <span class="keyword">new</span> <span class="title class_">Counter</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4-2-实践和应用场景"><a href="#2-4-2-实践和应用场景" class="headerlink" title="2.4.2 实践和应用场景"></a>2.4.2 实践和应用场景</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#xdd</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;xdd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> xdd = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;xdd&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 方案1 </span></span></span><br><span class="line"><span class="language-javascript">       xdd.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> _this= <span class="variable language_">this</span>;  <span class="comment">//this 是xdd</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//开启定时器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//变粉色</span></span></span><br><span class="line"><span class="language-javascript">                _this.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,<span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 方案2</span></span></span><br><span class="line"><span class="language-javascript">        xdd.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//开启定时器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">// 使用setTimeout() 方法所在环境时的this对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//变粉色</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,<span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4-3-rest和spread"><a href="#2-4-3-rest和spread" class="headerlink" title="2.4.3 rest和spread"></a>2.4.3 rest和spread</h4><p>rest参数,在形参上使用 和JAVA中的可变参数几乎一样</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1 参数列表中多个普通参数  普通函数和箭头函数中都支持</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> fun1 = <span class="keyword">function</span> (<span class="params">a,b,c,d=<span class="number">10</span></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c,d)&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun2</span> = (<span class="params">a,b,c,d=<span class="number">10</span></span>) =&gt;&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c,d)&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun1</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun2</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2 ...作为参数列表,称之为rest参数 普通函数和箭头函数中都支持 ,因为箭头函数中无法使用arguments,rest是一种解决方案</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> fun3 = <span class="keyword">function</span> (<span class="params">...args</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(args)&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun4</span> = (<span class="params">...args</span>) =&gt;&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(args)&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun3</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun4</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// rest参数在一个参数列表中的最后一个只,这也就无形之中要求一个参数列表中只能有一个rest参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//let fun5 =  (...args,...args2) =&gt;&#123;&#125; // 这里报错</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spread参数,在实参上使用rest</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//let arrSpread = ...arr;// 这样不可以,...arr必须在调用方法时作为实参使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun1</span> =(<span class="params">a,b,c</span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用方法时,对arr进行转换 转换为1,2,3 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun1</span>(...arr)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//应用场景1 合并数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr2=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr3=[...arr,...arr2]</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr3)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//应用场景2 合并对象属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p1=&#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p2=&#123;<span class="attr">age</span>:<span class="number">10</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p3=&#123;<span class="attr">gender</span>:<span class="string">&quot;boy&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person =&#123;...p1,...p2,...p3&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-es6的对象创建和拷贝"><a href="#2-5-es6的对象创建和拷贝" class="headerlink" title="2.5 es6的对象创建和拷贝"></a>2.5 es6的对象创建和拷贝</h3><h4 id="2-5-1-对象创建的语法糖"><a href="#2-5-1-对象创建的语法糖" class="headerlink" title="2.5.1 对象创建的语法糖"></a>2.5.1 对象创建的语法糖</h4><p>ES6中新增了对象创建的语法糖,支持了class extends constructor等关键字,让ES6的语法和面向对象的语法更加接近</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">      <span class="comment">// 属性</span></span><br><span class="line">      #n;<span class="comment">//#是私有属性 使用的时候后面都要是#n 如果写n是再创建一个n的变量</span></span><br><span class="line">      age;</span><br><span class="line">      <span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">n</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">n</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">n</span> =n;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 实例方法</span></span><br><span class="line">      <span class="title function_">eat</span>(<span class="params">food</span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&quot;岁的&quot;</span>+<span class="variable language_">this</span>.<span class="property">n</span>+<span class="string">&quot;用筷子吃&quot;</span>+food)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 静态方法</span></span><br><span class="line">      <span class="keyword">static</span> <span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> a+b;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 构造器</span></span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">n</span>=name;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> person =<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>);</span><br><span class="line">  <span class="comment">// 访问对象属性</span></span><br><span class="line">  <span class="comment">// 调用对象方法</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">n</span>)</span><br><span class="line">  person.<span class="property">name</span>=<span class="string">&quot;小明&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>)</span><br><span class="line">  person.<span class="title function_">eat</span>(<span class="string">&quot;火锅&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span>  <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">      grade ;</span><br><span class="line">      score ;</span><br><span class="line">      <span class="title function_">study</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">name,age </span>) &#123;</span><br><span class="line">          <span class="variable language_">super</span>(name,age);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> stu =<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;学生小李&quot;</span>,<span class="number">18</span>);</span><br><span class="line">  stu.<span class="title function_">eat</span>(<span class="string">&quot;面条&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-5-2-对象的深拷贝和浅拷贝"><a href="#2-5-2-对象的深拷贝和浅拷贝" class="headerlink" title="2.5.2  对象的深拷贝和浅拷贝"></a>2.5.2  对象的深拷贝和浅拷贝</h4><p>对象的拷贝,快速获得一个和已有对象相同的对象的方式</p><ul><li>浅拷贝</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr  =[<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;python&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person =&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">language</span>:arr</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 浅拷贝,person2和person指向相同的内存</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person2 = person;</span></span><br><span class="line"><span class="language-javascript">    person2.<span class="property">name</span>=<span class="string">&quot;小黑&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>深拷贝</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr  =[<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;python&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person =&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">language</span>:arr</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 深拷贝,通过JSON和字符串的转换形成一个新的对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person))</span></span><br><span class="line"><span class="language-javascript">    person2.<span class="property">name</span>=<span class="string">&quot;小黑&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">name</span>) </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-es6的模块化处理"><a href="#2-6-es6的模块化处理" class="headerlink" title="2.6 es6的模块化处理"></a>2.6 es6的模块化处理</h3><h4 id="2-6-1模块化介绍"><a href="#2-6-1模块化介绍" class="headerlink" title="2.6.1模块化介绍"></a>2.6.1模块化介绍</h4><p>模块化是一种组织和管理前端代码的方式，将代码拆分成小的模块单元，使得代码更易于维护、扩展和复用。它包括了定义、导出、导入以及管理模块的方法和规范。前端模块化的主要优势如下：</p><ol><li><p>提高代码可维护性：通过将代码拆分为小的模块单元，使得代码结构更为清晰，可读性更高，便于开发者阅读和维护。</p></li><li><p>提高代码可复用性：通过将重复使用的代码变成可复用的模块，减少代码重复率，降低开发成本。</p></li><li><p>提高代码可扩展性：通过模块化来实现代码的松耦合，便于更改和替换模块，从而方便地扩展功能。</p></li></ol><p>目前，前端模块化有多种规范和实现，包括 CommonJS、AMD 和 ES6 模块化。ES6 模块化是 JavaScript 语言的模块标准，使用 import 和 export 关键字来实现模块的导入和导出。现在，大部分浏览器都已经原生支持 ES6 模块化，因此它成为了最为广泛使用的前端模块化标准. &#96;</p><ul><li>ES6模块化的几种暴露和导入方式</li></ul><ol><li><ol><li>分别导出</li><li>统一导出</li><li>默认导出</li></ol></li></ol><ul><li><code>ES6中无论以何种方式导出,导出的都是一个对象,导出的内容都可以理解为是向这个对象中添加属性或者方法</code></li></ul><h4 id="2-6-2-分别导出"><a href="#2-6-2-分别导出" class="headerlink" title="2.6.2 分别导出"></a>2.6.2 分别导出</h4><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707725636032-90a97205-c2b3-48ee-a193-6e1064d33f42.png" alt="img"></p><ul><li>module.js 向外分别暴露成员</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.分别暴露</span></span><br><span class="line"><span class="comment">// 模块想对外导出,添加export关键字即可!</span></span><br><span class="line"><span class="comment">// 导出一个变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="comment">// 导出一个函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导出一个类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.js 导入module.js中的成员</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    *代表module.js中的所有成员</span></span><br><span class="line"><span class="comment">    m1代表所有成员所属的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="comment">// 使用暴露的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="property">PI</span>)</span><br><span class="line"><span class="comment">// 调用暴露的方法</span></span><br><span class="line"><span class="keyword">let</span> result =m1.<span class="title function_">sum</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="comment">// 使用暴露的Person类</span></span><br><span class="line"><span class="keyword">let</span> person =<span class="keyword">new</span> m1.<span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">10</span>)</span><br><span class="line">person.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><ul><li>index.html作为程序启动的入口  导入 app.js</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入JS文件 添加type=&#x27;module&#x27; 属性,否则不支持ES6的模块化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./app.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-3-统一导出"><a href="#2-6-3-统一导出" class="headerlink" title="2.6.3 统一导出"></a>2.6.3 统一导出</h4><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707725647575-4bf42793-8af4-4a18-bdab-2a0318f59bb4.png" alt="img"></p><ul><li>module.js向外统一导出成员</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.统一暴露</span></span><br><span class="line"><span class="comment">// 模块想对外导出,export统一暴露想暴露的内容!</span></span><br><span class="line"><span class="comment">// 定义一个常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="comment">// 定义一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 统一对外导出(暴露)</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line"><span class="variable constant_">PI</span>,</span><br><span class="line">    sum,</span><br><span class="line">    <span class="title class_">Person</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.js导入module.js中的成员</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    &#123;&#125;中导入要使用的来自于module.js中的成员</span></span><br><span class="line"><span class="comment">    &#123;&#125;中导入的名称要和module.js中导出的一致,也可以在此处起别名</span></span><br><span class="line"><span class="comment">    &#123;&#125;中如果定义了别名,那么在当前模块中就只能使用别名</span></span><br><span class="line"><span class="comment">    &#123;&#125;中导入成员的顺序可以不是暴露的顺序</span></span><br><span class="line"><span class="comment">    一个模块中可以同时有多个import</span></span><br><span class="line"><span class="comment">    多个import可以导入多个不同的模块,也可以是同一个模块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//import &#123;PI ,Person ,sum &#125;  from &#x27;./module.js&#x27;</span></span><br><span class="line"><span class="comment">//import &#123;PI as pi,Person as People,sum as add&#125;  from &#x27;./module.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">PI</span> ,<span class="title class_">Person</span> ,sum,<span class="variable constant_">PI</span> <span class="keyword">as</span> pi,<span class="title class_">Person</span> <span class="keyword">as</span> <span class="title class_">People</span>,sum <span class="keyword">as</span> add&#125;  <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="comment">// 使用暴露的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pi)</span><br><span class="line"><span class="comment">// 调用暴露的方法</span></span><br><span class="line"><span class="keyword">let</span> result1 =<span class="title function_">sum</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1)</span><br><span class="line"><span class="keyword">let</span> result2 =<span class="title function_">add</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2)</span><br><span class="line"><span class="comment">// 使用暴露的Person类</span></span><br><span class="line"><span class="keyword">let</span> person1 =<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">10</span>)</span><br><span class="line">person1.<span class="title function_">sayHello</span>()</span><br><span class="line"><span class="keyword">let</span> person2 =<span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">&#x27;李四&#x27;</span>,<span class="number">11</span>)</span><br><span class="line">person2.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><h4 id="2-6-4-默认导出"><a href="#2-6-4-默认导出" class="headerlink" title="2.6.4 默认导出"></a>2.6.4 默认导出</h4><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707725660127-49385f2e-8397-4844-8cf4-a23cd354f0a5.png" alt="img"></p><ul><li>modules混合向外导出</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3默认和混合暴露</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    默认暴露语法  export default sum</span></span><br><span class="line"><span class="comment">    默认暴露相当于是在暴露的对象中增加了一个名字为default的属性</span></span><br><span class="line"><span class="comment">    三种暴露方式可以在一个module中混合使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="comment">// 导出一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导出一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出默认</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> sum</span><br><span class="line"><span class="comment">// 统一导出</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">   <span class="title class_">Person</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.js 的default和其他导入写法混用</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    *代表module.js中的所有成员</span></span><br><span class="line"><span class="comment">    m1代表所有成员所属的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> add&#125; <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span> <span class="comment">// 用的少</span></span><br><span class="line"><span class="keyword">import</span> add2 <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span> <span class="comment">// 等效于 import &#123;default as add2&#125; from &#x27;./module.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用暴露的方法</span></span><br><span class="line"><span class="keyword">let</span> result =m1.<span class="title function_">default</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="keyword">let</span> result2 =<span class="title function_">add</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2)</span><br><span class="line"><span class="keyword">let</span> result3 =<span class="title function_">add2</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入其他方式暴露的内容</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">PI</span>,<span class="title class_">Person</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="comment">// 使用暴露的Person类</span></span><br><span class="line"><span class="keyword">let</span> person =<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">10</span>)</span><br><span class="line">person.<span class="title function_">sayHello</span>()</span><br><span class="line"><span class="comment">// 使用暴露的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>)</span><br></pre></td></tr></table></figure><h2 id="三、前端工程化环境搭建"><a href="#三、前端工程化环境搭建" class="headerlink" title="三、前端工程化环境搭建"></a>三、前端工程化环境搭建</h2><h3 id="3-1-nodejs的简介和安装"><a href="#3-1-nodejs的简介和安装" class="headerlink" title="3.1 nodejs的简介和安装"></a>3.1 nodejs的简介和安装</h3><h4 id="3-1-1-什么是Nodejs"><a href="#3-1-1-什么是Nodejs" class="headerlink" title="3.1.1 什么是Nodejs"></a>3.1.1 什么是Nodejs</h4><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时环境，可以使 JavaScript 运行在服务器端。使用 Node.js，可以方便地开发服务器端应用程序，如 Web 应用、API、后端服务，还可以通过 Node.js 构建命令行工具等。相比于传统的服务器端语言（如 PHP、Java、Python 等），Node.js 具有以下特点：</p><ul><li><p>单线程，但是采用了事件驱动、异步 I&#x2F;O 模型，可以处理高并发请求。</p></li><li><p>轻量级，使用 C++ 编写的 V8 引擎让 Node.js 的运行速度很快。</p></li><li><p>模块化，Node.js 内置了大量模块，同时也可以通过第三方模块扩展功能。</p></li><li><p>跨平台，可以在 Windows、Linux、Mac 等多种平台下运行。</p></li></ul><p>Node.js 的核心是其管理事件和异步 I&#x2F;O 的能力。Node.js 的异步 I&#x2F;O 使其能够处理大量并发请求，并且能够避免在等待 I&#x2F;O 资源时造成的阻塞。此外，Node.js 还拥有高性能网络库和文件系统库，可用于搭建 WebSocket 服务器、上传文件等。<code>在 Node.js 中，我们可以使用 JavaScript 来编写服务器端程序，这也使得前端开发人员可以利用自己已经熟悉的技能来开发服务器端程序，同时也让 JavaScript 成为一种全栈语言。</code>Node.js 受到了广泛的应用，包括了大型企业级应用、云计算、物联网、游戏开发等领域。常用的 Node.js 框架包括 Express、Koa、Egg.js 等，它们能够显著提高开发效率和代码质量。</p><h4 id="3-1-2-如何安装nodejs"><a href="#3-1-2-如何安装nodejs" class="headerlink" title="3.1.2 如何安装nodejs"></a>3.1.2 如何安装nodejs</h4><ol><li><p>打开官网<a href="https://nodejs.org/en%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84">https://nodejs.org/en下载对应操作系统的</a> LTS 版本。</p></li><li><p>双击安装包进行安装，安装过程中遵循默认选项即可(或者参照<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a> )。安装完成后，可以在命令行终端输入 <code>node -v</code> 和 <code>npm -v</code> 查看 Node.js 和 npm 的版本号。</p></li></ol><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707725693356-b12d5700-8761-47d1-8642-5ec63eb3936f.png" alt="img"></p><ol><li>定义一个app.js文件,cmd到该文件所在目录,然后在dos上通过<code>node app.js</code>命令即可运行</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>,<span class="number">20</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure><h3 id="3-2-npm-配置和使用"><a href="#3-2-npm-配置和使用" class="headerlink" title="3.2 npm 配置和使用"></a>3.2 npm 配置和使用</h3><h4 id="3-2-1-npm介绍"><a href="#3-2-1-npm介绍" class="headerlink" title="3.2.1 npm介绍"></a>3.2.1 npm介绍</h4><p>NPM全称Node Package Manager，是Node.js包管理工具，是全球最大的模块生态系统，里面所有的模块都是开源免费的；也是Node.js的包管理工具，相当于后端的Maven 。</p><h4 id="3-2-2-npm-安装和配置"><a href="#3-2-2-npm-安装和配置" class="headerlink" title="3.2.2 npm 安装和配置"></a>3.2.2 npm 安装和配置</h4><p>1.安装</p><ul><li>安装node，自动安装npm包管理工具！</li></ul><p>2.配置依赖下载使用阿里镜像</p><ul><li><p>npm 安装依赖包时默认使用的是官方源，由于国内网络环境的原因，有时会出现下载速度过慢的情况。为了解决这个问题，可以配置使用阿里镜像来加速 npm 的下载速度，具体操作如下：</p></li><li><p>打开命令行终端，执行以下命令，配置使用阿里镜像：</p></li><li><p>原来的 registry.npmmirror.com 已替换为 registry.npm.taobao.org</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><ul><li>确认配置已生效，可以使用以下命令查看当前 registry 的配置：如果输出结果为 <code>https://registry.npmmirror.com</code>，说明配置已成功生效。</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><ul><li>如果需要恢复默认的官方源，可以执行以下命令：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npmjs.org/</span></span><br></pre></td></tr></table></figure><p>3.配置全局依赖下载后存储位置</p><ul><li><p>在 Windows 系统上，npm 的全局依赖默认安装在 <code>&lt;用户目录&gt;\AppData\Roaming\npm</code> 目录下。 </p></li><li><p>如果需要修改全局依赖的安装路径，可以按照以下步骤操作：</p></li></ul><ol><li><ol><li>创建一个新的全局依赖存储目录，例如 <code>D:\GlobalNodeModules</code>。 </li><li>打开命令行终端，执行以下命令来配置新的全局依赖存储路径：</li></ol></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;D:\GlobalNodeModules&quot;</span><br></pre></td></tr></table></figure><ol><li><ol><li>确认配置已生效，可以使用以下命令查看当前的全局依赖存储路径：</li></ol></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config get prefix</span><br></pre></td></tr></table></figure><p>4.升级npm版本</p><ul><li><p>cmd 输入npm -v 查看版本 </p></li><li><p>如果node中自带的npm版本过低！则需要升级至9.6.6！</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g npm@9.6.6</span><br></pre></td></tr></table></figure><h4 id="3-2-3-npm-常用命令"><a href="#3-2-3-npm-常用命令" class="headerlink" title="3.2.3 npm 常用命令"></a>3.2.3 npm 常用命令</h4><p>1.项目初始化</p><ul><li><p>npm init </p></li><li><ul><li>进入一个vscode创建好的项目中, 执行 npm init 命令后，npm 会引导您在命令行界面上回答一些问题,例如项目名称、版本号、作者、许可证等信息，并最终生成一个package.json 文件。package.json信息会包含项目基本信息！类似maven的pom.xml</li></ul></li><li><p>npm init -y </p></li><li><ul><li>执行，-y yes的意思，所有信息使用当前文件夹的默认值！不用挨个填写！</li></ul></li></ul><p>2.安装依赖  (查看所有依赖地址  <a href="https://www.npmjs.com/">https://www.npmjs.com</a> )</p><ul><li><p>npm install 包名 或者 npm install 包名@版本号 </p></li><li><ul><li>安装包或者指定版本的依赖包(安装到当前项目中)</li></ul></li><li><p>npm install -g 包名 </p></li><li><ul><li>安装全局依赖包(安装到d:&#x2F;GlobalNodeModules)则可以在任何项目中使用它，而无需在每个项目中独立安装该包。</li></ul></li><li><p>npm install  可以简写为npm i</p></li><li><ul><li>安装package.json中的所有记录的依赖</li></ul></li></ul><p>3.升级依赖</p><ul><li><p>npm update 包名 </p></li><li><ul><li>将依赖升级到最新版本</li></ul></li></ul><p>4.卸载依赖</p><ul><li>npm uninstall 包名</li></ul><p>5.查看依赖</p><ul><li><p>npm ls </p></li><li><ul><li>查看项目依赖</li></ul></li><li><p>npm list -g </p></li><li><ul><li>查看全局依赖</li></ul></li></ul><p>6.运行命令</p><ul><li><p>npm run 命令是在执行 npm 脚本时使用的命令。npm 脚本是一组在 package.json 文件中定义的可执行命令。npm 脚本可用于启动应用程序，运行测试，生成文档等，还可以自定义命令以及配置需要运行的脚本。 </p></li><li><p>在 package.json 文件中，scripts 字段是一个对象，其中包含一组键值对，键是要运行的脚本的名称，值是要执行的命令。例如，以下是一个简单的 package.json 文件：</p></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.17.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^27.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.39.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>scripts 对象包含 start、test 和 build 三个脚本。当您运行 npm run start 时，将运行 node index.js，并启动应用程序。同样，运行 npm run test 时，将运行 Jest 测试套件，而 npm run build 将运行 webpack 命令以生成最终的构建输出。</p></li><li><p>总之，npm run 命令为您提供了一种在 package.json 文件中定义和管理一组指令的方法，可以在项目中快速且灵活地运行各种操作。</p></li></ul><h2 id="四、Vue3简介和快速体验"><a href="#四、Vue3简介和快速体验" class="headerlink" title="四、Vue3简介和快速体验"></a>四、Vue3简介和快速体验</h2><h3 id="4-1-Vue3介绍"><a href="#4-1-Vue3介绍" class="headerlink" title="4.1 Vue3介绍"></a>4.1 Vue3介绍</h3><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707725770415-9d689969-c9b1-44c5-bdb9-4f907d38eb0d.png" alt="img"></p><p>Vue (发音为 &#x2F;vjuː&#x2F;，类似 <strong>view</strong>) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。官网为:<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p><p><strong>Vue的两个核心功能：</strong></p><ul><li><p><strong>声明式渲染</strong>：Vue 基于标准 HTML 拓展了一套模板语法，使得我们可以声明式地描述最终输出的 HTML 和 JavaScript 状态之间的关系。</p></li><li><p><strong>响应性</strong>：Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM</p></li></ul><p>VUE作者:尤雨溪</p><ul><li><p>尤雨溪（Evan You），毕业于科尔盖特大学，前端框架Vue.js的作者、HTML5版Clear的打造人、独立开源开发者。曾就职于Google Creative Labs和Meteor Development Group。由于工作中大量接触开源的JavaScript项目，最后自己也走上了开源之路，现全职开发和维护Vue.js </p></li><li><p>尤雨溪毕业于上海复旦附中，在美国完成大学学业，本科毕业于Colgate University，后在Parsons设计学院获得Design &amp; Technology艺术硕士学位，任职于纽约Google Creative Lab。 </p></li><li><p>尤雨溪大学专业并非是计算机专业，在大学期间他学习专业是室内艺术和艺术史，后来读了美术设计和技术的硕士，正是在读硕士期间，他偶然接触到了JavaScript，从此被这门编程语言深深吸引，开启了自己的前端生涯。</p></li></ul><h3 id="4-2-Vue3快速体验-非工程化方式"><a href="#4-2-Vue3快速体验-非工程化方式" class="headerlink" title="4.2 Vue3快速体验(非工程化方式)"></a>4.2 Vue3快速体验(非工程化方式)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里也可以用浏览器打开连接,然后将获得的文本单独保存进入一个vue.js的文件,导入vue.js文件即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 给style属性绑定colorStyle数据 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &#123;&#123;插值表达式 直接将数据放在该位置&#125;&#125; --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;colorStyle&quot;</span>&gt;</span>&#123;&#123;headline&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- v-text设置双标签中的文本 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;article&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 给type属性绑定inputType数据 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:type</span> =<span class="string">&quot;inputType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;helloVue3&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 给按钮单击事件绑定函数 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;sayHello()&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//组合api</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 在setup内部自由声明数据和方法即可!最终返回!</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//定义数据</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//在VUE中实现DOM的思路是: 通过修改修数据而影响页面元素</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// vue3中,数据默认不是响应式的,需要加ref或者reactive处理,后面会详细讲解</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> inputType =<span class="string">&#x27;text&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> headline =<span class="string">&#x27;hello vue3&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> article =<span class="string">&#x27;vue is awesome&#x27;</span>  </span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> colorStyle =&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;red&#x27;</span>&#125;        </span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 定义函数</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> <span class="title function_">sayHello</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;hello Vue&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//在setup函数中,return返回的数据和函数可以在html使用</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                       inputType,</span></span><br><span class="line"><span class="language-javascript">                       headline,</span></span><br><span class="line"><span class="language-javascript">                       article,</span></span><br><span class="line"><span class="language-javascript">                       colorStyle,</span></span><br><span class="line"><span class="language-javascript">                       sayHello</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//挂载到视图</span></span></span><br><span class="line"><span class="language-javascript">            app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、Vue3通过Vite实现工程化"><a href="#五、Vue3通过Vite实现工程化" class="headerlink" title="五、Vue3通过Vite实现工程化"></a>五、Vue3通过Vite实现工程化</h2><h3 id="5-1-Vite的介绍"><a href="#5-1-Vite的介绍" class="headerlink" title="5.1 Vite的介绍"></a>5.1 Vite的介绍</h3><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707725806540-fbe8c3b2-910b-47a4-8a93-367283d0d5b5.png" alt="img"></p><p>在浏览器支持 ES 模块之前，JavaScript 并没有提供原生机制让开发者以模块化的方式进行开发。这也正是我们对 “打包” 这个概念熟悉的原因：使用工具抓取、处理并将我们的源码模块串联成可以在浏览器中运行的文件。时过境迁，我们见证了诸如 <a href="https://webpack.js.org/">webpack</a>、<a href="https://rollupjs.org/">Rollup</a> 和 <a href="https://parceljs.org/">Parcel</a> 等工具的变迁，它们极大地改善了前端开发者的开发体验</p><ul><li><p>当我们开始构建越来越大型的应用时，需要处理的 JavaScript 代码量也呈指数级增长。</p></li><li><p>包含数千个模块的大型项目相当普遍。基于 JavaScript 开发的工具就会开始遇到性能瓶颈：通常需要很长时间（甚至是几分钟！）才能启动开发服务器，即使使用模块热替换（HMR），文件修改后的效果也需要几秒钟才能在浏览器中反映出来。如此循环往复，迟钝的反馈会极大地影响开发者的开发效率和幸福感。</p></li></ul><p>Vite 旨在利用生态系统中的新进展解决上述问题：浏览器开始原生支持 ES 模块，且越来越多 JavaScript 工具使用编译型语言编写。<a href="https://cn.vitejs.dev/guide/why.html%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8C%85%E6%8B%AC%E4%BD%86%E4%B8%8D%E9%99%90%E4%BA%8E%E4%BB%A5%E4%B8%8B%E5%87%A0%E4%B8%AA%E6%96%B9%E9%9D%A2%EF%BC%9A">https://cn.vitejs.dev/guide/why.html前端工程化的作用包括但不限于以下几个方面：</a></p><ol><li><p>快速创建项目：使用脚手架可以快速搭建项目基本框架，避免从零开始搭建项目的重复劳动和繁琐操作，从而节省时间和精力。</p></li><li><p>统一的工程化规范：前端脚手架可以预设项目目录结构、代码规范、git提交规范等统一的工程化规范，让不同开发者在同一个项目上编写出风格一致的代码，提高协作效率和质量。</p></li><li><p>代码模板和组件库：前端脚手架可以包含一些常用的代码模板和组件库，使开发者在实现常见功能时不再重复造轮子，避免因为轮子质量不高带来的麻烦，能够更加专注于项目的业务逻辑。</p></li><li><p>自动化构建和部署：前端脚手架可以自动进行代码打包、压缩、合并、编译等常见的构建工作，可以通过集成自动化部署脚本，自动将代码部署到测试、生产环境等。</p></li></ol><h3 id="5-2-Vite创建Vue3工程化项目"><a href="#5-2-Vite创建Vue3工程化项目" class="headerlink" title="5.2 Vite创建Vue3工程化项目"></a>5.2 Vite创建Vue3工程化项目</h3><h4 id="5-2-1-Vite-Vue3项目的创建、启动、停止"><a href="#5-2-1-Vite-Vue3项目的创建、启动、停止" class="headerlink" title="5.2.1 Vite+Vue3项目的创建、启动、停止"></a>5.2.1 Vite+Vue3项目的创建、启动、停止</h4><p>1 使用命令行创建工程</p><ul><li><p>在磁盘的合适位置上,创建一个空目录用于存储多个前端项目</p></li><li><p>用vscode打开该目录</p></li><li><p>在vocode中打开命令行运行如下命令</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure><ul><li>第一次使用vite时会提示下载vite,输入y回车即可,下次使用vite就不会出现了</li></ul><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707725830974-bfccb52e-b84d-4985-801d-d370538dae84.png" alt="img"></p><ul><li>注意： 选择vue+JavaScript选项即可</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">PS D:\JavaStudy&gt; npm create vite       </span><br><span class="line">Need to install the following packages:</span><br><span class="line">create-vite@5.2.0</span><br><span class="line">Ok to proceed? (y) y</span><br><span class="line">√ Project name: ... demoVue</span><br><span class="line">√ Package name: ... demovue</span><br><span class="line">√ Select a framework: » Vue</span><br><span class="line">√ Select a variant: » JavaScript</span><br><span class="line"></span><br><span class="line">Scaffolding project in D:\JavaStudy\demoVue...</span><br><span class="line"></span><br><span class="line">Done. Now run:</span><br><span class="line"></span><br><span class="line">  cd demoVue</span><br><span class="line">  npm install</span><br><span class="line">  npm run dev</span><br><span class="line"></span><br><span class="line">PS D:\JavaStudy&gt;</span><br></pre></td></tr></table></figure><p>2 安装项目所需依赖</p><ul><li><p>cd进入刚刚创建的项目目录</p></li><li><p>npm install命令安装基础依赖</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ./demoVue</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>3 启动项目</p><ul><li>查看项目下的package.json</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue3-demo1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bootstrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.62.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.47&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.3.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707725852837-6b02a762-9cdd-4c5f-af72-6c9c892ef93f.png" alt="img"></p><p>5 停止项目</p><ul><li>命令行上 ctrl+c</li></ul><h4 id="5-2-2-Vite-Vue3项目的目录结构"><a href="#5-2-2-Vite-Vue3项目的目录结构" class="headerlink" title="5.2.2 Vite+Vue3项目的目录结构"></a>5.2.2 Vite+Vue3项目的目录结构</h4><p>1.下面是 Vite 项目结构和入口的详细说明：</p><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707725862771-65c40502-fadd-4a94-8eca-97c90d52eb2b.png" alt="img"></p><ul><li><p>public&#x2F; 目录：用于存放一些公共资源，如 HTML 文件、图像、字体等，这些资源会被直接复制到构建出的目标目录中。</p></li><li><p>src&#x2F; 目录：存放项目的源代码，包括 JavaScript、CSS、Vue 组件、图像和字体等资源。在开发过程中，这些文件会被 Vite 实时编译和处理，并在浏览器中进行实时预览和调试。以下是src内部划分建议：</p></li></ul><ol><li><ol><li><code>assets/</code> 目录：用于存放一些项目中用到的静态资源，如图片、字体、样式文件等。</li><li><code>components/</code> 目录：用于存放组件相关的文件。组件是代码复用的一种方式，用于抽象出一个可复用的 UI 部件，方便在不同的场景中进行重复使用。</li><li><code>layouts/</code> 目录：用于存放布局组件的文件。布局组件通常负责整个应用程序的整体布局，如头部、底部、导航菜单等。</li><li><code>pages/</code> 目录：用于存放页面级别的组件文件，通常是路由对应的组件文件。在这个目录下，可以创建对应的文件夹，用于存储不同的页面组件。</li><li><code>plugins/</code> 目录：用于存放 Vite 插件相关的文件，可以按需加载不同的插件来实现不同的功能，如自动化测试、代码压缩等。</li><li><code>router/</code> 目录：用于存放 Vue.js 的路由配置文件，负责管理视图和 URL 之间的映射关系，方便实现页面之间的跳转和数据传递。</li><li><code>store/</code> 目录：用于存放 Vuex 状态管理相关的文件，负责管理应用程序中的数据和状态，方便统一管理和共享数据，提高开发效率。</li><li><code>utils/</code> 目录：用于存放一些通用的工具函数，如日期处理函数、字符串操作函数等。</li></ol></li></ol><ul><li><p>vite.config.js 文件：Vite 的配置文件，可以通过该文件配置项目的参数、插件、打包优化等。该文件可以使用 CommonJS 或 ES6 模块的语法进行配置。</p></li><li><p>package.json 文件：标准的 Node.js 项目配置文件，包含了项目的基本信息和依赖关系。其中可以通过 scripts 字段定义几个命令，如 dev、build、serve 等，用于启动开发、构建和启动本地服务器等操作。</p></li><li><p>Vite 项目的入口为 src&#x2F;main.js 文件，这是 Vue.js 应用程序的启动文件，也是整个前端应用程序的入口文件。在该文件中，通常会引入 Vue.js 及其相关插件和组件，同时会创建 Vue 实例，挂载到 HTML 页面上指定的 DOM 元素中。</p></li></ul><p>2.vite的运行界面</p><ul><li>在安装了 Vite 的项目中，可以在 npm scripts 中使用 <code>vite</code> 可执行文件，或者直接使用 <code>npx vite</code> 运行它。下面是通过脚手架创建的 Vite 项目中默认的 npm scripts：(package.json)</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span> <span class="comment">// 启动开发服务器，别名：`vite dev`，`vite serve`</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span> <span class="comment">// 为生产环境构建产物</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span> <span class="comment">// 本地预览生产构建产物</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>运行设置端口号：(vite.config.js)</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改vite项目配置文件 vite.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>:&#123;</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5-2-3-Vite-Vue3项目组件-SFC入门"><a href="#5-2-3-Vite-Vue3项目组件-SFC入门" class="headerlink" title="5.2.3 Vite+Vue3项目组件(SFC入门)"></a>5.2.3 Vite+Vue3项目组件(SFC入门)</h4><p>什么是VUE的组件?</p><ul><li><p>一个页面作为整体,是由多个部分组成的,每个部分在这里就可以理解为一个组件</p></li><li><p>每 个.vue文件就可以理解为一个组件,多个.vue文件可以构成一个整体页面</p></li><li><p>组件化给我们带来的另一个好处就是组件的复用和维护非常的方便</p></li></ul><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707725885109-8f6dabfe-b9b4-4f13-bfff-fb1b91fecf62.png" alt="img"></p><p>什么是.vue文件?</p><ul><li><p>传统的页面有.html文件.css文件和.js文件三个文件组成(多文件组件) </p></li><li><p>vue将这文件合并成一个.vue文件(Single-File Component，简称 SFC,单文件组件) </p></li><li><p>.vue文件对js&#x2F;css&#x2F;html统一封装,这是VUE中的概念 该文件由三个部分组成   <code>&lt;script&gt; &lt;template&gt; &lt;style&gt;</code> </p></li><li><ul><li>template标签   代表组件的html部分代码代替传统的.html文件</li></ul></li><li><ul><li>script标签      代表组件的js代码 代替传统的.js文件</li></ul></li><li><ul><li>style标签       代表组件的css样式代码 代替传统的.css文件</li></ul></li></ul><p>工程化vue项目如何组织这些组件?</p><ul><li><p>index.html是项目的入口,其中 <code>&lt;div id =&#39;app&#39;&gt;&lt;/div&gt;</code>是用于挂载所有组建的元素</p></li><li><p>index.html中的script标签引入了一个main.js文件,具体的挂载过程在main.js中执行</p></li><li><p>main.js是vue工程中非常重要的文件,他决定这项目使用哪些依赖,导入的第一个组件</p></li><li><p>App.vue是vue中的核心组件,所有的其他组件都要通过该组件进行导入,该组件通过路由可以控制页面的切换</p></li></ul><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707725895146-15413d31-93f1-4a47-97db-a0a513788338.png" alt="img"></p><h4 id="5-2-4-Vite-Vue3响应式入门和setup函数"><a href="#5-2-4-Vite-Vue3响应式入门和setup函数" class="headerlink" title="5.2.4 Vite+Vue3响应式入门和setup函数"></a>5.2.4 Vite+Vue3响应式入门和setup函数</h4><p>1 使用vite创建一个 vue+JavaScript项目</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm create vite</span><br><span class="line">npm install </span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//存储vue页面逻辑js代码</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 页面的样式的是html代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    /** 存储的是css代码! <span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span> 是 Vue.js 单文件组件中用于设置组件样式的一种方式。</span></span><br><span class="line"><span class="language-xml">    它的含义是将样式局限在当前组件中，不对全局样式造成影响。 */</span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2 vue3响应式数据入门</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//存储vue页面逻辑js代码</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//非响应式数据: 修改后VUE不会更新DOM</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//响应式数据:   修改后VUE会更新DOM</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//VUE2中数据默认是响应式的</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//VUE3中数据要经过ref或者reactive处理后才是响应式的</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//ref是VUE3框架提供的一个函数,需要导入</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//let counter = 1</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//ref处理的响应式数据在js编码修改的时候需要通过.value操作</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//ref响应式数据在绑定到html上时不需要.value</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> counter = <span class="title function_">ref</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">increase</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 通过.value修改响应式数据</span></span></span><br><span class="line"><span class="language-javascript">                counter.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">decrease</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                counter.<span class="property">value</span>--</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                counter,</span></span><br><span class="line"><span class="language-javascript">                increase,</span></span><br><span class="line"><span class="language-javascript">                decrease</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrease()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      &#123;&#123; counter &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increase()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">button</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> &gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">/*  </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     非响应式数据: 修改后VUE不会更新DOM</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     响应式数据:   修改后VUE会更新DOM</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     vue2中 数据默认就是响应式的</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     vue3中 数据经过ref/reactive函数的处理才是响应式的</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            ref reactive函数是vue框架提给的方法，导入进来才可使用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    ref处理的响应式数据，在操作时需要注意</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      在script标签中，操作ref的响应式数据需要通过.value的形式操作</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      在template标签中，操作ref的响应式数据，无需.value</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//定义一些要展示到html的数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span>  conter = <span class="title function_">ref</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//让conter自加的方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">conterIncr</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          conter.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//让conter自减的方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">conterDecr</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          conter.<span class="property">value</span>--</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//显示conter值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">showConter</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(conter.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          conter,</span></span><br><span class="line"><span class="language-javascript">          conterIncr,</span></span><br><span class="line"><span class="language-javascript">          conterDecr,</span></span><br><span class="line"><span class="language-javascript">          showConter</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;conterIncr&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;conter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;conterDecr&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showConter&quot;</span>&gt;</span>show<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3 vue3 setup函数和语法糖</p><ul><li>位置：src&#x2F;App.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;module&quot; setup&gt;</span><br><span class="line"></span><br><span class="line">  /* &lt;script type=&quot;module&quot; setup&gt; 通过setup关键字</span><br><span class="line">可以省略 export default &#123;setup()&#123;   return&#123;&#125;&#125;&#125;这些冗余的语法结构 */</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 定义响应式数据</span><br><span class="line">  let counter = ref(1)</span><br><span class="line">  // 定义函数</span><br><span class="line">  function increase()&#123;</span><br><span class="line">    counter.value++</span><br><span class="line">  &#125;</span><br><span class="line">  function decrease()&#123;</span><br><span class="line">    counter.value--</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;decrease()&quot;&gt;-&lt;/button&gt;</span><br><span class="line">    &#123;&#123; counter &#125;&#125;</span><br><span class="line">    &lt;button @click=&quot;increase()&quot;&gt;+&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;style scoped&gt;</span><br><span class="line">  button&#123;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="5-2-5-Vite-Vue3关于CSS样式的导入方式"><a href="#5-2-5-Vite-Vue3关于CSS样式的导入方式" class="headerlink" title="5.2.5 Vite+Vue3关于CSS样式的导入方式"></a>5.2.5 Vite+Vue3关于CSS样式的导入方式</h4><ol><li>全局引入main.js</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style/reset.css&#x27;</span> <span class="comment">//书写引入的资源的相对路径即可！</span></span><br></pre></td></tr></table></figure><ol><li>vue文件script代码引入</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style/reset.css&#x27;</span></span><br></pre></td></tr></table></figure><ol><li>Vue文件style代码引入</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;./style/reset.css&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-6-关于JS和TS选择的问题"><a href="#5-2-6-关于JS和TS选择的问题" class="headerlink" title="5.2.6 关于JS和TS选择的问题"></a>5.2.6 关于JS和TS选择的问题</h4><p>TS是JS的一个超集,使用TS之后,JS的语法更加的像JAVA,实际开发中用的确实更多,那么这里为什么我们没有立即使用TS进行开发,原因如下</p><p>1 为了降低难度,提高前端工程化的效率</p><p>2 对于学JAVA的我们来说,学习TS非常容易,但是还是需要一些时间</p><p>3 TS不是非学不可,不用TS仍然可以正常开发工程化的前端项目</p><p>4  建议大家先学完完整的前端工程化内容,然后再根据需求单独学习TS即可</p><h2 id="六、Vue3视图渲染技术"><a href="#六、Vue3视图渲染技术" class="headerlink" title="六、Vue3视图渲染技术"></a>六、Vue3视图渲染技术</h2><h3 id="6-1-模版语法"><a href="#6-1-模版语法" class="headerlink" title="6.1 模版语法"></a>6.1 模版语法</h3><p>Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的组件的最少数量，并应用最少的 DOM 操作。</p><h4 id="6-1-1-插值表达式和文本渲染v-text"><a href="#6-1-1-插值表达式和文本渲染v-text" class="headerlink" title="6.1.1 插值表达式和文本渲染v-text"></a>6.1.1 插值表达式和文本渲染v-text</h4><p>插值表达式:最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法 ,即双大括号<code>&#123;&#123;&#125;&#125;</code></p><ul><li><p>插值表达式是将数据渲染到元素的指定位置的手段之一</p></li><li><p>插值表达式不绝对依赖标签,其位置相对自由</p></li><li><p>插值表达式中支持javascript的运算表达式</p></li><li><p>插值表达式中也支持函数的调用</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> msg =<span class="string">&quot;hello vue3&quot;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getMsg</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="string">&#x27;hello vue3 message&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> age = <span class="number">19</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> bee = <span class="string">&#x27;蜜 蜂&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 购物车</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> carts = [&#123;<span class="attr">name</span>:<span class="string">&#x27;可乐&#x27;</span>,<span class="attr">price</span>:<span class="number">3</span>,<span class="attr">number</span>:<span class="number">10</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&#x27;薯片&#x27;</span>,<span class="attr">price</span>:<span class="number">6</span>,<span class="attr">number</span>:<span class="number">8</span>&#125;];</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//计算购物车总金额</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">compute</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> carts)&#123;</span></span><br><span class="line"><span class="language-javascript">          count += carts[index].<span class="property">price</span>*carts[index].<span class="property">number</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> count;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    msg的值为: &#123;&#123; msg &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 调用函数 --&gt;</span></span><br><span class="line">    getMsg返回的值为:&#123;&#123; getMsg() &#125;&#125;  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支持常见运算符 --&gt;</span></span><br><span class="line">    是否成年: &#123;&#123; age&gt;=18?&#x27;true&#x27;:&#x27;false&#x27; &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支持调用api --&gt;</span></span><br><span class="line">    反转: &#123;&#123; bee.split(&#x27; &#x27;).reverse().join(&#x27;-&#x27;) &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    购物车总金额: &#123;&#123; compute() &#125;&#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    购物车总金额: &#123;&#123;carts[0].price*carts[0].number + carts[1].price*carts[1].number&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了渲染双标中的文本,我们也可以选择使用<code>v-text</code>和<code>v-html</code>命令</p><ul><li><p>v-*** 这种写法的方式使用的是vue的命令</p></li><li><p>v-***的命令必须依赖元素,并且要写在元素的开始标签中</p></li><li><p>v-***指令支持ES6中的字符串模板</p></li><li><p>插值表达式中支持javascript的运算表达式</p></li><li><p>插值表达式中也支持函数的调用</p></li><li><p>v-text可以将数据渲染成双标签中间的文本,但是不识别html元素结构的文本</p></li><li><p>v-html可以将数据渲染成双标签中间的文本,识别html元素结构的文本</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> msg =<span class="string">&#x27;hello vue3&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getMsg</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> msg</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> age = <span class="number">19</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> bee = <span class="string">&#x27;蜜 蜂&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> redMsg =<span class="string">&#x27;&lt;font color=\&#x27;red\&#x27;&gt;msg&lt;/font&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> greenMsg =<span class="string">`&lt;font color=\&#x27;green\&#x27;&gt;<span class="subst">$&#123;msg&#125;</span>&lt;/font&gt;`</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&#x27;redMsg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&#x27;getMsg()&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&#x27;age&gt;18?&quot;成年&quot;:&quot;未成年&quot;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&#x27;bee.split(&quot; &quot;).reverse().join(&quot;-&quot;)&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&#x27;redMsg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&#x27;greenMsg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;`&lt;font color=&#x27;green&#x27;&gt;$&#123;msg&#125;&lt;/font&gt;`&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-1-2-Attribute属性渲染-v-bind"><a href="#6-1-2-Attribute属性渲染-v-bind" class="headerlink" title="6.1.2 Attribute属性渲染 v-bind"></a>6.1.2 Attribute属性渲染 v-bind</h4><p>想要渲染一个元素的 attribute，应该使用 <code>v-bind</code>指令</p><ul><li><p>由于插值表达式不能直接放在标签的属性中,所有要渲染元素的属性就应该使用v-bind</p></li><li><p>v-bind可以用于渲染任何元素的属性,语法为 <code>v-bind:属性名=&#39;数据名&#39;</code>, 可以简写为 <code>:属性名=&#39;数据名&#39;</code></p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">url</span>:<span class="string">&quot;http://www.atguigu.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">logo</span>:<span class="string">&quot;http://www.atguigu.com/images/index_new/logo.png&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:href</span>=<span class="string">&#x27;data.url&#x27;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> </span></span><br><span class="line"><span class="tag">        &lt;!<span class="attr">--</span> <span class="attr">简写</span> <span class="attr">--</span>&gt;</span></span><br><span class="line">        :src=&quot;data.logo&quot; </span><br><span class="line">        :title=&quot;data.name&quot;&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">:value</span>=<span class="string">&quot;`点击访问$&#123;data.name&#125;`&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-1-3-事件的绑定-v-on"><a href="#6-1-3-事件的绑定-v-on" class="headerlink" title="6.1.3 事件的绑定 v-on"></a>6.1.3 事件的绑定 v-on</h4><p>我们可以使用 <code>v-on</code> 来监听 DOM 事件，并在事件触发时执行对应的 Vue的JavaScript代码。</p><ul><li><p>用法：<code>v-on:click=&quot;handler&quot;</code> 或简写为 <code>@click=&quot;handler&quot;</code></p></li><li><p>vue中的事件名&#x3D;原生事件名去掉<code>on</code> 前缀  如:<code>onClick --&gt; click</code></p></li><li><p>handler的值可以是方法事件处理器,也可以是内联事件处理器</p></li><li><p>绑定事件时,可以通过一些绑定的修饰符,常见的事件修饰符如下 </p></li><li><ul><li><code>.once：只触发一次事件。[重点]</code></li></ul></li><li><ul><li><code>.prevent：阻止默认事件。[重点]</code></li></ul></li><li><ul><li>.stop：阻止事件冒泡。</li></ul></li><li><ul><li>.capture：使用事件捕获模式而不是冒泡模式。</li></ul></li><li><ul><li>.self：只在事件发送者自身触发时才触发事件。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 响应式数据 当发生变化时,会自动更新 dom树</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> count=<span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">addCount</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">incrCount</span>= (<span class="params">event</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过事件对象阻止组件的默认行为</span></span></span><br><span class="line"><span class="language-javascript">    event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>count的值是:&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方法事件处理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addCount()&quot;</span>&gt;</span>addCount<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内联事件处理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>incrCount<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事件修饰符 once 只绑定事件一次 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>addOnce<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事件修饰符 prevent 阻止组件的默认行为 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>prevent<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 原生js方式阻止组件默认行为 (推荐) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;incrCount($event)&quot;</span>&gt;</span>prevent<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-响应式基础"><a href="#6-2-响应式基础" class="headerlink" title="6.2 响应式基础"></a>6.2 响应式基础</h3><p>此处的响应式是指  : 数据模型发生变化时,自动更新DOM树内容,页面上显示的内容会进行同步变化,vue3的数据模型不是自动响应式的,需要我们做一些特殊的处理</p><h4 id="6-2-1-响应式需求案例"><a href="#6-2-1-响应式需求案例" class="headerlink" title="6.2.1 响应式需求案例"></a>6.2.1 响应式需求案例</h4><p>需求：实现 +  - 按钮,实现数字加一减一</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> counter = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(counter);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    &#123;&#123; counter &#125;&#125; </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此案例,我们发现counter值,会改变,但是页面不改变! 默认Vue3的数据是非响应式的!--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show()&quot;</span>&gt;</span>显示counter值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-2-2-响应式实现关键字ref"><a href="#6-2-2-响应式实现关键字ref" class="headerlink" title="6.2.2 响应式实现关键字ref"></a>6.2.2 响应式实现关键字ref</h4><p><code>ref</code> 可以将一个基本类型的数据（如字符串，数字等）转换为一个响应式对象。 <code>ref</code> 只能包裹单一元素</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 从vue中引入ref方法 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> counter = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(counter.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 函数中要操作ref处理过的数据,需要通过.value形式 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">decr</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      counter.<span class="property">value</span>--;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">incr</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      counter.<span class="property">value</span>++;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decr()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    &#123;&#123; counter &#125;&#125; </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incr()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show()&quot;</span>&gt;</span>显示counter值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在上面的例子中，我们使用 <code>ref</code> 包裹了一个数字，在代码中给这个数字加 1 后，视图也会跟着动态更新。需要注意的是，由于使用了 <code>ref</code>，因此需要在访问该对象时使用 <code>.value</code> 来获取其实际值。</li></ul><h4 id="6-2-3-响应式实现关键字reactive"><a href="#6-2-3-响应式实现关键字reactive" class="headerlink" title="6.2.3 响应式实现关键字reactive"></a>6.2.3 响应式实现关键字reactive</h4><p>我们可以使用 <a href="https://cn.vuejs.org/api/reactivity-core.html#reactive">reactive()</a> 函数创建一个响应式对象或数组：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 从vue中引入reactive方法 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">counter</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(data.<span class="property">counter</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 函数中要操作reactive处理过的数据,需要通过 对象名.属性名的方式 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">decr</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      data.<span class="property">counter</span>--;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">incr</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      data.<span class="property">counter</span>++;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;data.counter--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decr()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    &#123;&#123; data.counter &#125;&#125; </span><br><span class="line">    <span class="comment">&lt;!--在script和template中使用直接对象名.属性值就可以  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;data.counter++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incr()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show()&quot;</span>&gt;</span>显示counter值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对比ref和reactive:</p><ul><li><p>使用 <code>ref</code> 适用于以下开发场景： </p></li><li><ul><li>包装基本类型数据：<code>ref</code> 主要用于包装基本类型数据（如字符串、数字等），即只有一个值的数据，如果你想监听这个值的变化，用 <code>ref</code> 最为方便。在组件中使用时也很常见。</li></ul></li><li><ul><li>访问方式简单：<code>ref</code> 对象在访问时与普通的基本类型值没有太大区别，只需要通过 <code>.value</code> 访问其实际值即可。</li></ul></li><li><p>使用 <code>reactive</code> 适用于以下开发场景： </p></li><li><ul><li>包装复杂对象：<code>reactive</code> 可以将一个普通对象转化为响应式对象，这样在数据变化时会自动更新界面，特别适用于处理复杂对象或者数据结构。</li></ul></li><li><ul><li>需要递归监听的属性：使用 <code>reactive</code> 可以递归追踪所有响应式对象内部的变化，从而保证界面的自动更新。</li></ul></li><li><p>综上所述，<code>ref</code> 适用与简单情形下的数据双向绑定，对于只有一个字符等基本类型数据或自定义组件等情况，建议可以使用 <code>ref</code>；而对于对象、函数等较为复杂的数据结构，以及需要递归监听的属性变化，建议使用 <code>reactive</code>。当然，在实际项目中根据需求灵活选择也是十分必要的。</p></li></ul><h4 id="6-2-4-扩展响应式关键字toRefs-和-toRef"><a href="#6-2-4-扩展响应式关键字toRefs-和-toRef" class="headerlink" title="6.2.4 扩展响应式关键字toRefs 和 toRef"></a>6.2.4 扩展响应式关键字toRefs 和 toRef</h4><p>toRef基于reactive响应式对象上的一个属性，创建一个对应的 ref响应式数据。这样创建的 ref 与其源属性保持同步：改变源属性的值将更新 ref 的值，反之亦然。toRefs将一个响应式对象多个属性转换为一个多个ref数据，这个普通对象的每个属性都是指向源对象相应属性的 ref。每个单独的 ref 都是使用 <a href="https://cn.vuejs.org/api/reactivity-utilities.html#toref">toRef()</a> 创建的。</p><p>案例：响应显示reactive对象属性</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 从vue中引入reactive方法 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,reactive,toRef,toRefs&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">counter</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>:<span class="string">&quot;test&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将一个reactive响应式对象中的某个属性转换成一个ref响应式对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> ct =<span class="title function_">toRef</span>(data,<span class="string">&#x27;counter&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将一个reactive响应式对象中的多个属性转换成多个ref响应式对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> &#123;counter,name&#125; = <span class="title function_">toRefs</span>(data)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(data.<span class="property">counter</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取ref的响应对象,需要通过.value属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(counter.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(name.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 函数中要操作ref处理过的数据,需要通过.value形式 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">decr</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      data.<span class="property">counter</span>--;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">incr</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/* ref响应式数据,要通过.value属性访问 */</span></span></span><br><span class="line"><span class="language-javascript">      counter.<span class="property">value</span>++;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;data.counter--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decr()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    &#123;&#123; data.counter &#125;&#125; </span><br><span class="line">    <span class="symbol">&amp;amp;</span></span><br><span class="line">    &#123;&#123; ct &#125;&#125; </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;data.counter++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incr()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show()&quot;</span>&gt;</span>显示counter值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-条件和列表渲染"><a href="#6-3-条件和列表渲染" class="headerlink" title="6.3 条件和列表渲染"></a>6.3 条件和列表渲染</h3><h4 id="6-3-1-条件渲染-v-if、v-else、v-show"><a href="#6-3-1-条件渲染-v-if、v-else、v-show" class="headerlink" title="6.3.1 条件渲染 v-if、v-else、v-show"></a>6.3.1 条件渲染 v-if、v-else、v-show</h4><p><code>v-if</code> 条件渲染</p><ul><li><p><code>v-if=&#39;表达式&#39;</code>只会在指令的表达式返回真值时才被渲染 </p></li><li><p>也可以使用 <code>v-else</code> 为 <code>v-if</code> 添加一个“else 区块”。 </p></li><li><p>一个 <code>v-else</code> 元素必须跟在一个 <code>v-if</code> 元素后面，否则它将不会被识别。 </p></li><li><p>v-else自动和前一个v-if做取反操作 和java 的if-else一样</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> awesome = <span class="title function_">ref</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果按钮生效，就取反awesome --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;awesome = !awesome&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-show</code>条件渲染扩展：</p><ul><li><p>另一个可以用来按条件显示一个元素的指令是 <code>v-show</code>。其用法基本一样： </p></li><li><p>不同之处在于 <code>v-show</code> 会在 DOM 渲染中保留该元素；<code>v-show</code> 仅切换了该元素上名为 <code>display</code> 的 CSS 属性。 </p></li><li><p><code>v-show</code> 不支持在 <code>&lt;template&gt;</code> 元素上使用，也不能和 <code>v-else</code> 搭配使用。</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> awesome = <span class="title function_">ref</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;ha&quot;</span>  <span class="attr">v-show</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;hb&quot;</span>  <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;hc&quot;</span>  <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;awesome = !awesome&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726029638-6a536198-dd70-4507-a701-704f1e21e10e.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**v-if**`   **vs** `**v-show**</span><br></pre></td></tr></table></figure><ul><li><p><code>v-if</code> 是“真实的”按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建。 </p></li><li><p><code>v-if</code> 也是<strong>惰性</strong>的：如果在初次渲染时条件值为 false，则不会做任何事。条件区块只有当条件首次变为 true 时才被渲染。 </p></li><li><p>相比之下，<code>v-show</code> 简单许多，元素无论初始条件如何，始终会被渲染，只有 CSS <code>display</code> 属性会被切换。 </p></li><li><p>总的来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要频繁切换，则使用 <code>v-show</code> 较好；如果在运行时绑定条件很少改变，则 <code>v-if</code> 会更合适。</p></li></ul><h4 id="6-3-2-列表渲染-v-for"><a href="#6-3-2-列表渲染-v-for" class="headerlink" title="6.3.2 列表渲染 v-for"></a>6.3.2 列表渲染 v-for</h4><p>我们可以使用 <code>v-for</code> 指令基于一个数组来渲染一个列表。</p><ul><li><p><code>v-for</code> 指令的值需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据的数组，而 <code>item</code> 是迭代项的<strong>别名</strong>： </p></li><li><p>在 <code>v-for</code> 块中可以完整地访问父作用域内的属性和变量。<code>v-for</code> 也支持使用可选的第二个参数表示当前项的位置索引。</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> parentMessage= <span class="title function_">ref</span>(<span class="string">&#x27;产品&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> items =<span class="title function_">reactive</span>([</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">id</span>:<span class="string">&#x27;item1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="string">&quot;薯片&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">id</span>:<span class="string">&#x27;item2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="string">&quot;可乐&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    ])</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- :key不写也可以 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in items&#x27;</span> <span class="attr">:key</span>=<span class="string">&#x27;item.id&#x27;</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.message &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- index表示索引,当然不是非得使用index这个单词 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>案例：实现购物车显示和删除购物项</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//引入模块</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//准备购物车数据,设置成响应数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> carts = <span class="title function_">reactive</span>([&#123;<span class="attr">name</span>:<span class="string">&#x27;可乐&#x27;</span>,<span class="attr">price</span>:<span class="number">3</span>,<span class="attr">number</span>:<span class="number">10</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&#x27;薯片&#x27;</span>,<span class="attr">price</span>:<span class="number">6</span>,<span class="attr">number</span>:<span class="number">8</span>&#125;])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//计算购物车总金额</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">compute</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> carts)&#123;</span></span><br><span class="line"><span class="language-javascript">        count += carts[index].<span class="property">price</span>*carts[index].<span class="property">number</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> count;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//删除购物项方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">removeCart</span>(<span class="params">index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">       carts.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>小计<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-if</span>=<span class="string">&quot;carts.length &gt; 0&quot;</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 有数据显示--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;cart,index in carts&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; index+1 &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; cart.name &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; cart.price + &#x27;元&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; cart.number &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; cart.price*cart.number  + &#x27;元&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeCart(index)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 没有数据显示--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;6&quot;</span>&gt;</span>购物车没有数据!<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        购物车总金额: &#123;&#123; compute() &#125;&#125; 元</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-4-双向绑定v-model"><a href="#6-4-双向绑定v-model" class="headerlink" title="6.4 双向绑定v-model"></a>6.4 双向绑定v-model</h3><p>单项绑定和双向绑定</p><ul><li><p>单向绑定v-bind: 响应式数据的变化会更新dom树,但是dom树上用户的操作造成的数据改变不会同步更新到响应式数据</p></li><li><p>双向绑定v-model: 响应式数据的变化会更新dom树,但是dom树上用户的操作造成的数据改变会同步更新到响应式数据 </p></li><li><ul><li>用户通过表单标签才能够输入数据,所以双向绑定都是应用到表单标签上的,其他标签不行</li></ul></li><li><ul><li>v-model专门用于双向绑定表单标签的value属性,语法为 <code>v-model:value=&#39;&#39;</code>,可以简写为 <code>v-model=&#39;&#39;</code></li></ul></li><li><ul><li>v-model还可以用于各种不同类型的输入，<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code> 元素。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//引入模块</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; reactive,ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> hbs = <span class="title function_">ref</span>([]); <span class="comment">//装爱好的值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> user = <span class="title function_">reactive</span>(&#123;<span class="attr">username</span>:<span class="literal">null</span>,<span class="attr">password</span>:<span class="literal">null</span>,<span class="attr">introduce</span>:<span class="literal">null</span>,<span class="attr">pro</span>:<span class="literal">null</span>&#125;)   </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(hbs.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user));</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">clearx</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//user = &#123;&#125;;// 这中写法会将数据变成非响应的,应该是user.username=&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">username</span>=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">password</span>=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">introduce</span>=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">pro</span>=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    hbs.<span class="property">value</span>.<span class="title function_">splice</span>(<span class="number">0</span>,hbs.<span class="property">value</span>.<span class="property">length</span>);;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      账号： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号！&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号！&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      爱好： </span><br><span class="line">        吃 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hbs&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hbs&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吃&quot;</span>&gt;</span> </span><br><span class="line">        喝 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hbs&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hbs&quot;</span> <span class="attr">value</span>=<span class="string">&quot;喝&quot;</span>&gt;</span></span><br><span class="line">        玩 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hbs&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hbs&quot;</span> <span class="attr">value</span>=<span class="string">&quot;玩&quot;</span>&gt;</span></span><br><span class="line">        乐 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hbs&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hbs&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乐&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      简介:<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;user.introduce&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      籍贯:</span><br><span class="line">          <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;user.pro&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>黑<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>吉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>辽<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>&gt;</span>津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;6&quot;</span>&gt;</span>冀<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;login()&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clearx()&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      显示爱好:&#123;&#123; hbs &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      显示用户信息:&#123;&#123; user &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-5-属性计算-computed"><a href="#6-5-属性计算-computed" class="headerlink" title="6.5 属性计算 computed()"></a>6.5 属性计算 computed()</h3><p>模板中的表达式虽然方便，但也只能用来做简单的操作。如果在模板中写太多逻辑，会让模板变得臃肿，难以维护。比如说，我们有这样一个包含嵌套数组的对象：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//引入模块</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; reactive,computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> author = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">books</span>: [</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Vue 3 - Basic Guide&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Vue 4 - The Mystery&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;author.name&#125;&#125; Has published books?:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; author.books.length &gt; 0 ? &#x27;Yes&#x27; : &#x27;No&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这里的模板看起来有些复杂。我们必须认真看好一会儿才能明白它的计算依赖于 <code>author.books</code>。更重要的是，如果在模板中需要不止一次这样的计算，我们可不想将这样的代码在模板里重复好多遍。</li></ul><p>因此我们推荐使用<strong>计算属性</strong>来描述依赖响应式状态的复杂逻辑。这是重构后的示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//引入模块</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; reactive,computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> author = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">books</span>: [</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Vue 3 - Basic Guide&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Vue 4 - The Mystery&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 一个计算属性 ref</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> publishedBooksMessage = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;publishedBooksMessage&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> author.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27;Yes&#x27;</span> : <span class="string">&#x27;No&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 一个函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">hasBooks</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hasBooks&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> author.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span>?<span class="string">&#x27;Yes&#x27;</span>:<span class="string">&#x27;no&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;author.name&#125;&#125; Has published books?:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; author.books.length &gt; 0 ? &#x27;Yes&#x27; : &#x27;No&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>\</span><br><span class="line">    <span class="comment">&lt;!-- 调用方法,每个标签都会调用一次 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; hasBooks() &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; hasBooks() &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;author.name&#125;&#125; Has published books?:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 属性计算,属性值不变时,多个个标签只会调用一次 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; publishedBooksMessage &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; publishedBooksMessage &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>我们在这里定义了一个计算属性 <code>publishedBooksMessage</code>。<code>computed()</code> 方法期望接收一个 getter 函数，返回值为一个<strong>计算属性 ref</strong>。和其他一般的 ref 类似，你可以通过 <code>publishedBooksMessage.value</code> 访问计算结果。计算属性 ref 也会在模板中自动解包，因此在模板表达式中引用时无需添加 <code>.value</code>。 </p></li><li><p>Vue 的计算属性会自动追踪响应式依赖。它会检测到 <code>publishedBooksMessage</code> 依赖于 <code>author.books</code>，所以当 <code>author.books</code> 改变时，任何依赖于 <code>publishedBooksMessage</code> 的绑定都会同时更新。</p></li></ul><p>计算属性缓存 vs 方法</p><ul><li>若我们将同样的函数定义为一个方法而不是计算属性，两种方式在结果上确实是完全相同的，然而，不同之处在于<strong>计算属性值会基于其响应式依赖被缓存</strong>。一个计算属性仅会在其响应式依赖更新时才重新计算。这意味着只要 <code>author.books</code> 不改变，无论多少次访问 <code>publishedBooksMessage</code> 都会立即返回先前的计算结果!</li></ul><h3 id="6-6-数据监听器-watch"><a href="#6-6-数据监听器-watch" class="headerlink" title="6.6 数据监听器 watch"></a>6.6 数据监听器 watch</h3><p>计算属性允许我们声明性地计算衍生值。然而在有些情况下，我们需要在状态变化时执行一些“副作用”：例如更改 DOM，或是根据异步操作的结果去修改另一处的状态。我们可以使用 <a href="https://cn.vuejs.org/api/reactivity-core.html#watch">watch</a><a href="https://cn.vuejs.org/api/reactivity-core.html#watch"> 函数</a>在每次响应式状态发生变化时触发回调函数：</p><ul><li><p>watch主要用于以下场景： </p></li><li><ul><li>当数据发生变化时需要执行相应的操作</li></ul></li><li><ul><li>监听数据变化，当满足一定条件时触发相应操作</li></ul></li><li><ul><li>在异步操作前或操作后需要执行相应的操作</li></ul></li></ul><p>监控响应式数据（watch）：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//引入模块</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref,reactive,watch&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> firstname=<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> lastname=<span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> fullname=<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//监听一个ref响应式数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">watch</span>(firstname,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;oldValue&#125;</span>变为<span class="subst">$&#123;newValue&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">    fullname.<span class="property">value</span>=firstname.<span class="property">value</span>+lastname.<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//监听reactive响应式数据的指定属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">watch</span>(<span class="function">()=&gt;</span>lastname.<span class="property">name</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;oldValue&#125;</span>变为<span class="subst">$&#123;newValue&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">    fullname.<span class="property">value</span>=firstname.<span class="property">value</span>+lastname.<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//监听reactive响应式数据的所有属性(深度监视,一般不推荐)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//deep:true 深度监视</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//immediate:true 深度监视在进入页面时立即执行一次</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">watch</span>(<span class="function">()=&gt;</span>lastname,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此时的newValue和oldValue一样,都是lastname</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oldValue)</span></span><br><span class="line"><span class="language-javascript">    fullname.<span class="property">value</span>=firstname.<span class="property">value</span>+lastname.<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>,<span class="attr">immediate</span>:<span class="literal">false</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    全名:&#123;&#123;fullname&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓氏:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名字:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastname.name&quot;</span> &gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>监控响应式数据(watchEffect)：</p><ul><li>watchEffect默认监听所有的响应式数据</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//引入模块</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref,reactive,watch, watchEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> firstname=<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> lastname=<span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> fullname=<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//监听所有响应式数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//直接在内部使用监听属性即可！不用外部声明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//也不需要，即时回调设置！默认初始化就加载！</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(firstname.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(lastname.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">    fullname.<span class="property">value</span>=<span class="string">`<span class="subst">$&#123;firstname.value&#125;</span><span class="subst">$&#123;lastname.name&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    全名:&#123;&#123;fullname&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓氏:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名字:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastname.name&quot;</span> &gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">watch` vs. `watchEffect</span><br></pre></td></tr></table></figure><ul><li><p><code>watch</code> 和 <code>watchEffect</code> 都能响应式地执行有副作用的回调。它们之间的主要区别是追踪响应式依赖的方式： </p></li><li><ul><li><code>watch</code> 只追踪明确侦听的数据源。它不会追踪任何在回调中访问到的东西。另外，仅在数据源确实改变时才会触发回调。<code>watch</code> 会避免在发生副作用时追踪依赖，因此，我们能更加精确地控制回调函数的触发时机。</li></ul></li><li><ul><li><code>watchEffect</code>，则会在副作用发生期间追踪依赖。它会在同步执行过程中，自动追踪所有能访问到的响应式属性。这更方便，而且代码往往更简洁，但有时其响应性依赖关系会不那么明确。</li></ul></li></ul><h3 id="6-7-Vue生命周期"><a href="#6-7-Vue生命周期" class="headerlink" title="6.7. Vue生命周期"></a>6.7. Vue生命周期</h3><h4 id="6-7-1-生命周期简介"><a href="#6-7-1-生命周期简介" class="headerlink" title="6.7.1 生命周期简介"></a>6.7.1 生命周期简介</h4><p>每个 Vue 组件实例在创建时都需要经历一系列的初始化步骤，比如设置好数据侦听，编译模板，挂载实例到 DOM，以及在数据改变时更新 DOM。在此过程中，它也会运行被称为<code>生命周期钩子的函数</code>，让开发者有机会在特定阶段运行自己的代码!</p><ul><li>周期图解：</li></ul><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726091352-8988c1ac-51d7-48b7-b77c-8600d8c262b8.png" alt="img"></p><ul><li><p>常见钩子函数 </p></li><li><ul><li>onMounted()        注册一个回调函数，在组件挂载完成后执行。</li></ul></li><li><ul><li>onUpdated()        注册一个回调函数，在组件因为响应式状态变更而更新其 DOM 树之后调用。</li></ul></li><li><ul><li>onUnmounted()     注册一个回调函数，在组件实例被卸载之后调用。</li></ul></li><li><ul><li>onBeforeMount()    注册一个钩子，在组件被挂载之前被调用。</li></ul></li><li><ul><li>onBeforeUpdate()    注册一个钩子，在组件即将因为响应式状态变更而更新其 DOM 树之前调用。</li></ul></li><li><ul><li>onBeforeUnmount()  注册一个钩子，在组件实例被卸载之前调用。</li></ul></li></ul><h4 id="6-7-2-生命周期案例"><a href="#6-7-2-生命周期案例" class="headerlink" title="6.7.2 生命周期案例"></a>6.7.2 生命周期案例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,onUpdated,onMounted,onBeforeUpdate&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> message =<span class="title function_">ref</span>(<span class="string">&#x27;hello&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 挂载完毕生命周期</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------onMounted---------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> span1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;span1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(span1.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 更新前生命周期</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onBeforeUpdate</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------onBeforeUpdate---------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> span1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;span1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(span1.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 更新完成生命周期</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onUpdated</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------onUpdated---------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> span1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;span1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(span1.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;span1&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-8-Vue组件"><a href="#6-8-Vue组件" class="headerlink" title="6.8 Vue组件"></a>6.8 Vue组件</h3><h4 id="6-8-1-组件基础"><a href="#6-8-1-组件基础" class="headerlink" title="6.8.1 组件基础"></a>6.8.1 组件基础</h4><p>组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。组件就是实现应用中局部功能代码和资源的集合！在实际应用中，组件常常被组织成层层嵌套的树状结构：</p><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726112761-07148e23-13dd-4324-b850-7c8ec3ab8960.png" alt="img"></p><ul><li>这和我们嵌套 HTML 元素的方式类似，Vue 实现了自己的组件模型，使我们可以在每个组件内封装自定义内容与逻辑。</li></ul><p>传统方式编写应用：</p><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726121855-013d29a6-d93b-4c1a-9ed5-4d19571886c4.png" alt="img"></p><p>组件方式编写应用：</p><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726128469-7414b96b-d98d-49ea-9cf8-a0b23e08a315.png" alt="img"></p><ul><li><p>组件化：对js&#x2F;css&#x2F;html统一封装,这是VUE中的概念 </p></li><li><p>模块化：对js的统一封装,这是ES6中的概念 </p></li><li><p>组件化中,对js部分代码的处理使用ES6中的模块化</p></li></ul><h4 id="6-8-2-组件化入门案例"><a href="#6-8-2-组件化入门案例" class="headerlink" title="6.8.2 组件化入门案例"></a>6.8.2 组件化入门案例</h4><p>案例需求： 创建一个页面，包含头部和菜单以及内容显示区域，每个区域使用独立组建！</p><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726138161-8af812f2-5d5d-4cad-a3d5-b532adc9234a.png" alt="img"></p><p>1 准备vue项目</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm create vite</span><br><span class="line">cd vite项目</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>2 安装相关依赖</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install sass</span><br><span class="line">npm install bootstrap</span><br></pre></td></tr></table></figure><p>3 创建子组件 在src&#x2F;components文件下 vscode需要安装Vetur插件，这样vue文件有快捷提示</p><ul><li>Header.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        欢迎： xx <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Navigator.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 推荐写一个根标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>学员管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>图书管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>请假管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>考试管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>讲师管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Content.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        展示的主要内容！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>App.vue  入口组件App引入组件</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Header</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Header.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Navigator</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Navigator.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Content</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Content.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Navigator</span> <span class="attr">class</span>=<span class="string">&quot;navigator&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Navigator</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Content</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.navigator</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">15%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> blue solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">83%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> goldenrod solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4 启动测试</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h4 id="6-8-3-组件之间传递数据"><a href="#6-8-3-组件之间传递数据" class="headerlink" title="6.8.3 组件之间传递数据"></a>6.8.3 组件之间传递数据</h4><h5 id="6-8-3-1-父传子"><a href="#6-8-3-1-父传子" class="headerlink" title="6.8.3.1 父传子"></a>6.8.3.1 父传子</h5><p>Vue3 中父组件向子组件传值可以通过 props 进行，具体操作如下：</p><ol><li><p>首先，在父组件中定义需要传递给子组件的值，接着，在父组件的模板中引入子组件，同时在引入子组件的标签中添加 props 属性并为其设置需要传递的值。 </p></li><li><p>在 Vue3 中，父组件通过 props 传递给子组件的值是响应式的。也就是说，如果在父组件中的传递的值发生了改变，子组件中的值也会相应地更新。</p></li></ol><ul><li>父组件代码：App.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Son.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref,reactive,toRefs&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;parent data!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> title = <span class="title function_">ref</span>(<span class="number">42</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">changeMessage</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    message.<span class="property">value</span> = <span class="string">&#x27;修改数据！&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    title.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用子组件，并且传递数据！ --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--：message是属性名字 &quot;message&quot;是值  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Son</span> <span class="attr">:message</span>=<span class="string">&quot;message&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMessage&quot;</span>&gt;</span>点击更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子组件代码：Son.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,isRef,defineProps&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//声明父组件传递属性值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//父类型传的属性名字：穿的值的类型</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="title class_">String</span> ,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>:<span class="title class_">Number</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="6-8-3-2-子传父"><a href="#6-8-3-2-子传父" class="headerlink" title="6.8.3.2 子传父"></a>6.8.3.2 子传父</h5><ul><li>父组件： App.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Son.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> pdata = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">padd</span> = (<span class="params">data</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2222&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        pdata.<span class="property">value</span> =data;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//自定义接收，子组件传递数据方法！ 参数为数据！</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">psub</span> = (<span class="params">data</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11111&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        pdata.<span class="property">value</span> = data;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 声明@事件名应该等于子模块对应事件名！调用方法可以是当前自定义！--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Son</span> @<span class="attr">add</span>=<span class="string">&quot;padd&quot;</span> @<span class="attr">sub</span>=<span class="string">&quot;psub&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        &#123;&#123; pdata &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子组件：Son.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,defineEmits&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.定义要发送给父组件的方法，可以1或者多个</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> emites = <span class="title function_">defineEmits</span>([<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;sub&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> data = <span class="title function_">ref</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sendMsgToParent</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------son--------&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.出发父组件对应的方法，调用defineEmites对应的属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emites</span>(<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;add data!&#x27;</span>+data.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emites</span>(<span class="string">&#x27;sub&#x27;</span>,<span class="string">&#x27;sub data!&#x27;</span>+data.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        data.<span class="property">value</span> ++;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendMsgToParent&quot;</span>&gt;</span>发送消息给父组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="6-8-3-3-兄弟传参"><a href="#6-8-3-3-兄弟传参" class="headerlink" title="6.8.3.3 兄弟传参"></a>6.8.3.3 兄弟传参</h5><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726186839-bfb5ce3d-0ea3-4ada-a346-af2f9416e808.png" alt="img"></p><ul><li>Navigator.vue: 发送数据到App.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;defineEmits&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="string">&#x27;sendMenu&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//触发事件，向父容器发送数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">send</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emits</span>(<span class="string">&#x27;sendMenu&#x27;</span>,data);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 推荐写一个根标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;学员管理&#x27;)&quot;</span>&gt;</span>学员管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;图书管理&#x27;)&quot;</span>&gt;</span>图书管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;请假管理&#x27;)&quot;</span>&gt;</span>请假管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;考试管理&#x27;)&quot;</span>&gt;</span>考试管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;讲师管理&#x27;)&quot;</span>&gt;</span>讲师管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>App.vue: 发送数据到Content.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Header</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Header.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Navigator</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Navigator.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Content</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Content.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//定义接受navigator传递参数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> navigator_menu = <span class="title function_">ref</span>(<span class="string">&#x27;ceshi&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">receiver</span> = (<span class="params">data</span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    navigator_menu.<span class="property">value</span> = data;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      &#123;&#123; navigator_menu &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Navigator</span> @<span class="attr">sendMenu</span>=<span class="string">&quot;receiver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navigator&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Navigator</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 向子组件传递数据--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Content</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">:message</span>=<span class="string">&quot;navigator_menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.navigator</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">15%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> blue solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">83%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> goldenrod solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Content.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        展示的主要内容！</span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        &#123;&#123; message &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、Vue3路由机制router"><a href="#七、Vue3路由机制router" class="headerlink" title="七、Vue3路由机制router"></a>七、Vue3路由机制router</h2><h3 id="7-1-路由简介"><a href="#7-1-路由简介" class="headerlink" title="7.1 路由简介"></a>7.1 路由简介</h3><p>1 什么是路由？</p><ul><li><p>定义：路由就是根据不同的 URL 地址展示不同的内容或页面。</p></li><li><p>通俗理解：路由就像是一个地图，我们要去不同的地方，需要通过不同的路线进行导航。</p></li></ul><p>2 路由的作用</p><ul><li><p>单页应用程序（SPA）中，路由可以实现不同视图之间的无刷新切换，提升用户体验；</p></li><li><p>路由还可以实现页面的认证和权限控制，保护用户的隐私和安全；</p></li><li><p>路由还可以利用浏览器的前进与后退，帮助用户更好地回到之前访问过的页面。</p></li></ul><h3 id="7-2-路由入门案例"><a href="#7-2-路由入门案例" class="headerlink" title="7.2 路由入门案例"></a>7.2 路由入门案例</h3><p>1 案例需求分析</p><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726213765-461e6bf6-26e0-407e-9d42-1ad6a4c22ced.png" alt="img"></p><p>2 创建项目和导入路由依赖</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm create vite //创建项目cd 项目文件夹 //进入项目文件夹</span><br><span class="line">npm install //安装项目需求依赖</span><br><span class="line">npm install vue-router@4 --save //安装全局的vue-router 4版本</span><br></pre></td></tr></table></figure><p>3 准备页面和组件</p><ul><li>components&#x2F;Home.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>components&#x2F;List.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>List页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>components&#x2F;Add.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Add页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>components&#x2F;Update.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Update页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    App 开头的内容&lt;br&gt;</span><br><span class="line">    &lt;router-link to=&quot;/add&quot;&gt;add&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/home&quot;&gt;home&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/list&quot;&gt;list&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/update&quot;&gt;uodate&lt;/router-link&gt;</span><br><span class="line">    &lt;!-- 改标签会被替换成具体的.vue --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;App页面&lt;/h1&gt;</span><br><span class="line">      &lt;hr/&gt;</span><br><span class="line">        &lt;!-- 路由的连接 --&gt;</span><br><span class="line">        &lt;router-link to=&quot;/&quot;&gt;home页&lt;/router-link&gt; &lt;br&gt;</span><br><span class="line">        &lt;router-link to=&quot;/list&quot;&gt;list页&lt;/router-link&gt; &lt;br&gt;</span><br><span class="line">        &lt;router-link to=&quot;/add&quot;&gt;add页&lt;/router-link&gt; &lt;br&gt;</span><br><span class="line">        &lt;router-link to=&quot;/update&quot;&gt;update页&lt;/router-link&gt; &lt;br&gt;</span><br><span class="line">      &lt;hr/&gt;</span><br><span class="line">      &lt;!-- 路由连接对应视图的展示位置 --&gt;</span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">      默认展示位置:&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">      Home视图展示:&lt;router-view name=&quot;homeView&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">      List视图展示:&lt;router-view name=&quot;listView&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">      Add视图展示:&lt;router-view name=&quot;addView&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">      Update视图展示:&lt;router-view name=&quot;updateView&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>4 准备路由配置</p><ul><li>src&#x2F;routers&#x2F;router.js</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 导入 创建路由对象所需要的函数 */</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125;  <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*导入.vue组件  */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Update</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Update.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">&#x27;../components/add.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">//history属性用于记录路由的历史</span></span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="comment">//用于定义多个不同的路径和组件支架的对应关系</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/list&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">List</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/add&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:add</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/update&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Update</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 设置默认路径打开的页面</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//向外暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"><span class="comment">// 导入路由创建的相关方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入vue组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Add</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Add.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Update</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Update.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由对象,声明路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">//createWebHashHistory() 是 Vue.js 基于 hash 模式创建路由的工厂函数。在使用这种模式下，路由信息保存在 URL 的 hash 中，</span></span><br><span class="line">    <span class="comment">//使用 createWebHashHistory() 方法，可以创建一个路由历史记录对象，用于管理应用程序的路由。在 Vue.js 应用中，</span></span><br><span class="line">    <span class="comment">//通常使用该方法来创建路由的历史记录对象。</span></span><br><span class="line">    <span class="comment">//就是路由中缓存历史记录的对象，vue-router提供</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">                component指定组件在默认的路由视图位置展示</span></span><br><span class="line"><span class="comment">                component:Home</span></span><br><span class="line"><span class="comment">                components指定组件在name为某个值的路由视图位置展示</span></span><br><span class="line"><span class="comment">                components:&#123;</span></span><br><span class="line"><span class="comment">                    default:Home,// 默认路由视图位置</span></span><br><span class="line"><span class="comment">                    homeView:Home// name为homeView的路由视图位置</span></span><br><span class="line"><span class="comment">                &#125;   </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">default</span>:<span class="title class_">Home</span>,</span><br><span class="line">                <span class="attr">homeView</span>:<span class="title class_">Home</span></span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                listView : <span class="title class_">List</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/add&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">addView</span>:<span class="title class_">Add</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/update&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">updateView</span>:<span class="title class_">Update</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>5 main.js引入router配置</p><ul><li>修改文件：main.js (入口文件)</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//导入router模块</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./routers/router.js&#x27;</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">//绑定路由对象</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"><span class="comment">//挂在试图</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure><p>6 启动测试</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="7-3-路由重定向-redirect"><a href="#7-3-路由重定向-redirect" class="headerlink" title="7.3 路由重定向  redirect"></a>7.3 路由重定向  redirect</h3><p>重定向的作用：将一个路由重定向到另一个路由上</p><ul><li><p>修改案例：访问&#x2F;list和&#x2F;showAll都定向到List.vue</p></li><li><p>router.js</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入路由创建的相关方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入vue组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Add</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Add.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Update</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Update.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由对象,声明路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">default</span>:<span class="title class_">Home</span>,</span><br><span class="line">              <span class="comment">// 对应路由的展示</span></span><br><span class="line">                <span class="attr">homeView</span>:<span class="title class_">Home</span></span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                listView : <span class="title class_">List</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/showAll&#x27;</span>,</span><br><span class="line">            <span class="comment">// 重定向</span></span><br><span class="line">            redirect :<span class="string">&#x27;/list&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/add&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">addView</span>:<span class="title class_">Add</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/update&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">updateView</span>:<span class="title class_">Update</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 一个视图上可以有多个router -view </span></span><br><span class="line"><span class="comment">            每个router-view都可以设置专门展示那个组件--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由的连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>home页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>list页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/showAll&quot;</span>&gt;</span>showAll页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/add&quot;</span>&gt;</span>add页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/update&quot;</span>&gt;</span>update页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路由连接对应视图的展示位置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      默认展示位置:<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      Home视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;homeView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      List视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;listView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      Add视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;addView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      Update视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;updateView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-4-编程式路由-useRouter"><a href="#7-4-编程式路由-useRouter" class="headerlink" title="7.4 编程式路由(useRouter)"></a>7.4 编程式路由(useRouter)</h3><p>普通路由</p><ul><li><code>&lt;router-link to=&quot;/list&quot;&gt;list页&lt;/router-link&gt;</code>这种路由,to中的内容目前是固定的,点击后只能切换&#x2F;list对象组件(声明式路由)</li></ul><p>编程式路由</p><ul><li><p>通过useRouter,动态决定向那个组件切换的路由</p></li><li><p>在 Vue 3 和 Vue Router 4 中，你可以使用 <code>useRouter</code> 来实现动态路由(编程式路由)</p></li><li><p>这里的 <code>useRouter</code> 方法返回的是一个 router 对象，你可以用它来做如导航到新页面、返回上一页面等操作。</p></li></ul><p>案例需求: 通过普通按钮配合事件绑定实现路由页面跳转,不直接使用router-link标签</p><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//创建动态路由对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span>  routePath =<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span>  <span class="title function_">showList</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 编程式路由</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 直接push一个路径</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//router.push(&#x27;/list&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// push一个带有path属性的对象</span></span></span><br><span class="line"><span class="language-javascript">      router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 声明式路由的连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>home页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>list页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/showAll&quot;</span>&gt;</span>showAll页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/add&quot;</span>&gt;</span>add页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/update&quot;</span>&gt;</span>update页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 动态输入路径,点击按钮,触发单击事件的函数,在函数中通过编程是路由切换页面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showList()&quot;</span>&gt;</span>showList<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路由连接对应视图的展示位置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      默认展示位置:<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      Home视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;homeView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      List视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;listView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      Add视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;addView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      Update视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;updateView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-5-路由传参-useRoute"><a href="#7-5-路由传参-useRoute" class="headerlink" title="7.5 路由传参(useRoute)"></a>7.5 路由传参(useRoute)</h3><p>路径参数</p><ul><li><p>在路径中使用一个动态字段来实现，我们称之为 <strong>路径参数</strong> </p></li><li><ul><li>例如： 查看数据详情  <code>/showDetail/1</code>  ,<code>1</code>就是要查看详情的id,可以动态添值！</li></ul></li></ul><p>键值对参数</p><ul><li><p>类似与get请求通过url传参,数据是键值对形式的 </p></li><li><ul><li>例如:  查看数据详情<code>/showDetail?hid=1</code>,<code>hid=1</code>就是要传递的键值对参数</li></ul></li><li><ul><li>在 Vue 3 和 Vue Router 4 中，你可以使用  <code>useRoute</code> 这个函数从 Vue 的组合式 API 中获取路由对象。</li></ul></li><li><ul><li><code>useRoute</code> 方法返回的是当前的 route 对象，你可以用它来获取关于当前路由的信息，如当前的路径、查询参数等。</li></ul></li></ul><p>案例需求 : 切换到ShowDetail.vue组件时,向该组件通过路由传递参数</p><ul><li>修改App.vue文件</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//创建动态路由对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//动态路由路径传参方法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">showDetail</span>= (<span class="params">id,language</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 尝试使用拼接字符串方式传递路径参数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//router.push(`showDetail/$&#123;id&#125;/$&#123;languange&#125;`)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*路径参数,需要使用params  */</span></span></span><br><span class="line"><span class="language-javascript">      router.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;showDetail&quot;</span>,<span class="attr">params</span>:&#123;<span class="attr">id</span>:id,<span class="attr">language</span>:language&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">showDetail2</span>= (<span class="params">id,language</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*uri键值对参数,需要使用query */</span></span></span><br><span class="line"><span class="language-javascript">      router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&quot;/showDetail2&quot;</span>,<span class="attr">query</span>:&#123;<span class="attr">id</span>:id,<span class="attr">language</span>:language&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路径参数   --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/showDetail/1/JAVA&quot;</span>&gt;</span>声明式showDetail路径传参显示JAVA<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showDetail(1,&#x27;JAVA&#x27;)&quot;</span>&gt;</span>编程式showDetail路由路径传参显示JAVA<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 键值对参数 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">&quot;&#123;path:&#x27;/showDetail2&#x27;,query:&#123;id:1,language:&#x27;Java&#x27;&#125;&#125;&quot;</span>&gt;</span>showDetail2键值对传参显示JAVA<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showDetail2(1,&#x27;JAVA&#x27;)&quot;</span>&gt;</span>showDetail2动态路由键值对传参显示JAVA<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      showDetail视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;showDetailView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      showDetail2视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;showDetailView2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改router.js增加路径参数占位符</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入路由创建的相关方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入vue组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowDetail</span> <span class="keyword">from</span> <span class="string">&#x27;../components/ShowDetail.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowDetail2</span> <span class="keyword">from</span> <span class="string">&#x27;../components/ShowDetail2.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由对象,声明路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 此处:id  :language作为路径的占位符 */</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/showDetail/:id/:language&#x27;</span>,</span><br><span class="line">            <span class="comment">/* 动态路由传参时,根据该名字找到该路由 */</span></span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;showDetail&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">showDetailView</span>:<span class="title class_">ShowDetail</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/showDetail2&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">showDetailView2</span>:<span class="title class_">ShowDetail2</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><ul><li>ShowDetail.vue 通过useRoute获取路径参数</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//接收传递过来的路径参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span>&#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; onUpdated,ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取当前的route对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> route =<span class="title function_">useRoute</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> languageId = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> languageName = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  借助更新时生命周期,将数据更新进入响应式对象</span></span></span><br><span class="line"><span class="language-javascript">    onUpdated (<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取对象中的参数 名称和路径占位符一致</span></span></span><br><span class="line"><span class="language-javascript">        languageId.<span class="property">value</span>=route.<span class="property">params</span>.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript">        languageName.<span class="property">value</span>=route.<span class="property">params</span>.<span class="property">language</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(languageId.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(languageName.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ShowDetail页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编号&#123;&#123;route.params.id&#125;&#125;:&#123;&#123;route.params.language&#125;&#125;是世界上最好的语言<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编号&#123;&#123;languageId&#125;&#125;:&#123;&#123;languageName&#125;&#125;是世界上最好的语言<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>ShowDetail2.vue通过useRoute获取键值对参数</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span>&#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; onUpdated,ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取当前的route对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> route =<span class="title function_">useRoute</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> languageId = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> languageName = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  借助更新时生命周期,将数据更新进入响应式对象</span></span></span><br><span class="line"><span class="language-javascript">    onUpdated (<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取对象中的参数(通过query获取参数,此时参数是key-value形式的)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(languageId.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(languageName.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        languageId.<span class="property">value</span>=route.<span class="property">query</span>.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript">        languageName.<span class="property">value</span>=route.<span class="property">query</span>.<span class="property">language</span></span></span><br><span class="line"><span class="language-javascript">       </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ShowDetail2页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编号&#123;&#123;route.query.id&#125;&#125;:&#123;&#123;route.query.language&#125;&#125;是世界上最好的语言<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编号&#123;&#123;languageId&#125;&#125;:&#123;&#123;languageName&#125;&#125;是世界上最好的语言<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-6-路由守卫"><a href="#7-6-路由守卫" class="headerlink" title="7.6 路由守卫"></a>7.6 路由守卫</h3><p>在 Vue 3 中，路由守卫是用于在路由切换期间进行一些特定任务的回调函数。路由守卫可以用于许多任务，例如验证用户是否已登录、在路由切换前提供确认提示、请求数据等。Vue 3 为路由守卫提供了全面的支持，并提供了以下几种类型的路由守卫：</p><ol><li><p><strong>全局前置守卫</strong>：在路由切换前被调用，可以用于验证用户是否已登录、中断导航、请求数据等。</p></li><li><p><strong>全局后置守卫</strong>：在路由切换之后被调用，可以用于处理数据、操作 DOM 、记录日志等。</p></li><li><p><strong>守卫代码的位置</strong>: 在router.js中</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局前置路由守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>( <span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//to 下一个页面到哪去  .path属性可以获取地址</span></span><br><span class="line">    <span class="comment">//from 上一个页面 从哪来 .path属性可以获取地址</span></span><br><span class="line">    <span class="comment">//next是方法，不调用默认拦截！ next() 放行,直接到达目标组件</span></span><br><span class="line">    <span class="comment">//next(&#x27;/地址&#x27;)可以转发到其他地址,到达目标组件前会再次经过前置路由守卫</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(to.<span class="property">path</span>,<span class="keyword">from</span>.<span class="property">path</span>,next)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要判断，注意避免无限重定向</span></span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">path</span> == <span class="string">&#x27;/index&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置路由守卫</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Navigate from <span class="subst">$&#123;<span class="keyword">from</span>.path&#125;</span> to <span class="subst">$&#123;to.path&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>登录案例，登录以后才可以进入home,否则必须进入login</p><ul><li>定义Login.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> username =<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> password =<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> router = <span class="title function_">useRouter</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">login</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username.<span class="property">value</span>,password.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(username.<span class="property">value</span> == <span class="string">&#x27;root&#x27;</span> &amp; password.<span class="property">value</span> == <span class="string">&#x27;123456&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,<span class="attr">query</span>:&#123;<span class="string">&#x27;username&#x27;</span>:username.<span class="property">value</span>&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//登录成功利用前端存储机制，存储账号！</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>,username.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//sessionStorage.setItem(&#x27;username&#x27;,username)</span></span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;登录失败，账号或者密码错误！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        账号： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号！&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码！&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;login()&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>定义Home.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">import</span> &#123;useRoute,useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">let</span> route =<span class="title function_">useRoute</span>()</span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">let</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//  并不是每次进入home页时,都有用户名参数传入</span></span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//let username = route.query.username</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">let</span> username =<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">let</span> <span class="title function_">logout</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 清除localStorge中的username</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//window.sessionStorage.removeItem(&#x27;username&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;username&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态路由到登录页</span></span></span><br><span class="line"><span class="language-javascript">    router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>欢迎&#123;&#123;username&#125;&#125;登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;logout&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>定义routers.js</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入路由创建的相关方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入vue组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../components/login.vue&#x27;</span></span><br><span class="line"><span class="comment">// 创建路由对象,声明路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">redirect</span>:<span class="string">&quot;/home&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Login</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置路由的全局前置守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    to 要去那</span></span><br><span class="line"><span class="comment">    from 从哪里来</span></span><br><span class="line"><span class="comment">    next 放行路由时需要调用的方法,不调用则不放行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`从哪里来:<span class="subst">$&#123;<span class="keyword">from</span>.path&#125;</span>,到哪里去:<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">path</span> == <span class="string">&#x27;/login&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//放行路由  注意放行不要形成循环  </span></span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//let username =window.sessionStorage.getItem(&#x27;username&#x27;); </span></span><br><span class="line">        <span class="keyword">let</span> username =<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>); </span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != username)&#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 设置路由的全局后置守卫</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`从哪里来:<span class="subst">$&#123;<span class="keyword">from</span>.path&#125;</span>,到哪里去:<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><ul><li>启动测试</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="八、-案例开发-日程管理-第五期"><a href="#八、-案例开发-日程管理-第五期" class="headerlink" title="八、 案例开发-日程管理-第五期"></a>八、 案例开发-日程管理-第五期</h2><h3 id="8-1-重构前端工程"><a href="#8-1-重构前端工程" class="headerlink" title="8.1 重构前端工程"></a>8.1 重构前端工程</h3><p>业务目标展示</p><ul><li>登录页</li></ul><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726337312-68605cbb-cb5a-4a88-8e97-c86573614c7b.png" alt="img"></p><ul><li>注册页</li></ul><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726343581-65929e02-a0b5-4e1b-9dad-a0eca22e6067.png" alt="img"></p><ul><li>日程管理页</li></ul><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726349771-0aa9c5be-8a27-4319-ae72-73008b8b83fe.png" alt="img"></p><p>创建项目,安装依赖</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm create vite</span><br><span class="line">cd 项目目录</span><br><span class="line">npm  install</span><br><span class="line">npm  install vue-router</span><br></pre></td></tr></table></figure><ul><li>项目结构如下</li></ul><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726358566-f263b5d3-57c4-476f-99b1-e746252249fc.png" alt="img"></p><p>开发视图</p><ul><li>Header.vue视图</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>欢迎使用日程管理系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">&quot;optionDiv&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;b1s&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/regist&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;b1s&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>   <span class="attr">class</span>=<span class="string">&quot;optionDiv&quot;</span>&gt;</span></span><br><span class="line">        欢迎xxx   </span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;b1b&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/showSchedule&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;b1b&quot;</span>&gt;</span>查看我的日程<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.ht</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.b1s</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.b1b</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.optionDiv</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Login.vue视图</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">import</span>&#123; ref,reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 响应式数据,保存用户输入的表单信息</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> loginUser =<span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">userPwd</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">       &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 响应式数据,保存校验的提示信息</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> usernameMsg =<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> userPwdMsg = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 校验用户名的方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkUsername</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义正则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> usernameReg=<span class="regexp">/^[a-zA-Z0-9]&#123;5,10&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 校验用户名</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!usernameReg.<span class="title function_">test</span>(loginUser.<span class="property">username</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 格式不合法</span></span></span><br><span class="line"><span class="language-javascript">                usernameMsg.<span class="property">value</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            usernameMsg.<span class="property">value</span>=<span class="string">&quot;ok&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 校验密码的方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkUserPwd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义正则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> passwordReg=<span class="regexp">/^[0-9]&#123;6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">             <span class="comment">// 校验密码</span></span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">if</span>(!passwordReg.<span class="title function_">test</span>(loginUser.<span class="property">userPwd</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 格式不合法</span></span></span><br><span class="line"><span class="language-javascript">                userPwdMsg.<span class="property">value</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            userPwdMsg.<span class="property">value</span>=<span class="string">&quot;ok&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入账号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">v-model</span>=<span class="string">&quot;loginUser.username&quot;</span></span></span><br><span class="line"><span class="tag">                    @<span class="attr">blur</span>=<span class="string">&quot;checkUsername()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;usernameMsg&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;usernameMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">v-model</span>=<span class="string">&quot;loginUser.userPwd&quot;</span></span></span><br><span class="line"><span class="tag">                    @<span class="attr">blur</span>=<span class="string">&quot;checkUserPwd()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;userPwdMsg&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;userPwdMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;buttonContainer&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/regist&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>去注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ht</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ltr</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid  powderblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ipt</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#usernameMsg</span> , <span class="selector-id">#userPwdMsg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: gold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.buttonContainer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Regist.vue视图</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">import</span>&#123; ref,reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 响应式数据,保存用户输入的表单信息</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> registUser =<span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">userPwd</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">       &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 响应式数据,保存校验的提示信息</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> reUserPwd =<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> reUserPwdMsg =<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> usernameMsg =<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> userPwdMsg = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 校验用户名的方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkUsername</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义正则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> usernameReg=<span class="regexp">/^[a-zA-Z0-9]&#123;5,10&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 校验</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!usernameReg.<span class="title function_">test</span>(registUser.<span class="property">username</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 提示</span></span></span><br><span class="line"><span class="language-javascript">              usernameMsg.<span class="property">value</span> = <span class="string">&quot;不合法&quot;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过校验</span></span></span><br><span class="line"><span class="language-javascript">            usernameMsg.<span class="property">value</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 校验密码的方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkUserPwd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义正则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> passwordReg=<span class="regexp">/^[0-9]&#123;6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">             <span class="comment">// 校验</span></span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">if</span>(!passwordReg.<span class="title function_">test</span>(registUser.<span class="property">userPwd</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 提示</span></span></span><br><span class="line"><span class="language-javascript">              userPwdMsg.<span class="property">value</span> = <span class="string">&quot;不合法&quot;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过校验</span></span></span><br><span class="line"><span class="language-javascript">            userPwdMsg.<span class="property">value</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 校验密码的方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkReUserPwd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义正则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> passwordReg=<span class="regexp">/^[0-9]&#123;6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 校验</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!passwordReg.<span class="title function_">test</span>(reUserPwd.<span class="property">value</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 提示</span></span></span><br><span class="line"><span class="language-javascript">              reUserPwdMsg.<span class="property">value</span> = <span class="string">&quot;不合法&quot;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(registUser.<span class="property">userPwd</span>,reUserPwd.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 校验</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!(registUser.<span class="property">userPwd</span>==reUserPwd.<span class="property">value</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 提示</span></span></span><br><span class="line"><span class="language-javascript">              reUserPwdMsg.<span class="property">value</span> = <span class="string">&quot;不一致&quot;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过校验</span></span></span><br><span class="line"><span class="language-javascript">            reUserPwdMsg.<span class="property">value</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>请注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入账号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">id</span>=<span class="string">&quot;usernameInput&quot;</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">v-model</span>=<span class="string">&quot;registUser.username&quot;</span></span></span><br><span class="line"><span class="tag">                  @<span class="attr">blur</span>=<span class="string">&quot;checkUsername()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;usernameMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;usernameMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">&quot;userPwdInput&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">v-model</span>=<span class="string">&quot;registUser.userPwd&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">blur</span>=<span class="string">&quot;checkUserPwd()&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;userPwdMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;userPwdMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">&quot;reUserPwdInput&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">v-model</span>=<span class="string">&quot;reUserPwd&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">blur</span>=<span class="string">&quot;checkReUserPwd()&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;reUserPwdMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;reUserPwdMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;buttonContainer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>去登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">       <span class="selector-class">.ht</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ltr</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid  powderblue;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ipt</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.msg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: gold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.buttonContainer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>ShowSchedule.vue视图</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>您的日程如下<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>进度<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;buttonContainer&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>保存修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr buttonContainer&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>新增日程<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.ht</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ltr</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid  powderblue;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ipt</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#usernameMsg</span> , <span class="selector-id">#userPwdMsg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: gold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.buttonContainer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>App.vue视图</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Header.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Header</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于路由切换视图使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置路由</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Login.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Regist</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Regist.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowScedule</span> <span class="keyword">from</span> <span class="string">&#x27;../components/ShowSchedule.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>  router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Login</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Login</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/showSchedule&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">ShowScedule</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/regist&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Regist</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><ul><li>配置main.js</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路由</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/router.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app =<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局使用路由</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="九、Vue3数据交互axios"><a href="#九、Vue3数据交互axios" class="headerlink" title="九、Vue3数据交互axios"></a>九、Vue3数据交互axios</h2><h3 id="9-0-预讲知识-promise"><a href="#9-0-预讲知识-promise" class="headerlink" title="9.0 预讲知识-promise"></a>9.0 预讲知识-promise</h3><h4 id="9-0-1-普通函数和回调函数"><a href="#9-0-1-普通函数和回调函数" class="headerlink" title="9.0.1 普通函数和回调函数"></a>9.0.1 普通函数和回调函数</h4><p>普通函数: 正常调用的函数,一般函数执行完毕后才会继续执行下一行代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun1</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun1 invoked&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun1</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数执行完毕,继续执行后续代码</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;other code processon&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>回调函数: 一些特殊的函数,表示未来才会执行的一些功能,后续代码不会等待该函数执行完毕就开始执行了</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置一个2000毫秒后会执行一次的定时任务</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout invoked&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,<span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;other code processon&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-0-2-Promise-简介"><a href="#9-0-2-Promise-简介" class="headerlink" title="9.0.2 Promise 简介"></a>9.0.2 Promise 简介</h4><p>前端中的异步编程技术，类似Java中的多线程+线程结果回调！</p><ul><li><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了<code>Promise</code>对象。 </p></li><li><p>所谓<code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p></li></ul><p><code>Promise</code>对象有以下两个特点。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）Promise对象代表一个异步操作，有三种状态：`Pending`（进行中）、`Resolved`（已完成，又称 Fulfilled）和`Rejected`（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是`Promise`这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</span><br><span class="line"></span><br><span class="line">（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从`Pending`变为`Resolved`和从`Pending`变为`Rejected`。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。</span><br></pre></td></tr></table></figure><h4 id="9-0-3-Promise-基本用法"><a href="#9-0-3-Promise-基本用法" class="headerlink" title="9.0.3 Promise 基本用法"></a>9.0.3 Promise 基本用法</h4><p>ES6规定，Promise对象是一个构造函数，用来生成Promise实例。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">/*  </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    1.实例化promise对象,并且执行(类似Java创建线程对象,并且start)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    参数: resolve,reject随意命名,但是一般这么叫!</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    参数: resolve,reject分别处理成功和失败的两个函数! 成功resolve(结果)  失败reject(结果)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    参数: 在function中调用这里两个方法,那么promise会处于两个不同的状态</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    状态: promise有三个状态</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            pending   正在运行</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            resolved  内部调用了resolve方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            rejected  内部调用了reject方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    参数: 在第二步回调函数中就可以获取对应的结果 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> promise =<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise do some code ... ...&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//resolve(&quot;promise success&quot;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reject</span>(<span class="string">&quot;promise fail&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other code1111 invoked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.获取回调函数结果  then在这里会等待promise中的运行结果,但是不会阻塞代码继续运行</span></span></span><br><span class="line"><span class="language-javascript">    promise.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//装换为resolved状态 会执行的函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params">value</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`promise中执行了resolve:<span class="subst">$&#123;value&#125;</span>`</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//转换为reject方法执行的函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span>(<span class="params">error</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`promise中执行了reject:<span class="subst">$&#123;error&#125;</span>`</span>)&#125;</span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3 其他代码执行   </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other code2222 invoked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-0-4-Promise-catch"><a href="#9-0-4-Promise-catch" class="headerlink" title="9.0.4 Promise catch()"></a>9.0.4 Promise catch()</h4><p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> promise =<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise do some code ... ...&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 故意响应一个异常对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error message&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other code1111 invoked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        then中的reject()的对应方法可以在产生异常时执行,接收到的就是异常中的提示信息</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        then中可以只留一个resolve()的对应方法,reject()方法可以用后续的catch替换</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        then中的reject对应的回调函数被后续的catch替换后,catch中接收的数据是一个异常对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">    promise.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params">resolveValue</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`promise中执行了resolve:<span class="subst">$&#123;resolveValue&#125;</span>`</span>)&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//function(rejectValue)&#123;console.log(`promise中执行了reject:$&#123;rejectValue&#125;`)&#125;</span></span></span><br><span class="line"><span class="language-javascript">    ).<span class="title function_">catch</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params">error</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(error)&#125; </span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other code2222 invoked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-0-5-async和await的使用"><a href="#9-0-5-async和await的使用" class="headerlink" title="9.0.5 async和await的使用"></a>9.0.5 async和await的使用</h4><p> async和await是ES6中用于处理异步操作的新特性。通常，异步操作会涉及到Promise对象，而async&#x2F;await则是在Promise基础上提供了更加直观和易于使用的语法。</p><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1708929854466-284ebe86-fa0a-4a3e-b471-9ed457065b52.png" alt="img"></p><p>async 用于标识函数的</p><ol><li><p>async标识函数后,async函数的返回值会变成一个promise对象 </p></li><li><p>如果函数内部返回的数据是一个非promise对象,async函数的结果会返回一个成功状态 promise对象 </p></li><li><p>如果函数内部返回的是一个promise对象,则async函数返回的状态与结果由该对象决定 </p></li><li><p>如果函数内部抛出的是一个异常,则async函数返回的是一个失败的promise对象</p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        async 用于标识函数的</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1. async标识函数后,async函数的返回值会变成一个promise对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2. 如果函数内部返回的数据是一个非promise对象,async函数的结果会返回一个成功状态 promise对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            3. 如果函数内部返回的是一个promise对象,则async函数返回的状态与结果由该对象决定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            4. 如果函数内部抛出的是一个异常,则async函数返回的是一个失败的promise对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//return 10</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//throw new Error(&quot;something wrong&quot;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//Promise.reject 生成一个失败状态</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;heihei&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> promise</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> promise =<span class="title function_">fun1</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        promise.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success:&quot;</span>+value)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ).<span class="title function_">catch</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fail:&quot;</span>+value)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>await</p><ol><li><p>await右侧的表达式一般为一个promise对象,但是也可以是一个其他值</p></li><li><p>如果表达式是promise对象,await返回的是promise成功的值</p></li><li><p>await会等右边的promise对象执行结束,然后再获取结果,后续代码也会等待await的执行</p></li><li><p>如果表达式是其他值,则直接返回该值</p></li><li><p>await必须在async函数中,但是async函数中可以没有await</p></li><li><p>如果await右边的promise失败了,就会抛出异常,需要通过 try … catch捕获处理</p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1. await右侧的表达式一般为一个promise对象,但是也可以是一个其他值</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2. 如果表达式是promise对象,await返回的是promise成功的值</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            3. await会等右边的promise对象执行结束,然后再获取结果,后续代码也会等待await的执行</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            4. 如果表达式是其他值,则直接返回该值</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            5. await必须在async函数中,但是async函数中可以没有await</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            6. 如果await右边的promise失败了,就会抛出异常,可以通过 try ... catch捕获处理</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fun1</span>()</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//let res = await Promise.reject(&quot;something wrong&quot;)</span></span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">catch</span>(e)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;catch got:&quot;</span>+e)   </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;await got:&quot;</span>+res)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fun2</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-1-Axios介绍"><a href="#9-1-Axios介绍" class="headerlink" title="9.1 Axios介绍"></a>9.1 Axios介绍</h3><p>ajax</p><ul><li><p>AJAX &#x3D; Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。 </p></li><li><p>AJAX 不是新的编程语言，而是一种使用现有标准的新方法。 </p></li><li><p>AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。 </p></li><li><p>AJAX 不需要任何浏览器插件，但需要用户允许 JavaScript 在浏览器上执行。 </p></li><li><p>XMLHttpRequest 只是实现 Ajax 的一种方式。</p></li></ul><p><strong>ajax工作原理：</strong></p><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726456860-538de387-ab46-4860-81e0-d08d3da21267.png" alt="img"></p><p>原生<strong>javascript方式进行ajax(了解):</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">loadXMLDoc</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span></span><br><span class="line"><span class="language-javascript">      xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// IE6, IE5 浏览器执行代码</span></span></span><br><span class="line"><span class="language-javascript">      xmlhttp=<span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置回调函数处理响应结果</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置请求方式和请求的资源路径</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/ajax_info.txt&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>什么是axios  官网介绍:<a href="https://axios-http.com/zh/docs/intro">https://axios-http.com/zh/docs/intro</a></p><ul><li><p>Axios 是一个基于 <a href="https://javascript.info/promise-basics"><em>promise</em></a> 网络请求库，作用于<a href="https://nodejs.org/">node.js</a> 和浏览器中。 它是 <a href="https://www.lullabot.com/articles/what-is-an-isomorphic-application"><em>isomorphic</em></a> 的(即同一套代码可以运行在浏览器和node.js中)。在服务端它使用原生 node.js <code>http</code> 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。它有如下特性 </p></li><li><ul><li>从浏览器创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequests</a></li></ul></li><li><ul><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html">http</a> 请求</li></ul></li><li><ul><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> API</li></ul></li><li><ul><li>拦截请求和响应</li></ul></li><li><ul><li>转换请求和响应数据</li></ul></li><li><ul><li>取消请求</li></ul></li><li><ul><li>自动转换JSON数据</li></ul></li><li><ul><li>客户端支持防御<a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">XSRF</a></li></ul></li></ul><h3 id="9-2-Axios-入门案例"><a href="#9-2-Axios-入门案例" class="headerlink" title="9.2 Axios 入门案例"></a>9.2 Axios 入门案例</h3><p>1 案例需求:请求后台获取随机土味情话</p><ul><li>请求的url</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://api.uomg.com/api/rand.qinghua?format=json    或者使用  http://forum.atguigu.cn/api/rand.qinghua?format=json</span><br></pre></td></tr></table></figure><ul><li>请求的方式</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET/POST</span><br></pre></td></tr></table></figure><ul><li>数据返回的格式</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;我努力不是为了你而是因为你。&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>2 准备项目</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm create vite</span><br><span class="line">npm install </span><br><span class="line"><span class="comment">/*npm install vue-router@4 --save</span></span><br><span class="line"><span class="comment">npm install pinia */</span></span><br></pre></td></tr></table></figure><p>3 安装axios</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>4 设计页面（App.Vue）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">let message = reactive(&#123;</span><br><span class="line">  &#x27;code&#x27;:1,</span><br><span class="line">  &#x27;content&#x27;:&#x27; &#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"> let getLoveMessage=()=&gt;&#123;</span><br><span class="line">  //使用axios 发送请求获取土味情话</span><br><span class="line">  //axios(&#123;设置请求参数&#125;) 请求三要素 1 请求url 2 请求的方式 3 请求的参数</span><br><span class="line">let promise =   axios(&#123;</span><br><span class="line">    method:&#x27;get&#x27;,</span><br><span class="line">    url:&#x27;https://api.uomg.com/api/rand.qinghua?format=json &#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">       </span><br><span class="line">        //如果请求方式post 则data中的数据 以JSON形式放入请求体</span><br><span class="line">    &#125;,</span><br><span class="line">    params:&#123;</span><br><span class="line">       //都是以键值对的方式放入URL后</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  promise.then(</span><br><span class="line">    function(resposn)&#123;</span><br><span class="line">      console.log(resposn)</span><br><span class="line">      /* </span><br><span class="line">        response响应结果对象</span><br><span class="line">        data 服务端响应回来的数据</span><br><span class="line">        status 响应状态码 200</span><br><span class="line">        statusText 响应状态描述 ok</span><br><span class="line">        headers 本次响应的所有响应头</span><br><span class="line">        config 本次请求的配置信息</span><br><span class="line">        request 本次请求发送使用的XMLHttpRequses对象</span><br><span class="line">      </span><br><span class="line">      */</span><br><span class="line">     //将后面的参数里同名属性值赋值给前面的参数的同名属性</span><br><span class="line">     Object.assign(message,resposn.data)</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">  ).catch(</span><br><span class="line">    function()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h1 v-text=&quot;message.content&quot;&gt;&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;getLoveMessage()&quot;&gt; 变&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script setup type=&quot;module&quot;&gt;</span><br><span class="line">  import axios from &#x27;axios&#x27;</span><br><span class="line">  import &#123; onMounted,reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line">    </span><br><span class="line">  let jsonData =reactive(&#123;code:1,content:&#x27;我努力不是为了你而是因为你&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">  let getLoveMessage =()=&gt;&#123;</span><br><span class="line">    axios(&#123;</span><br><span class="line">      method:&quot;post&quot;, // 请求方式</span><br><span class="line">      url:&quot;https://api.uomg.com/api/rand.qinghua?format=json&quot;,  // 请求的url</span><br><span class="line">      data:&#123; // 当请求方式为post时,data下的数据以JSON串放入请求体,否则以key=value形式放url后</span><br><span class="line">        username:&quot;123456&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then( function (response)&#123;//响应成功时要执行的函数</span><br><span class="line">      console.log(response)</span><br><span class="line">      Object.assign(jsonData,response.data)</span><br><span class="line">    &#125;).catch(function (error)&#123;// 响应失败时要执行的函数</span><br><span class="line">      console.log(error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 通过onMounted生命周期,自动加载一次 */</span><br><span class="line">  onMounted(()=&gt;&#123;</span><br><span class="line">    getLoveMessage()</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;今日土味情话:&#123;&#123;jsonData.content&#125;&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button  @click=&quot;getLoveMessage&quot;&gt;获取今日土味情话&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>5 启动测试</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>异步响应的数据结构</p><ul><li>响应的数据是经过包装返回的！一个请求的响应包含以下信息。</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  status<span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  statusText<span class="punctuation">:</span> &#x27;OK&#x27;<span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `headers` 是服务器响应头</span></span><br><span class="line">  <span class="comment">// 所有的 header 名称都是小写，而且可以使用方括号语法访问</span></span><br><span class="line">  <span class="comment">// 例如: `response.headers[&#x27;content-type&#x27;]`</span></span><br><span class="line">  headers<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `config` 是 `axios` 请求的配置信息</span></span><br><span class="line">  config<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `request` 是生成此响应的请求</span></span><br><span class="line">  <span class="comment">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span></span><br><span class="line">  <span class="comment">// 在浏览器中则是 XMLHttpRequest 实例</span></span><br><span class="line">  request<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>then取值</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">status</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">statusText</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">headers</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">config</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>6 通过async和await处理异步请求</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveWords</span> = <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>:<span class="string">&quot;https://api.uomg.com/api/rand.qinghua?format=json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> &#123;data&#125;  = <span class="keyword">await</span> <span class="title function_">getLoveWords</span>()</span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Object</span>.<span class="title function_">assign</span>(message,data)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>axios在发送异步请求时的可选配置：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">  url<span class="punctuation">:</span> &#x27;/user&#x27;<span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">  method<span class="punctuation">:</span> &#x27;get&#x27;<span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  baseURL<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//some-domain.com/api/&#x27;,</span></span><br><span class="line">  <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">  <span class="comment">// 它只能用于 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span></span><br><span class="line">  <span class="comment">// 数组中最后一个函数必须返回一个字符串， 一个Buffer实例，ArrayBuffer，FormData，或 Stream</span></span><br><span class="line">  <span class="comment">// 你可以修改请求头。</span></span><br><span class="line">  transformRequest<span class="punctuation">:</span> <span class="punctuation">[</span>function (data<span class="punctuation">,</span> headers) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 对发送的 data 进行任意转换处理</span></span><br><span class="line">    return data;</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  transformResponse<span class="punctuation">:</span> <span class="punctuation">[</span>function (data) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 对接收的 data 进行任意转换处理</span></span><br><span class="line">    return data;</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 自定义请求头</span></span><br><span class="line">  headers<span class="punctuation">:</span> <span class="punctuation">&#123;</span>&#x27;X-Requested-With&#x27;<span class="punctuation">:</span> &#x27;XMLHttpRequest&#x27;<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `params` 是与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个简单对象或 URLSearchParams 对象</span></span><br><span class="line">  params<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ID<span class="punctuation">:</span> <span class="number">12345</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `paramsSerializer`是可选方法，主要用于序列化`params`</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  paramsSerializer<span class="punctuation">:</span> function (params) <span class="punctuation">&#123;</span></span><br><span class="line">    return Qs.stringify(params<span class="punctuation">,</span> <span class="punctuation">&#123;</span>arrayFormat<span class="punctuation">:</span> &#x27;brackets&#x27;<span class="punctuation">&#125;</span>)</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `data` 是作为请求体被发送的数据</span></span><br><span class="line">  <span class="comment">// 仅适用 &#x27;PUT&#x27;, &#x27;POST&#x27;, &#x27;DELETE 和 &#x27;PATCH&#x27; 请求方法</span></span><br><span class="line">  <span class="comment">// 在没有设置 `transformRequest` 时，则必须是以下类型之一:</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属: FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属: Stream, Buffer</span></span><br><span class="line">  data<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    firstName<span class="punctuation">:</span> &#x27;Fred&#x27;</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 发送请求体数据的可选语法</span></span><br><span class="line">  <span class="comment">// 请求方式 post</span></span><br><span class="line">  <span class="comment">// 只有 value 会被发送，key 则不会</span></span><br><span class="line">  data<span class="punctuation">:</span> &#x27;Country=Brasil&amp;City=Belo Horizonte&#x27;<span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `timeout` 指定请求超时的毫秒数。</span></span><br><span class="line">  <span class="comment">// 如果请求时间超过 `timeout` 的值，则请求会被中断</span></span><br><span class="line">  timeout<span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span> <span class="comment">// 默认值是 `0` (永不超时)</span></span><br><span class="line">  <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  withCredentials<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// default</span></span><br><span class="line">  <span class="comment">// `adapter` 允许自定义处理请求，这使测试更加容易。</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并提供一个有效的响应 （参见 lib/adapters/README.md）。</span></span><br><span class="line">  adapter<span class="punctuation">:</span> function (config) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `auth` HTTP Basic Auth</span></span><br><span class="line">  auth<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    username<span class="punctuation">:</span> &#x27;janedoe&#x27;<span class="punctuation">,</span></span><br><span class="line">    password<span class="punctuation">:</span> &#x27;s00pers3cret&#x27;</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `responseType` 表示浏览器将要响应的数据类型</span></span><br><span class="line">  <span class="comment">// 选项包括: &#x27;arraybuffer&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span></span><br><span class="line">  <span class="comment">// 浏览器专属：&#x27;blob&#x27;</span></span><br><span class="line">  responseType<span class="punctuation">:</span> &#x27;json&#x27;<span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line">  <span class="comment">// `responseEncoding` 表示用于解码响应的编码 (Node.js 专属)</span></span><br><span class="line">  <span class="comment">// 注意：忽略 `responseType` 的值为 &#x27;stream&#x27;，或者是客户端请求</span></span><br><span class="line">  <span class="comment">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span></span><br><span class="line">  responseEncoding<span class="punctuation">:</span> &#x27;utf8&#x27;<span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line">  <span class="comment">// `xsrfCookieName` 是 xsrf token 的值，被用作 cookie 的名称</span></span><br><span class="line">  xsrfCookieName<span class="punctuation">:</span> &#x27;XSRF-TOKEN&#x27;<span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` 是带有 xsrf token 值的http 请求头名称</span></span><br><span class="line">  xsrfHeaderName<span class="punctuation">:</span> &#x27;X-XSRF-TOKEN&#x27;<span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line">  <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">  <span class="comment">// 浏览器专属</span></span><br><span class="line">  onUploadProgress<span class="punctuation">:</span> function (progressEvent) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 处理原生进度事件</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">  <span class="comment">// 浏览器专属</span></span><br><span class="line">  onDownloadProgress<span class="punctuation">:</span> function (progressEvent) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 处理原生进度事件</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `maxContentLength` 定义了node.js中允许的HTTP响应内容的最大字节数</span></span><br><span class="line">  maxContentLength<span class="punctuation">:</span> <span class="number">2000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数</span></span><br><span class="line">  maxBodyLength<span class="punctuation">:</span> <span class="number">2000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `validateStatus` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。</span></span><br><span class="line">  <span class="comment">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span></span><br><span class="line">  <span class="comment">// 则promise 将会 resolved，否则是 rejected。</span></span><br><span class="line">  validateStatus<span class="punctuation">:</span> function (status) <span class="punctuation">&#123;</span></span><br><span class="line">    return status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// 默认值</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `maxRedirects` 定义了在node.js中要遵循的最大重定向数。</span></span><br><span class="line">  <span class="comment">// 如果设置为0，则不会进行重定向</span></span><br><span class="line">  maxRedirects<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line">  <span class="comment">// `socketPath` 定义了在node.js中使用的UNIX套接字。</span></span><br><span class="line">  <span class="comment">// e.g. &#x27;/var/run/docker.sock&#x27; 发送请求到 docker 守护进程。</span></span><br><span class="line">  <span class="comment">// 只能指定 `socketPath` 或 `proxy` 。</span></span><br><span class="line">  <span class="comment">// 若都指定，这使用 `socketPath` 。</span></span><br><span class="line">  socketPath<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// default</span></span><br><span class="line">  <span class="comment">// `httpAgent` and `httpsAgent` define a custom agent to be used when performing http</span></span><br><span class="line">  <span class="comment">// and https requests, respectively, in node.js. This allows options to be added like</span></span><br><span class="line">  <span class="comment">// `keepAlive` that are not enabled by default.</span></span><br><span class="line">  httpAgent<span class="punctuation">:</span> new http.Agent(<span class="punctuation">&#123;</span> keepAlive<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span>)<span class="punctuation">,</span></span><br><span class="line">  httpsAgent<span class="punctuation">:</span> new https.Agent(<span class="punctuation">&#123;</span> keepAlive<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span>)<span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `proxy` 定义了代理服务器的主机名，端口和协议。</span></span><br><span class="line">  <span class="comment">// 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。</span></span><br><span class="line">  <span class="comment">// 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。</span></span><br><span class="line">  <span class="comment">// `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。</span></span><br><span class="line">  <span class="comment">// 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`</span></span><br><span class="line">  proxy<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    protocol<span class="punctuation">:</span> &#x27;https&#x27;<span class="punctuation">,</span></span><br><span class="line">    host<span class="punctuation">:</span> &#x27;<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">    port<span class="punctuation">:</span> <span class="number">9000</span><span class="punctuation">,</span></span><br><span class="line">    auth<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      username<span class="punctuation">:</span> &#x27;mikeymike&#x27;<span class="punctuation">,</span></span><br><span class="line">      password<span class="punctuation">:</span> &#x27;rapunz3l&#x27;</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// see https://axios-http.com/zh/docs/cancellation</span></span><br><span class="line">  cancelToken<span class="punctuation">:</span> new CancelToken(function (cancel) <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">&#125;</span>)<span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `decompress` indicates whether or not the response body should be decompressed </span></span><br><span class="line">  <span class="comment">// automatically. If set to `true` will also remove the &#x27;content-encoding&#x27; header </span></span><br><span class="line">  <span class="comment">// from the responses objects of all decompressed responses</span></span><br><span class="line">  <span class="comment">// - Node only (XHR cannot turn off decompression)</span></span><br><span class="line">  decompress<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 默认值</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="9-3-Axios-get和post方法"><a href="#9-3-Axios-get和post方法" class="headerlink" title="9.3 Axios get和post方法"></a>9.3 Axios get和post方法</h3><p>配置添加语法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(url[, config])</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(url,&#123;</span><br><span class="line">   上面指定配置<span class="attr">key</span>:配置值,</span><br><span class="line">   上面指定配置<span class="attr">key</span>:配置值</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(url[, data[, config]])</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(url,&#123;<span class="attr">key</span>:value <span class="comment">//此位置数据，没有空对象即可&#123;&#125;&#125;,&#123;</span></span><br><span class="line">   上面指定配置<span class="attr">key</span>:配置值,</span><br><span class="line">   上面指定配置<span class="attr">key</span>:配置值</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>测试get参数</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,ref,reactive,toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveWords</span>= <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// axios.get(url)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// axios.get(url，&#123;请求的其他信息&#125;)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// axios.get(url，&#123;parmas:&#123;键值对参数&#125;，header：&#123;设置一些特殊的请求头&#125;&#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">await</span> axios.<span class="title function_">get</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;https://api.uomg.com/api/rand.qinghua&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">params</span>:&#123;<span class="comment">// 向url后添加的键值对参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">format</span>:<span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">headers</span>:&#123;<span class="comment">// 设置请求头</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;Accept&#x27;</span> : <span class="string">&#x27;application/json, text/plain, text/html,*/*&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">catch</span> (e)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">await</span> e</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">let</span> &#123;data&#125;  = <span class="keyword">await</span> <span class="title function_">getLoveWords</span>()</span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Object</span>.<span class="title function_">assign</span>(message,data)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试post参数</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,ref,reactive,toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveWords</span>= <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">await</span> axios.<span class="title function_">post</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;https://api.uomg.com/api/rand.qinghua&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="comment">//请求体中的JSON数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="comment">// 其他参数</span></span></span><br><span class="line"><span class="language-javascript">         <span class="attr">params</span>:&#123;<span class="comment">// url上拼接的键值对参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">format</span>:<span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">headers</span>:&#123;<span class="comment">// 请求头</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;Accept&#x27;</span> : <span class="string">&#x27;application/json, text/plain, text/html,*/*&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">catch</span> (e)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">await</span> e</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">let</span> &#123;data&#125;  = <span class="keyword">await</span> <span class="title function_">getLoveWords</span>()</span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Object</span>.<span class="title function_">assign</span>(message,data)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-4-Axios-拦截器"><a href="#9-4-Axios-拦截器" class="headerlink" title="9.4 Axios 拦截器"></a>9.4 Axios 拦截器</h3><p>如果想在axios发送请求之前,或者是数据响应回来在执行then方法之前做一些额外的工作,可以通过拦截器完成</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器 请求发送之前</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器 数据响应回来</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>定义src&#x2F;axios.js提取拦截器和配置语法</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  创建instance实例</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&#x27;https://api.uomg.com&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>:<span class="number">10000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  添加请求拦截</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="comment">// 设置请求头配置信息</span></span><br><span class="line">    <span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//处理指定的请求头</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;before request&quot;</span>)</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">Accept</span> = <span class="string">&#x27;application/json, text/plain, text/html,*/*&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置请求错误处理函数</span></span><br><span class="line">    <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;request error&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="comment">// 设置响应正确时的处理函数</span></span><br><span class="line">    <span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;after success response&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置响应异常时的处理函数</span></span><br><span class="line">    <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;after fail response&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 默认导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 导入我们自己定义的axios.js文件,而不是导入axios依赖  </span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./axios.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,ref,reactive,toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveWords</span>= <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">await</span> axios.<span class="title function_">post</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;api/rand.qinghua&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,<span class="comment">//请求体中的JSON数据</span></span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">params</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">format</span>:<span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="comment">// 其他键值对参数</span></span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">catch</span> (e)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">await</span> e</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这里返回的是一个fullfilled状态的promise</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveWords</span>().<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="function">(<span class="params">response</span>) =&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;after getloveWords&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span></span><br><span class="line"><span class="language-javascript">          <span class="title class_">Object</span>.<span class="title function_">assign</span>(jsonData,response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十、案例开发-日程管理-第六期"><a href="#十、案例开发-日程管理-第六期" class="headerlink" title="十、案例开发-日程管理-第六期"></a>十、案例开发-日程管理-第六期</h2><h3 id="10-1-前端代码处理"><a href="#10-1-前端代码处理" class="headerlink" title="10.1 前端代码处理"></a>10.1 前端代码处理</h3><h4 id="10-1-1-创建src-utils-request-js文件"><a href="#10-1-1-创建src-utils-request-js文件" class="headerlink" title="10.1.1 创建src&#x2F;utils&#x2F;request.js文件"></a>10.1.1 创建src&#x2F;utils&#x2F;request.js文件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  创建instance实例</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&#x27;http://localhost:8080/&#x27;</span></span><br><span class="line">   </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  添加请求拦截</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="comment">// 设置请求头配置信息</span></span><br><span class="line">    <span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//处理指定的请求头</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置请求错误处理函数</span></span><br><span class="line">    <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="comment">// 设置响应正确时的处理函数</span></span><br><span class="line">    <span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置响应异常时的处理函数</span></span><br><span class="line">    <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 默认导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br></pre></td></tr></table></figure><h4 id="10-1-2-注册页面完成注册"><a href="#10-1-2-注册页面完成注册" class="headerlink" title="10.1.2 注册页面完成注册"></a>10.1.2 注册页面完成注册</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 导入发送请求的axios对象 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> request <span class="keyword">from</span><span class="string">&#x27;../utils/request&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> registUser = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">userPwd</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> usernameMsg=<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> userPwdMsg=<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> reUserPwdMsg=<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> reUserPwd=<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">checkUsername</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> usernameReg= <span class="regexp">/^[a-zA-Z0-9]&#123;5,10&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(!usernameReg.<span class="title function_">test</span>(registUser.<span class="property">username</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">            usernameMsg.<span class="property">value</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 发送异步请求   继续校验用户名是否被占用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> request.<span class="title function_">post</span>(<span class="string">`user/checkUsernameUsed?username=<span class="subst">$&#123;registUser.username&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(data.<span class="property">code</span> != <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            usernameMsg.<span class="property">value</span>=<span class="string">&quot;用户名占用&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        usernameMsg.<span class="property">value</span>=<span class="string">&quot;可用&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">checkUserPwd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> userPwdReg = <span class="regexp">/^[0-9]&#123;6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(!userPwdReg.<span class="title function_">test</span>(registUser.<span class="property">userPwd</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">            userPwdMsg.<span class="property">value</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        userPwdMsg.<span class="property">value</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">checkReUserPwd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> userPwdReg = <span class="regexp">/^[0-9]&#123;6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(!userPwdReg.<span class="title function_">test</span>(reUserPwd.<span class="property">value</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">            reUserPwdMsg.<span class="property">value</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(registUser.<span class="property">userPwd</span> != reUserPwd.<span class="property">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            reUserPwdMsg.<span class="property">value</span>=<span class="string">&quot;两次密码不一致&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        reUserPwdMsg.<span class="property">value</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注册的方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">regist</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 校验所有的输入框是否合法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> flag1 =<span class="keyword">await</span> <span class="title function_">checkUsername</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> flag2 =<span class="keyword">await</span> <span class="title function_">checkUserPwd</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> flag3 =<span class="keyword">await</span> <span class="title function_">checkReUserPwd</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(flag1 &amp;&amp; flag2 &amp;&amp; flag3)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span>  &#123;data&#125;= <span class="keyword">await</span> request.<span class="title function_">post</span>(<span class="string">&quot;user/regist&quot;</span>,registUser)</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span>(data.<span class="property">code</span> == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 注册成功跳转 登录页</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;注册成功,快去登录吧&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">          &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;抱歉,用户名被抢注了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;校验不通过,请求再次检查数据&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">clearForm</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        registUser.<span class="property">username</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        registUser.<span class="property">userPwd</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        usernameMsg.<span class="property">value</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        userPwdMsg.<span class="property">value</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        reUserPwd.<span class="property">value</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        reUserPwdMsg.<span class="property">value</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>请注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入账号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">id</span>=<span class="string">&quot;usernameInput&quot;</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">v-model</span>=<span class="string">&quot;registUser.username&quot;</span></span></span><br><span class="line"><span class="tag">                  @<span class="attr">blur</span>=<span class="string">&quot;checkUsername()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;usernameMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;usernameMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">&quot;userPwdInput&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">v-model</span>=<span class="string">&quot;registUser.userPwd&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">blur</span>=<span class="string">&quot;checkUserPwd()&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;userPwdMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;userPwdMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">&quot;reUserPwdInput&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">v-model</span>=<span class="string">&quot;reUserPwd&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">blur</span>=<span class="string">&quot;checkReUserPwd()&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;reUserPwdMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;reUserPwdMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;buttonContainer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;regist()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clearForm()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>去登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">       <span class="selector-class">.ht</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ltr</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid  powderblue;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ipt</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.msg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: gold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.buttonContainer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10-1-3-登录页面完成登录"><a href="#10-1-3-登录页面完成登录" class="headerlink" title="10.1.3 登录页面完成登录"></a>10.1.3 登录页面完成登录</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">import</span> &#123;ref,reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">import</span> request  <span class="keyword">from</span> <span class="string">&#x27;../utils/request&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> loginUser =<span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">username</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">userPwd</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> usernameMsg =<span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> userPwdMsg =<span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">checkUsername</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> usernameReg= <span class="regexp">/^[a-zA-Z0-9]&#123;5,10&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!usernameReg.<span class="title function_">test</span>(loginUser.<span class="property">username</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">                usernameMsg.<span class="property">value</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            usernameMsg.<span class="property">value</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">checkUserPwd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> userPwdReg = <span class="regexp">/^[0-9]&#123;6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!userPwdReg.<span class="title function_">test</span>(loginUser.<span class="property">userPwd</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">                userPwdMsg.<span class="property">value</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            userPwdMsg.<span class="property">value</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 表单数据格式都正确再提交</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> flag1 =<span class="title function_">checkUsername</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> flag2 =<span class="title function_">checkUserPwd</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!(flag1 &amp;&amp; flag2))&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> request.<span class="title function_">post</span>(<span class="string">&quot;user/login&quot;</span>,loginUser)</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">if</span>(data.<span class="property">code</span> == <span class="number">200</span> )&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;登录成功&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 跳转到showSchedule</span></span></span><br><span class="line"><span class="language-javascript">                router.<span class="title function_">push</span>(<span class="string">&quot;/showSchedule&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">           &#125; <span class="keyword">else</span> <span class="keyword">if</span>( data.<span class="property">code</span> == <span class="number">503</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;密码有误&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">           &#125;<span class="keyword">else</span> <span class="keyword">if</span> (data.<span class="property">code</span> == <span class="number">501</span> )&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;用户名有误&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">           &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;未知错误&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">           &#125;</span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入账号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">v-model</span>=<span class="string">&quot;loginUser.username&quot;</span></span></span><br><span class="line"><span class="tag">                    @<span class="attr">blur</span>=<span class="string">&quot;checkUsername()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;usernameMsg&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;usernameMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">v-model</span>=<span class="string">&quot;loginUser.userPwd&quot;</span></span></span><br><span class="line"><span class="tag">                    @<span class="attr">blur</span>=<span class="string">&quot;checkUserPwd()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;userPwdMsg&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;userPwdMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;buttonContainer&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;login()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/regist&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>去注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ht</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ltr</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid  powderblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ipt</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#usernameMsg</span> , <span class="selector-id">#userPwdMsg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: gold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.buttonContainer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-2-后端代码处理"><a href="#10-2-后端代码处理" class="headerlink" title="10.2 后端代码处理"></a>10.2 后端代码处理</h3><h4 id="10-2-1-添加跨域处理器"><a href="#10-2-1-添加跨域处理器" class="headerlink" title="10.2.1 添加跨域处理器"></a>10.2.1 添加跨域处理器</h4><h5 id="10-2-1-1-什么是跨域"><a href="#10-2-1-1-什么是跨域" class="headerlink" title="10.2.1.1 什么是跨域"></a>10.2.1.1 什么是跨域</h5><p>同源策略（Sameoriginpolicy）是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。<code>**同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号**</code></p><h5 id="10-2-1-2为什么会产生跨域"><a href="#10-2-1-2为什么会产生跨域" class="headerlink" title="10.2.1.2为什么会产生跨域"></a>10.2.1.2为什么会产生跨域</h5><p>前后端分离模式下,客户端请求前端服务器获取视图资源,然后客户端自行向后端服务器获取数据资源,前端服务器的 协议,IP和端口和后端服务器很可能是不一样的,这样就产生了跨域</p><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726554705-e8874ee4-2a44-4522-8e08-66307daa00a1.png" alt="img"></p><h5 id="10-2-1-3-如何解决跨域"><a href="#10-2-1-3-如何解决跨域" class="headerlink" title="10.2.1.3 如何解决跨域"></a>10.2.1.3 如何解决跨域</h5><p>前端项目代理模式处理</p><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726562061-d6a1981f-0613-4049-8b92-7b9059244984.png" alt="img"></p><p>后端跨域过滤器方式处理</p><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726567978-df6f19b7-23d8-42e7-a466-f84e5d73fb70.png" alt="img"></p><ul><li>CrosFilter过滤器</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.common.Result;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.util.WebUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CrosFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        System.out.println(request.getMethod());</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, PUT,OPTIONS, DELETE, HEAD&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;access-control-allow-origin, authority, content-type, version-info, X-Requested-With&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果是跨域预检请求,则直接在此响应200业务码</span></span><br><span class="line">        <span class="keyword">if</span>(request.getMethod().equalsIgnoreCase(<span class="string">&quot;OPTIONS&quot;</span>))&#123;</span><br><span class="line">            WebUtil.writeJson(response, Result.ok(<span class="literal">null</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 非预检请求,放行即可</span></span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>未来我们使用框架,直接用一个<a href="">@CrossOrigin </a> 就可以解决跨域问题了</li></ul><h4 id="10-2-2-重构UserController"><a href="#10-2-2-重构UserController" class="headerlink" title="10.2.2 重构UserController"></a>10.2.2 重构UserController</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.common.Result;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.common.ResultCodeEnum;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysUser;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.SysUserService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.impl.SysUserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.util.MD5Util;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.util.WebUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/user/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SysUserService</span> <span class="variable">userService</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SysUserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册时校验用户名是否被占用的业务接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">checkUsernameUsed</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">registUser</span> <span class="operator">=</span> userService.findByUsername(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装结果对象</span></span><br><span class="line">        Result result=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> ==registUser)&#123;</span><br><span class="line">            <span class="comment">// 未占用,创建一个code为200的对象</span></span><br><span class="line">            result= Result.ok(<span class="literal">null</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 占用, 创建一个结果为505的对象</span></span><br><span class="line">            result= Result.build(<span class="literal">null</span>, ResultCodeEnum.USERNAME_USED);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将result对象转换成JSON并响应给客户端</span></span><br><span class="line">        WebUtil.writeJson(resp,result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册的业务接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">regist</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 接收要注册的用户信息</span></span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">registUser</span> <span class="operator">=</span> WebUtil.readJson(req, SysUser.class);</span><br><span class="line">        <span class="comment">// 调用服务层方法,将用户注册进入数据库</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span>userService.regist(registUser);</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           result=Result.ok(<span class="literal">null</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           result =Result.build(<span class="literal">null</span>,ResultCodeEnum.USERNAME_USED);</span><br><span class="line">        &#125;</span><br><span class="line">        WebUtil.writeJson(resp,result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录的业务接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收用户请求参数</span></span><br><span class="line">        <span class="comment">// 获取要登录的用户名密码</span></span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">inputUser</span> <span class="operator">=</span> WebUtil.readJson(req, SysUser.class);</span><br><span class="line">        <span class="comment">// 调用服务层方法,根据用户名查询数据库中是否有一个用户</span></span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">loginUser</span> <span class="operator">=</span>userService.findByUsername(inputUser.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> == loginUser)&#123;</span><br><span class="line">            <span class="comment">// 没有根据用户名找到用户,说明用户名有误</span></span><br><span class="line">            result=Result.build(<span class="literal">null</span>,ResultCodeEnum.USERNAME_ERROR);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(! loginUser.getUserPwd().equals(MD5Util.encrypt(inputUser.getUserPwd())))&#123;</span><br><span class="line">            <span class="comment">// 用户密码有误,</span></span><br><span class="line">           result=Result.build(<span class="literal">null</span>,ResultCodeEnum.PASSWORD_ERROR);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 登录成功</span></span><br><span class="line">            result=Result.ok(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        WebUtil.writeJson(resp,result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-2-3-删除登录校验过滤器"><a href="#10-2-3-删除登录校验过滤器" class="headerlink" title="10.2.3 删除登录校验过滤器"></a>10.2.3 删除登录校验过滤器</h4><ul><li>这里不使用cookie和session方式记录用户状态,未来使用token,所以登录过滤器删除即可</li></ul><h2 id="十一、Vue3状态管理Pinia"><a href="#十一、Vue3状态管理Pinia" class="headerlink" title="十一、Vue3状态管理Pinia"></a>十一、Vue3状态管理Pinia</h2><h3 id="11-1-Pinia介绍"><a href="#11-1-Pinia介绍" class="headerlink" title="11.1 Pinia介绍"></a>11.1 Pinia介绍</h3><p>如何实现多个组件之间的数据传递?</p><ul><li><p>方式1 组件传参 </p></li><li><p>方式2 路由传参 </p></li><li><p>方式3 通过pinia状态管理定义共享数据</p></li></ul><p>当我们有<code>多个组件共享一个共同的状态(数据源)</code>时，多个视图可能都依赖于同一份状态。来自不同视图的交互也可能需要更改同一份状态。虽然我们的手动状态管理解决方案（props,组件间通信,模块化）在简单的场景中已经足够了，但是在大规模的生产应用中还有很多其他事项需要考虑：</p><ul><li><p>更强的团队协作约定</p></li><li><p>与 Vue DevTools 集成，包括时间轴、组件内部审查和时间旅行调试</p></li><li><p>模块热更新 (HMR)</p></li><li><p>服务端渲染支持</p></li></ul><p><a href="https://pinia.vuejs.org/zh/">Pinia</a> 就是一个实现了上述需求的状态管理库，由 Vue 核心团队维护，对 Vue 2 和 Vue 3 都可用。<a href="https://pinia.vuejs.org/zh/introduction.html">https://pinia.vuejs.org/zh/introduction.html</a></p><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1708933322055-674034cb-4d02-4048-b4c4-45445887dca1.png" alt="img"></p><h3 id="11-2-Pinia基本用法"><a href="#11-2-Pinia基本用法" class="headerlink" title="11.2 Pinia基本用法"></a>11.2 Pinia基本用法</h3><p>1 准备vite项目</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm create vite</span><br><span class="line">npm install </span><br><span class="line">npm install vue-router@<span class="number">4</span> --save</span><br></pre></td></tr></table></figure><p>2 安装pinia</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><p>3 定义pinia store对象 src&#x2F;store&#x2F;store.js [推荐这么命名不是强制]</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数据并且对外暴露</span></span><br><span class="line"><span class="comment">// store就是定义共享状态的包装对象</span></span><br><span class="line"><span class="comment">// 内部包含四个属性： id 唯一标识 state 完整类型推理，推荐使用箭头函数 存放的数据 getters 类似属性计算，存储放对数据</span></span><br><span class="line"><span class="comment">// 操作的方法  actions 存储数据的复杂业务逻辑方法</span></span><br><span class="line"><span class="comment">// 理解： store类似Java中的实体类， id就是类名， state 就是装数据值的属性  getters就是get方法，actions就是对数据操作的其他方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> definedPerson = <span class="title function_">defineStore</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;personPinia&#x27;</span>, <span class="comment">//必须唯一</span></span><br><span class="line">        <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123; <span class="comment">// state中用于定义数据</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">username</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">hobbies</span>:[<span class="string">&#x27;唱歌&#x27;</span>,<span class="string">&#x27;跳舞&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">getters</span>:&#123;<span class="comment">// 用于定义一些通过数据计算而得到结果的一些方法 一般在此处不做对数据的修改操作</span></span><br><span class="line">                 <span class="comment">// getters中的方法可以当做属性值方式使用</span></span><br><span class="line">            <span class="title function_">getHobbiesCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">hobbies</span>.<span class="property">length</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">getAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">actions</span>:&#123; <span class="comment">// 用于定义一些对数据修改的方法</span></span><br><span class="line">            <span class="title function_">doubleAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">age</span>=<span class="variable language_">this</span>.<span class="property">age</span>*<span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">/* 定义共享pinia数据 */</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个Person共享</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> defindPerson = <span class="title function_">defineStore</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="string">&quot;perspmPinia&quot;</span>,<span class="comment">//当前数据的id 必须全局为唯一</span></span><br><span class="line">        <span class="attr">state</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="comment">//状态 其实就是响应式数据</span></span><br><span class="line">                <span class="attr">username</span>:<span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">                <span class="attr">age</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">hobbies</span>:[<span class="string">&quot;唱歌&quot;</span>,<span class="string">&quot;跳舞&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">getters</span>:&#123;<span class="comment">//专门定义一个获得数据或者使用数据计算结果的一些函数，这里的函数不要修改数据</span></span><br><span class="line">            <span class="title function_">getAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">getHobbiesCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">hobbies</span>.<span class="property">length</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">actions</span>:&#123;<span class="comment">//专门定义一些修改数据的函数</span></span><br><span class="line">            <span class="title function_">doubleAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">age</span> = <span class="variable language_">this</span>.<span class="property">age</span>*<span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>4 在main.js配置pinia组件到vue中</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./routers/router.js&#x27;</span></span><br><span class="line"><span class="comment">// 导pinia</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="comment">// 创建pinia对象</span></span><br><span class="line"><span class="keyword">let</span> pinia= <span class="title function_">createPinia</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app =<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"><span class="comment">// app中使用pinia功能</span></span><br><span class="line">app.<span class="title function_">use</span>(pinia) </span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>5 Operate.vue 中操作Pinia数据</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; definedPerson&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/store&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 读取存储的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person= <span class="title function_">definedPerson</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> hobby = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>operate视图,用户操作Pinia中的数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        请输入姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        请输入年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.age&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        请增加爱好:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吃饭&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 吃饭</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;睡觉&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 睡觉</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打豆豆&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 打豆豆 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用person的doubleAge()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.doubleAge()&quot;</span>&gt;</span>年龄加倍<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用pinia提供的$reset()方法恢复数据的默认值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.$reset()&quot;</span>&gt;</span>恢复默认值<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用$patch方法一次性修改多个属性值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.$patch(&#123;username:&#x27;奥特曼&#x27;,age:100,hobbies:[&#x27;晒太阳&#x27;,&#x27;打怪兽&#x27;]&#125;)&quot;</span>&gt;</span>变身奥特曼<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">显示pinia中的person数据:&#123;&#123;person&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6 List.vue中展示Pinia数据</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; definedPerson&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/store&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 读取存储的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person= <span class="title function_">definedPerson</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>List页面,展示Pinia中的数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        读取姓名:&#123;&#123;person.username&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        读取年龄:&#123;&#123;person.age&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        通过get年龄:&#123;&#123;person.getAge&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        爱好数量:&#123;&#123;person.getHobbiesCount&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        所有的爱好:</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;(hobby,index) in person.hobbies&#x27;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7 定义组件路由router.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入路由创建的相关方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入vue组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span>  <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Operate</span>  <span class="keyword">from</span> <span class="string">&#x27;../components/Operate.vue&#x27;</span></span><br><span class="line"><span class="comment">// 创建路由对象,声明路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/opearte&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Operate</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">List</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>8 App.vue中通过路由切换组件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/opearte&quot;</span>&gt;</span>显示操作页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>显示展示页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>9 启动测试</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="11-3-Pinia其他细节"><a href="#11-3-Pinia其他细节" class="headerlink" title="11.3 Pinia其他细节"></a>11.3 Pinia其他细节</h3><p>State (状态) 在大多数情况下，state 都是你的 store 的核心。人们通常会先定义能代表他们 APP 的 state。在 Pinia 中，state 被定义为一个返回初始状态的函数。</p><ul><li>store.js</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> definedPerson = <span class="title function_">defineStore</span>(<span class="string">&#x27;personPinia&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">hobbies</span>:[<span class="string">&#x27;唱歌&#x27;</span>,<span class="string">&#x27;跳舞&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">getters</span>:&#123;</span><br><span class="line">            <span class="title function_">getHobbiesCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">hobbies</span>.<span class="property">length</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">getAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">actions</span>:&#123;</span><br><span class="line">            <span class="title function_">doubleAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">age</span>=<span class="variable language_">this</span>.<span class="property">age</span>*<span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>Operate.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; definedPerson&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/store&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 读取存储的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person= <span class="title function_">definedPerson</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> hobby = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">addHobby</span>= (<span class="params"></span>)=&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(hobby.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        person.<span class="property">hobbies</span>.<span class="title function_">push</span>(hobby.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听状态</span></span></span><br><span class="line"><span class="language-javascript">    person.$subscribe(<span class="function">(<span class="params">mutation,state</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---subscribe---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        mutation.storeId</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            person.$id一样</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        mutation.payload</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            传递给 cartStore.$patch() 的补丁对象。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        state 数据状态,其实是一个代理</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(mutation)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(mutation.<span class="property">type</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(mutation.<span class="property">payload</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(mutation.<span class="property">storeId</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">$id</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 数据 其实是一个代理对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(state)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>operate视图,用户操作Pinia中的数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        请输入姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        请输入年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.age&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        请增加爱好:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吃饭&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 吃饭</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;睡觉&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 睡觉</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打豆豆&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 打豆豆 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;addHobby&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用person的doubleAge()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.doubleAge()&quot;</span>&gt;</span>年龄加倍<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用pinia提供的$reset()方法恢复数据的默认值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.$reset()&quot;</span>&gt;</span>恢复默认值<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用$patch方法一次性修改多个属性值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.$patch(&#123;username:&#x27;奥特曼&#x27;,age:100,hobbies:[&#x27;晒太阳&#x27;,&#x27;打怪兽&#x27;]&#125;)&quot;</span>&gt;</span>变身奥特曼<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">person:&#123;&#123;person&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2 Getter 完全等同于 store 的 state 的<a href="https://cn.vuejs.org/guide/essentials/computed.html">计算值</a>。可以通过 <code>defineStore()</code> 中的 <code>getters</code> 属性来定义它们。<strong>推荐</strong>使用箭头函数，并且它将接收 <code>state</code> 作为第一个参数：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doubleCount</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3  Action 相当于组件中的 <a href="https://v3.vuejs.org/guide/data-methods.html#methods">method</a>。它们可以通过 <code>defineStore()</code> 中的 <code>actions</code> 属性来定义，<strong>并且它们也是定义业务逻辑的完美选择。</strong>类似 <a href="https://pinia.vuejs.org/zh/core-concepts/getters.html">getter</a>，action 也可通过 <code>this</code> 访问<strong>整个 store 实例</strong>，并支持**完整的类型标注(以及自动补全)**。不同的是，<code>action</code> 可以是异步的，你可以在它们里面 <code>await</code> 调用任何 API，以及其他 action！</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">randomizeCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span> = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">100</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="十二、案例开发-日程管理-第七期"><a href="#十二、案例开发-日程管理-第七期" class="headerlink" title="十二、案例开发-日程管理-第七期"></a>十二、案例开发-日程管理-第七期</h2><h3 id="12-1-前端使用pinia存储数据"><a href="#12-1-前端使用pinia存储数据" class="headerlink" title="12.1 前端使用pinia存储数据"></a>12.1 前端使用pinia存储数据</h3><ul><li>安装pinia依赖</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><ul><li>src下创建pinia.js文件</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入pinia组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;createPinia&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="comment">// 创建pinia对象</span></span><br><span class="line"><span class="keyword">let</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="comment">// 导出默认的pinia</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pinia</span><br></pre></td></tr></table></figure><ul><li>main.js中使用pinia</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入路由</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/router.js&#x27;</span></span><br><span class="line"><span class="comment">// 导入pinia对象</span></span><br><span class="line"><span class="keyword">import</span> pinia <span class="keyword">from</span> <span class="string">&#x27;./pinia.js&#x27;</span></span><br><span class="line"><span class="keyword">let</span> app =<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">// 全局使用路由</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"><span class="comment">// 全局使用pinia</span></span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;store&#x2F;userStore.js 用于存储用户信息</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> defineUser = <span class="title function_">defineStore</span>(<span class="string">&#x27;loginUser&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">uid</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters :&#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;store&#x2F;scheduleStore.js 用于存储用户的日程信息</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> defineSchedule = <span class="title function_">defineStore</span>(<span class="string">&#x27;scheduleList&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">itemList</span>:[</span><br><span class="line">                <span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">                    sid:1,</span></span><br><span class="line"><span class="comment">                    uid:1,</span></span><br><span class="line"><span class="comment">                    title:&#x27;学java&#x27;,</span></span><br><span class="line"><span class="comment">                    completed:1</span></span><br><span class="line"><span class="comment">                &#125;,</span></span><br><span class="line"><span class="comment">                &#123;</span></span><br><span class="line"><span class="comment">                    sid:2,</span></span><br><span class="line"><span class="comment">                    uid:1,</span></span><br><span class="line"><span class="comment">                    title:&#x27;学前端&#x27;,</span></span><br><span class="line"><span class="comment">                    completed:0</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters :&#123;</span><br><span class="line">       </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>Header.vue中,通过pinia的数据来判断展示何种提示 视图</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 导入pinia中的user数据 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;defineUser&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/userStore.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;defineSchedule&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/scheduleStore.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> sysUser =<span class="title function_">defineUser</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> schedule = <span class="title function_">defineSchedule</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 导入编程式路由 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span>  router =<span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 退出登录接口 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">logout</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 清除userPina 和schedulepinia</span></span></span><br><span class="line"><span class="language-javascript">      sysUser.$reset()</span></span><br><span class="line"><span class="language-javascript">      schedule.$reset()</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 通过路由回到登录页</span></span></span><br><span class="line"><span class="language-javascript">      router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>欢迎使用日程管理系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">&quot;optionDiv&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;sysUser.username == &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;b1s&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/regist&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;b1s&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>   <span class="attr">class</span>=<span class="string">&quot;optionDiv&quot;</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        欢迎&#123;&#123;sysUser.username&#125;&#125;   </span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;b1b&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;logout()&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/showSchedule&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;b1b&quot;</span>&gt;</span>查看我的日程<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.ht</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.b1s</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.b1b</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.optionDiv</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Login.vue中,登录成功后,接收后端响应回来的用户id和用户名,存储于userStore中</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* 导入pinia中的user数据 */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">import</span> &#123;defineUser&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/userStore.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> sysUser =<span class="title function_">defineUser</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* 获取 编程式路由对象 */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> router =<span class="title function_">useRouter</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* 导入axios请求对象 */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../utils/request.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 导入ref,reactive处理响应式数据的方法</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">import</span>&#123; ref,reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 响应式数据,保存用户输入的表单信息</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> loginUser =<span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">userPwd</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">       &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 响应式数据,保存校验的提示信息</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> usernameMsg =<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> userPwdMsg = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 校验用户名的方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkUsername</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义正则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> usernameReg=<span class="regexp">/^[a-zA-Z0-9]&#123;5,10&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 校验用户名</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!usernameReg.<span class="title function_">test</span>(loginUser.<span class="property">username</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 格式不合法</span></span></span><br><span class="line"><span class="language-javascript">                usernameMsg.<span class="property">value</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            usernameMsg.<span class="property">value</span>=<span class="string">&quot;ok&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 校验密码的方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkUserPwd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义正则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> passwordReg=<span class="regexp">/^[0-9]&#123;6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">             <span class="comment">// 校验密码</span></span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">if</span>(!passwordReg.<span class="title function_">test</span>(loginUser.<span class="property">userPwd</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 格式不合法</span></span></span><br><span class="line"><span class="language-javascript">                userPwdMsg.<span class="property">value</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            userPwdMsg.<span class="property">value</span>=<span class="string">&quot;ok&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 登录的函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span>  <span class="title function_">login</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发送异步请求&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> request.<span class="title function_">post</span>(<span class="string">&quot;/user/login&quot;</span>,loginUser)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(data.<span class="property">code</span> == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;登录成功&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 更新pinia数据</span></span></span><br><span class="line"><span class="language-javascript">                sysUser.<span class="property">uid</span> =data.<span class="property">data</span>.<span class="property">loginUser</span>.<span class="property">uid</span></span></span><br><span class="line"><span class="language-javascript">                sysUser.<span class="property">username</span> =data.<span class="property">data</span>.<span class="property">loginUser</span>.<span class="property">username</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 跳转到日程查询页</span></span></span><br><span class="line"><span class="language-javascript">                router.<span class="title function_">push</span>(<span class="string">&quot;/showSchedule&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(data.<span class="property">code</span> == <span class="number">501</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;用户名有误,请重新输入&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(data.<span class="property">code</span> == <span class="number">503</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;密码有误,请重新输入&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;出现未知名错误&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 清除表单信息的方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">clearForm</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            loginUser.<span class="property">username</span>=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            loginUser.<span class="property">userPwd</span>=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            usernameMsg.<span class="property">value</span>=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            userPwdMsg.<span class="property">value</span>=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入账号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">v-model</span>=<span class="string">&quot;loginUser.username&quot;</span></span></span><br><span class="line"><span class="tag">                    @<span class="attr">blur</span>=<span class="string">&quot;checkUsername()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;usernameMsg&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;usernameMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">v-model</span>=<span class="string">&quot;loginUser.userPwd&quot;</span></span></span><br><span class="line"><span class="tag">                    @<span class="attr">blur</span>=<span class="string">&quot;checkUserPwd()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;userPwdMsg&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;userPwdMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;buttonContainer&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;login()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clearForm()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/regist&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>去注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ht</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ltr</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid  powderblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ipt</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#usernameMsg</span> , <span class="selector-id">#userPwdMsg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: gold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.buttonContainer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>服务端登录处理方法,登录成功,返回登录用户的信息</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用户登录的业务接口</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 接收用户请求参数</span></span><br><span class="line">       <span class="comment">// 获取要登录的用户名密码</span></span><br><span class="line">       <span class="type">SysUser</span> <span class="variable">inputUser</span> <span class="operator">=</span> WebUtil.readJson(req, SysUser.class);</span><br><span class="line">       <span class="comment">// 调用服务层方法,根据用户名查询数据库中是否有一个用户</span></span><br><span class="line">       <span class="type">SysUser</span> <span class="variable">loginUser</span> <span class="operator">=</span>userService.findByUsername(inputUser.getUsername());</span><br><span class="line"></span><br><span class="line">       <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(<span class="literal">null</span> == loginUser)&#123;</span><br><span class="line">           <span class="comment">// 没有根据用户名找到用户,说明用户名有误</span></span><br><span class="line">           result=Result.build(<span class="literal">null</span>,ResultCodeEnum.USERNAME_ERROR);</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(! loginUser.getUserPwd().equals(MD5Util.encrypt(inputUser.getUserPwd())))&#123;</span><br><span class="line">           <span class="comment">// 用户密码有误,</span></span><br><span class="line">          result=Result.build(<span class="literal">null</span>,ResultCodeEnum.PASSWORD_ERROR);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="comment">// 登录成功,将用户信息存入session</span></span><br><span class="line">           req.getSession().setAttribute(<span class="string">&quot;sysUser&quot;</span>,loginUser);</span><br><span class="line">           <span class="comment">// 登录成功</span></span><br><span class="line">           <span class="comment">// 将密码请空后,将用户信息响应给客户端</span></span><br><span class="line">           loginUser.setUserPwd(<span class="string">&quot;&quot;</span>);</span><br><span class="line">           Map&lt;String,Object&gt; data =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">           data.put(<span class="string">&quot;loginUser&quot;</span>,loginUser);</span><br><span class="line">           result=Result.ok(data);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       WebUtil.writeJson(resp,result);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>router.js中,通过路由守卫控制只有登录状态下才可以进入showSchedule.vue</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pinia <span class="keyword">from</span> <span class="string">&#x27;../pinia.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineUser&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/userStore.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sysUser = <span class="title function_">defineUser</span>(pinia)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Login.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Regist</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Regist.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowScedule</span> <span class="keyword">from</span> <span class="string">&#x27;../components/ShowSchedule.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>  router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Login</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Login</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/showSchedule&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">ShowScedule</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/regist&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Regist</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/* 配置路由的前置守卫,在登录状态下才可以范文showSchedule.vue */</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>( <span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 如果是查看日程</span></span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">path</span>==<span class="string">&quot;/showSchedule&quot;</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果尚未的登录</span></span><br><span class="line">        <span class="keyword">if</span>(sysUser.<span class="property">username</span> == <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;您尚未登录,请登录后再查看日程&quot;</span>)</span><br><span class="line">            <span class="title function_">next</span>(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 已经登录 放行</span></span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 其他资源 放行</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="12-2-显示所有日程数据"><a href="#12-2-显示所有日程数据" class="headerlink" title="12.2 显示所有日程数据"></a>12.2 显示所有日程数据</h3><ul><li>ShowSchedule.vue中向后端发送异步请求查询数据并展示</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 引入axios */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../utils/request.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 引入pinia数据 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;defineSchedule&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/scheduleStore.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;defineUser&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/userStore.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> schedule = <span class="title function_">defineSchedule</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> sysUser = <span class="title function_">defineUser</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 引入挂载生命周期 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; onMounted,onUpdated,ref,reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 第一次挂载就立刻向后端发送请求,获取最新数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span>(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">showSchedule</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">showSchedule</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> request.<span class="title function_">get</span>(<span class="string">&quot;/schedule/findAllSchedule&quot;</span>,&#123;<span class="attr">params</span>:&#123;<span class="string">&quot;uid&quot;</span>:sysUser.<span class="property">uid</span>&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">        schedule.<span class="property">itemList</span> =data.<span class="property">data</span>.<span class="property">itemList</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>您的日程如下<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>进度<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item,index in schedule.itemList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-text</span>=<span class="string">&quot;index+1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;input&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>   <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.completed&quot;</span>&gt;</span> 已完成</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>   <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.completed&quot;</span>&gt;</span> 未完成</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;buttonContainer&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>保存修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr buttonContainer&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>新增日程<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">&#123;&#123;schedule&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.ht</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ltr</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid  powderblue;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ipt</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#usernameMsg</span> , <span class="selector-id">#userPwdMsg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: gold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.buttonContainer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>SysScheduleController中查询数据并响应json</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.common.Result;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysSchedule;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.SysScheduleService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.impl.SysScheduleServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.util.WebUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/schedule/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysScheduleController</span>  <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SysScheduleService</span> <span class="variable">scheduleService</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SysScheduleServiceImpl</span>();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有日程接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">findAllSchedule</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">uid</span> <span class="operator">=</span> Integer.parseInt(req.getParameter(<span class="string">&quot;uid&quot;</span>));</span><br><span class="line">        <span class="comment">//  调用服务层方法,查询所有日程</span></span><br><span class="line">        List&lt;SysSchedule&gt; itemList = scheduleService.findItemListByUid(uid);</span><br><span class="line">        <span class="comment">// 将日程信息装入result,转换JSON给客户端</span></span><br><span class="line">        Map&lt;String,Object&gt; data =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;itemList&quot;</span>,itemList);</span><br><span class="line">        WebUtil.writeJson(resp,Result.ok(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SysScheduleService接口和实现类代码</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.service;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysSchedule;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysScheduleService</span> &#123;</span><br><span class="line">    List&lt;SysSchedule&gt; <span class="title function_">findItemListByUid</span><span class="params">(<span class="type">int</span> uid)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.SysScheduleDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.impl.SysScheduleDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysSchedule;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.SysScheduleService;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysScheduleServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SysScheduleService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SysScheduleDao</span> <span class="variable">scheduleDao</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SysScheduleDaoImpl</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SysSchedule&gt; <span class="title function_">findItemListByUid</span><span class="params">(<span class="type">int</span> uid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> scheduleDao.findItemListByUid(uid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SysScheduleDao接口和实现类代码</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.dao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysSchedule;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysScheduleDao</span> &#123;</span><br><span class="line">    List&lt;SysSchedule&gt; <span class="title function_">findItemListByUid</span><span class="params">(<span class="type">int</span> uid)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-----------------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.dao.impl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.SysScheduleDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysSchedule;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysScheduleDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span> <span class="keyword">implements</span> <span class="title class_">SysScheduleDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SysSchedule&gt; <span class="title function_">findItemListByUid</span><span class="params">(<span class="type">int</span> uid)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span><span class="string">&quot;select sid,uid,title, completed from sys_schedule  where uid = ? &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> baseQuery(SysSchedule.class,sql,uid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-3-增加和保存日程数据"><a href="#12-3-增加和保存日程数据" class="headerlink" title="12.3 增加和保存日程数据"></a>12.3 增加和保存日程数据</h3><ul><li>ShowSchedule.vue下,为增加和修改按钮绑定事件</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 引入axios */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../utils/request.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 引入pinia数据 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;defineSchedule&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/scheduleStore.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;defineUser&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/userStore.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> schedule = <span class="title function_">defineSchedule</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> sysUser = <span class="title function_">defineUser</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 引入挂载生命周期 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; onMounted,onUpdated,ref,reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 第一次挂载就立刻向后端发送请求,获取最新数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span>(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 加载完毕后,立刻调用查询数据的方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">showSchedule</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span>  <span class="title function_">showSchedule</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> request.<span class="title function_">get</span>(<span class="string">&quot;/schedule/findAllSchedule&quot;</span>,&#123;<span class="attr">params</span>:&#123;<span class="string">&quot;uid&quot;</span>:sysUser.<span class="property">uid</span>&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">        schedule.<span class="property">itemList</span> =data.<span class="property">data</span>.<span class="property">itemList</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 新增日程</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">addItem</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 立刻向后端发送一个请求,让后端先为当前用户在数据库中增加一个默认格式的空数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> request.<span class="title function_">get</span>(<span class="string">&quot;/schedule/addDefaultSchedule&quot;</span>,&#123;<span class="attr">params</span>:&#123;<span class="string">&quot;uid&quot;</span>:sysUser.<span class="property">uid</span>&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(data.<span class="property">code</span> == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 然后调用刷新页面数据方法,立刻获取最新数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showSchedule</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;添加异常&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 更新日程的方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateItem</span>(<span class="params">index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 根据索引获取元素</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将元素通过 JSON串的形式 发送给服务端</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> &#123;data&#125; =<span class="keyword">await</span> request.<span class="title function_">post</span>(<span class="string">&quot;/schedule/updateSchedule&quot;</span>,schedule.<span class="property">itemList</span>[index])</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(data.<span class="property">code</span> == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 服务端修改完毕后,刷新页面数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showSchedule</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;更新异常&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>您的日程如下<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>进度<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item,index in schedule.itemList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-text</span>=<span class="string">&quot;index+1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;input&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>   <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.completed&quot;</span>&gt;</span> 已完成</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>   <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.completed&quot;</span>&gt;</span> 未完成</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;buttonContainer&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;updateItem(index)&quot;</span>&gt;</span>保存修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr buttonContainer&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addItem()&quot;</span>&gt;</span>新增日程<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">&#123;&#123;schedule&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.ht</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ltr</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid  powderblue;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ipt</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#usernameMsg</span> , <span class="selector-id">#userPwdMsg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: gold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.buttonContainer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>SysScheduleController处理 新增和保存修改业务处理接口</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.common.Result;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysSchedule;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.SysScheduleService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.impl.SysScheduleServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.util.WebUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/schedule/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysScheduleController</span>  <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">SysScheduleService</span> <span class="variable">scheduleService</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SysScheduleServiceImpl</span>();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向数据库中增加一个新的默认数据的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addDefaultSchedule</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">uid</span> <span class="operator">=</span> Integer.parseInt(req.getParameter(<span class="string">&quot;uid&quot;</span>));</span><br><span class="line">        <span class="comment">//  调用服务层方法,为当前用户新增一个默认空数据</span></span><br><span class="line">        scheduleService.addDefault(uid);</span><br><span class="line"></span><br><span class="line">        WebUtil.writeJson(resp,Result.ok(<span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新日程业务接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">updateSchedule</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">SysSchedule</span> <span class="variable">sysSchedule</span> <span class="operator">=</span> WebUtil.readJson(req, SysSchedule.class);</span><br><span class="line">        <span class="comment">// 调用服务层方法,更新数据</span></span><br><span class="line">        scheduleService.updateSchedule(sysSchedule);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 响应成功</span></span><br><span class="line">        WebUtil.writeJson(resp,Result.ok(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SysScheduleService接口和实现类处理业务逻辑</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.service;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysSchedule;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysScheduleService</span> &#123;</span><br><span class="line">    Integer <span class="title function_">addDefault</span><span class="params">(<span class="type">int</span> uid)</span>;</span><br><span class="line">    Integer <span class="title function_">updateSchedule</span><span class="params">(SysSchedule sysSchedule)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ----------------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.SysScheduleDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.impl.SysScheduleDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysSchedule;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.SysScheduleService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysScheduleServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SysScheduleService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SysScheduleDao</span> <span class="variable">scheduleDao</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SysScheduleDaoImpl</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">addDefault</span><span class="params">(<span class="type">int</span> uid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> scheduleDao.addDefault(uid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">updateSchedule</span><span class="params">(SysSchedule sysSchedule)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> scheduleDao.updateSchedule(sysSchedule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SysScheduleDao接口和实现类操作数据</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysSchedule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysScheduleDao</span> &#123;</span><br><span class="line">    Integer <span class="title function_">addDefault</span><span class="params">(<span class="type">int</span> uid)</span>;</span><br><span class="line">    Integer <span class="title function_">updateSchedule</span><span class="params">(SysSchedule sysSchedule)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.SysScheduleDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysSchedule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysScheduleDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span> <span class="keyword">implements</span> <span class="title class_">SysScheduleDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">addDefault</span><span class="params">(<span class="type">int</span> uid)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into sys_schedule value(default,?,&#x27;请输入日程&#x27;,0)&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> baseUpdate(sql,uid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">updateSchedule</span><span class="params">(SysSchedule sysSchedule)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span><span class="string">&quot;update sys_schedule set title = ? ,completed =  ? where sid =?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> baseUpdate(sql,sysSchedule.getTitle(),sysSchedule.getCompleted(),sysSchedule.getSid());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-5-删除日程数据"><a href="#12-5-删除日程数据" class="headerlink" title="12.5 删除日程数据"></a>12.5 删除日程数据</h3><ul><li>ShowSchedule.vue中,为删除按钮增加事件</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 引入axios */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../utils/request.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 引入pinia数据 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;defineSchedule&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/scheduleStore.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;defineUser&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/userStore.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> schedule = <span class="title function_">defineSchedule</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> sysUser = <span class="title function_">defineUser</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 引入挂载生命周期 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; onMounted,onUpdated,ref,reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 第一次挂载就立刻向后端发送请求,获取最新数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span>(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 加载完毕后,立刻调用查询数据的方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">showSchedule</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span>  <span class="title function_">showSchedule</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> request.<span class="title function_">get</span>(<span class="string">&quot;/schedule/findAllSchedule&quot;</span>,&#123;<span class="attr">params</span>:&#123;<span class="string">&quot;uid&quot;</span>:sysUser.<span class="property">uid</span>&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">        schedule.<span class="property">itemList</span> =data.<span class="property">data</span>.<span class="property">itemList</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 新增日程</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">addItem</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 立刻向后端发送一个请求,让后端先为当前用户在数据库中增加一个默认格式的空数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> request.<span class="title function_">get</span>(<span class="string">&quot;/schedule/addDefaultSchedule&quot;</span>,&#123;<span class="attr">params</span>:&#123;<span class="string">&quot;uid&quot;</span>:sysUser.<span class="property">uid</span>&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(data.<span class="property">code</span> == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 然后调用刷新页面数据方法,立刻获取最新数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showSchedule</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;添加异常&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 更新日程的方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateItem</span>(<span class="params">index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 根据索引获取元素</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将元素通过 JSON串的形式 发送给服务端</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> &#123;data&#125; =<span class="keyword">await</span> request.<span class="title function_">post</span>(<span class="string">&quot;/schedule/updateSchedule&quot;</span>,schedule.<span class="property">itemList</span>[index])</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(data.<span class="property">code</span> = <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 服务端修改完毕后,刷新页面数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showSchedule</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;更新异常&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 删除日程的方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">removeItem</span>(<span class="params">index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 弹窗提示是否删除</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(<span class="title function_">confirm</span>(<span class="string">&quot;确定要删除该条数据&quot;</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 根据索引获取要删除的item的id</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> sid = schedule.<span class="property">itemList</span>[index].<span class="property">sid</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 向服务端发送请求删除元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span>&#123;data&#125; = <span class="keyword">await</span> request.<span class="title function_">get</span>(<span class="string">&quot;/schedule/removeSchedule&quot;</span>,&#123;<span class="attr">params</span>:&#123;<span class="string">&quot;sid&quot;</span>:sid&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//根据业务码判断删除是否成功</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(data.<span class="property">code</span> == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 删除成功,更新数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">showSchedule</span>()</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 删除失败,提示失败</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;删除失败&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>您的日程如下<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>进度<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item,index in schedule.itemList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-text</span>=<span class="string">&quot;index+1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;input&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>   <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.completed&quot;</span>&gt;</span> 已完成</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>   <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.completed&quot;</span>&gt;</span> 未完成</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;buttonContainer&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>  @<span class="attr">click</span>=<span class="string">&quot;removeItem(index)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;updateItem(index)&quot;</span>&gt;</span>保存修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr buttonContainer&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addItem()&quot;</span>&gt;</span>新增日程<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">&#123;&#123;schedule&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.ht</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ltr</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid  powderblue;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ipt</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#usernameMsg</span> , <span class="selector-id">#userPwdMsg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: gold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.buttonContainer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>SysScheduleController中添加删除业务接口</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.common.Result;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysSchedule;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.SysScheduleService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.impl.SysScheduleServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.util.WebUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/schedule/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysScheduleController</span>  <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">SysScheduleService</span> <span class="variable">scheduleService</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SysScheduleServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除日程业务接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">removeSchedule</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取要删除的日程id</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sid</span> <span class="operator">=</span> Integer.parseInt(req.getParameter(<span class="string">&quot;sid&quot;</span>));</span><br><span class="line">        <span class="comment">// 调用服务层方法,删除日程</span></span><br><span class="line">        scheduleService.removeSchedule(sid);</span><br><span class="line">        <span class="comment">// 响应200</span></span><br><span class="line">        WebUtil.writeJson(resp,Result.ok(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SysScheduleService层处理删除业务的接口和实现类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysSchedule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysScheduleService</span> &#123;</span><br><span class="line">    Integer <span class="title function_">removeSchedule</span><span class="params">(<span class="type">int</span> sid)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.SysScheduleDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.impl.SysScheduleDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysSchedule;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.SysScheduleService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysScheduleServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SysScheduleService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SysScheduleDao</span> <span class="variable">scheduleDao</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SysScheduleDaoImpl</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">removeSchedule</span><span class="params">(<span class="type">int</span> sid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> scheduleDao.removeBySid(sid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SysScheduleDao操作数据库的接口和实现类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysSchedule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysScheduleDao</span> &#123;</span><br><span class="line">    Integer <span class="title function_">removeBySid</span><span class="params">(<span class="type">int</span> sid)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.SysScheduleDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysSchedule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysScheduleDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span> <span class="keyword">implements</span> <span class="title class_">SysScheduleDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">removeBySid</span><span class="params">(<span class="type">int</span> sid)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span><span class="string">&quot;delete from sys_schedule where sid = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> baseUpdate(sql,sid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十三、Element-plus组件库"><a href="#十三、Element-plus组件库" class="headerlink" title="十三、Element-plus组件库"></a>十三、Element-plus组件库</h2><h3 id="13-1-Element-plus介绍"><a href="#13-1-Element-plus介绍" class="headerlink" title="13.1 Element-plus介绍"></a>13.1 Element-plus介绍</h3><p>Element Plus 是一套基于 Vue 3 的开源 UI 组件库，是由饿了么前端团队开发的升级版本 Element UI。Element Plus 提供了丰富的 UI 组件、易于使用的 API 接口和灵活的主题定制功能，可以帮助开发者快速构建高质量的 Web 应用程序。</p><ul><li><p>Element Plus 支持按需加载，且不依赖于任何第三方 CSS 库，它可以轻松地集成到任何 Vue.js 项目中。Element Plus 的文档十分清晰，提供了各种组件的使用方法和示例代码，方便开发者快速上手。 </p></li><li><p>Element Plus 目前已经推出了大量的常用 UI 组件，如按钮、表单、表格、对话框、选项卡等，此外还提供了一些高级组件，如日期选择器、时间选择器、级联选择器、滑块、颜色选择器等。这些组件具有一致的设计和可靠的代码质量，可以为开发者提供稳定的使用体验。 </p></li><li><p>与 Element UI 相比，Element Plus 采用了现代化的技术架构和更加先进的设计理念，同时具备更好的性能和更好的兼容性。Element Plus 的更新迭代也更加频繁，可以为开发者提供更好的使用体验和更多的功能特性。 </p></li><li><p>Element Plus 可以在支持 <a href="https://caniuse.com/?feats=mdn-javascript_builtins_regexp_dotall,mdn-javascript_builtins_regexp_lookbehind_assertion,mdn-javascript_builtins_regexp_named_capture_groups,mdn-javascript_builtins_regexp_property_escapes,mdn-javascript_builtins_symbol_asynciterator,mdn-javascript_functions_method_definitions_async_generator_methods,mdn-javascript_grammar_template_literals_template_literal_revision,mdn-javascript_operators_destructuring_rest_in_objects,mdn-javascript_operators_spread_spread_in_destructuring,promise-finally">ES2018</a> 和 <a href="https://caniuse.com/resizeobserver">ResizeObserver</a> 的浏览器上运行。 如果您确实需要支持旧版本的浏览器，请自行添加 <a href="https://babeljs.io/">Babel</a> 和相应的 Polyfill </p></li><li><p>官网<a href="https://element-plus.gitee.io/zh-CN/">https://element-plus.gitee.io/zh-CN/</a> </p></li><li><p>由于 Vue 3 不再支持 IE11，Element Plus 也不再支持 IE 浏览器。</p></li></ul><p><img src="/../image/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/1707726735469-0eb01488-57d4-412f-bffb-e04e89b92ab8.png" alt="img"></p><h3 id="13-2-Element-plus入门案例"><a href="#13-2-Element-plus入门案例" class="headerlink" title="13.2 Element-plus入门案例"></a>13.2 Element-plus入门案例</h3><p>1 准备vite项目</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm create vite  // 注意选择 vue+typeScript</span><br><span class="line">npm install </span><br><span class="line">npm install vue-router@4 --save</span><br><span class="line">npm install pinia</span><br><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>2 安装element-plus</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install element-plus</span><br></pre></td></tr></table></figure><p>3 完整引入element-plus</p><ul><li>main.js</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//导入element-plus相关内容</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>4 入门案例</p><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> value = <span class="title function_">ref</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 直接使用element-plus组件即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-switch</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">&quot;large&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">active-text</span>=<span class="string">&quot;Open&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">inactive-text</span>=<span class="string">&quot;Close&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span> <span class="attr">active-text</span>=<span class="string">&quot;Open&quot;</span> <span class="attr">inactive-text</span>=<span class="string">&quot;Close&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-switch</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">active-text</span>=<span class="string">&quot;Open&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">inactive-text</span>=<span class="string">&quot;Close&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5 启动测试</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="13-3-Element-plus常用组件"><a href="#13-3-Element-plus常用组件" class="headerlink" title="13.3 Element-plus常用组件"></a>13.3 Element-plus常用组件</h3><p><a href="https://element-plus.gitee.io/zh-CN/component/button.html">https://element-plus.gitee.io/zh-CN/component/button.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会话、过滤器、监听器</title>
      <link href="/2024/02/27/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/"/>
      <url>/2024/02/27/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一-会话"><a href="#一-会话" class="headerlink" title="一  会话"></a>一  会话</h1><h2 id="1-1-会话管理概述"><a href="#1-1-会话管理概述" class="headerlink" title="1.1 会话管理概述"></a>1.1 会话管理概述</h2><h3 id="1-1-1-为什么需要会话管理"><a href="#1-1-1-为什么需要会话管理" class="headerlink" title="1.1.1 为什么需要会话管理"></a>1.1.1 为什么需要会话管理</h3><p>HTTP是无状态协议</p><ul><li><p>无状态就是不保存状态,即无状态协议(stateless),HTTP协议自身不对请求和响应之间的通信状态进行保存,也就是说,在HTTP协议这个级别,协议对于发送过的请求或者响应都不做持久化处理</p></li><li><p>简单理解:浏览器发送请求,服务器接收并响应,但是服务器不记录请求是否来自哪个浏览器,服务器没记录浏览器的特征,就是客户端的状态</p></li></ul><p>举例: 张三去一家饭馆点了几道菜,觉得味道不错,第二天又去了,对老板说,还点上次的那几道菜</p><ul><li><p>无状态: 老板没有记录张三是否来过,更没有记录上次他点了那些菜,张三只能重新再点一遍</p></li><li><p>有状态: 老板把每次来吃饭的用户都做好记录,查阅一下之前的记录,查到了张三之前的菜单,直接下单</p></li></ul><h3 id="1-1-2-会话管理实现的手段"><a href="#1-1-2-会话管理实现的手段" class="headerlink" title="1.1.2 会话管理实现的手段"></a>1.1.2 会话管理实现的手段</h3><p>Cookie和Session配合解决</p><ul><li><p>cookie是在客户端保留少量数据的技术,主要通过响应头向客户端响应一些客户端要保留的信息</p></li><li><p>session是在服务端保留更多数据的技术,主要通过HttpSession对象保存一些和客户端相关的信息</p></li><li><p>cookie和session配合记录请求状态</p></li></ul><p>举例: 张三去银行办业务</p><ul><li><p>张三第一次去某个银行办业务,银行会为张三开户(Session),并向张三发放一张银行卡(cookie)</p></li><li><p>张三后面每次去银行,就可以携带之间的银行卡(cookie),银行根据银行卡找到之前张三的账户(session)</p></li></ul><h2 id="1-2-Cookie"><a href="#1-2-Cookie" class="headerlink" title="1.2 Cookie"></a>1.2 Cookie</h2><h3 id="1-2-1-Cookie概述"><a href="#1-2-1-Cookie概述" class="headerlink" title="1.2.1 Cookie概述"></a>1.2.1 Cookie概述</h3><p>cookie是一种客户端会话技术,cookie由服务端产生,它是服务器存放在浏览器的一小份数据,浏览器以后每次访问该服务器的时候都会将这小份数据携带到服务器去。</p><ul><li><p>服务端创建cookie,将cookie放入响应对象中,Tomcat容器将cookie转化为set-cookie响应头,响应给客户端</p></li><li><p>客户端在收到cookie的响应头时,在下次请求该服务的资源时,会以cookie请求头的形式携带之前收到的Cookie</p></li><li><p>cookie是一种键值对格式的数据,从tomcat8.5开始可以保存中文,但是不推荐</p></li><li><p>由于cookie是存储于客户端的数据,比较容易暴露,一般不存储一些敏感或者影响安全的数据</p></li></ul><p>原理图</p><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563257195-ce87df4e-796c-4605-a930-03eaa7d3f789.png" alt="img"></p><p>应用场景举例</p><ol><li><p>记录用户名<br>   当我们在用户名的输入框中输入完用户名后,浏览器记录用户名,下一次再访问登录页面时,用户名自动填充到用户名的输入框. </p></li><li><p>保存电影播放进度<br>   在网页上播放电影的时候,如果中途退出浏览器了,下载再打开浏览器播放同一部电影的时候,会自动跳转到上次退出时候的进度,因为在播放的时候会将播放进度保存到cookie中</p></li></ol><h3 id="1-2-2-Cookie的使用"><a href="#1-2-2-Cookie的使用" class="headerlink" title="1.2.2 Cookie的使用"></a>1.2.2 Cookie的使用</h3><p>servletA向响应中增加Cookie</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 创建Cookie</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;c1&quot;</span>,<span class="string">&quot;c1_message&quot;</span>);</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie2</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;c2&quot;</span>,<span class="string">&quot;c2_message&quot;</span>);</span><br><span class="line">        <span class="comment">// 将cookie放入响应对象</span></span><br><span class="line">        resp.addCookie(cookie1);</span><br><span class="line">        resp.addCookie(cookie2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563270904-fe45b7be-f376-4438-8004-1d5ac34acc71.png" alt="img"></p><p>servletB从请求中读取Cookie</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取请求中的cookie</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="comment">//迭代cookies数组</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != cookies &amp;&amp; cookies.length!= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                System.out.println(cookie.getName()+<span class="string">&quot;:&quot;</span>+cookie.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563278457-4aa652e0-ab62-46fd-965f-f27d7e9198e9.png" alt="img"></p><h3 id="1-2-2-Cookie的时效性"><a href="#1-2-2-Cookie的时效性" class="headerlink" title="1.2.2  Cookie的时效性"></a>1.2.2  Cookie的时效性</h3><p>默认情况下Cookie的有效期是一次会话范围内，我们可以通过cookie的setMaxAge()方法让Cookie持久化保存到浏览器上</p><ul><li><p>会话级Cookie </p></li><li><ul><li>服务器端并没有明确指定Cookie的存在时间</li></ul></li><li><ul><li>在浏览器端，Cookie数据存在于内存中</li></ul></li><li><ul><li>只要浏览器还开着，Cookie数据就一直都在</li></ul></li><li><ul><li>浏览器关闭，内存中的Cookie数据就会被释放</li></ul></li><li><p>持久化Cookie </p></li><li><ul><li>服务器端明确设置了Cookie的存在时间</li></ul></li><li><ul><li>在浏览器端，Cookie数据会被保存到硬盘上</li></ul></li><li><ul><li>Cookie在硬盘上存在的时间根据服务器端限定的时间来管控，不受浏览器关闭的影响</li></ul></li><li><ul><li>持久化Cookie到达了预设的时间会被释放</li></ul></li></ul><p>cookie.setMaxAge(int expiry)参数单位是秒，表示cookie的持久化时间，如果设置参数为0，表示将浏览器中保存的该cookie删除</p><ul><li>servletA设置一个Cookie为持久化cookie</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 创建Cookie</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;c1&quot;</span>,<span class="string">&quot;c1_message&quot;</span>);</span><br><span class="line">        <span class="comment">//持久化cookie</span></span><br><span class="line">        cookie1.setMaxAge(<span class="number">60</span>);</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie2</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;c2&quot;</span>,<span class="string">&quot;c2_message&quot;</span>);</span><br><span class="line">        <span class="comment">// 将cookie放入响应对象</span></span><br><span class="line">        resp.addCookie(cookie1);</span><br><span class="line">        resp.addCookie(cookie2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563296093-bc3f4f6a-c14e-4f25-99c0-d0a0bec24510.png" alt="img"></p><ul><li>servletB接收Cookie,浏览器中间发生一次重启再请求servletB测试</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取请求中的cookie</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="comment">//迭代cookies数组</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != cookies &amp;&amp; cookies.length!= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                System.out.println(cookie.getName()+<span class="string">&quot;:&quot;</span>+cookie.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563305840-5d2b14b9-b4d9-417e-9bd0-81397044c4bb.png" alt="img"></p><h3 id="1-2-3-Cookie的提交路径"><a href="#1-2-3-Cookie的提交路径" class="headerlink" title="1.2.3 Cookie的提交路径"></a>1.2.3 Cookie的提交路径</h3><p>访问互联网资源时不能每次都需要把所有Cookie带上。访问不同的资源时,可以携带不同的cookie,我们可以通过cookie的setPath(String path) 对cookie的路径进行设置</p><ul><li>从ServletA中获取cookie</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 创建Cookie</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;c1&quot;</span>,<span class="string">&quot;c1_message&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置cookie的提交路径</span></span><br><span class="line">        cookie1.setPath(<span class="string">&quot;/web03_war_exploded/servletB&quot;</span>);</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie2</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;c2&quot;</span>,<span class="string">&quot;c2_message&quot;</span>);</span><br><span class="line">        <span class="comment">// 将cookie放入响应对象</span></span><br><span class="line">        resp.addCookie(cookie1);</span><br><span class="line">        resp.addCookie(cookie2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563316592-b788dda6-63ee-431c-af0d-90efcb3696d4.png" alt="img"></p><ul><li>向ServletB请求时携带携带了 c1</li></ul><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563322634-e3729775-9620-472d-b083-e2fc99a7cfbe.png" alt="img"></p><ul><li>向其他资源请求时就不携带c1了</li></ul><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563329905-3fe45996-13c5-4829-828b-e98feaaf7ec2.png" alt="img"></p><h2 id="1-3-Session"><a href="#1-3-Session" class="headerlink" title="1.3 Session"></a>1.3 Session</h2><h3 id="1-3-1-HttpSession概述"><a href="#1-3-1-HttpSession概述" class="headerlink" title="1.3.1 HttpSession概述"></a>1.3.1 HttpSession概述</h3><p>HttpSession是一种保留更多信息在服务端的一种技术,服务器会为每一个客户端开辟一块内存空间,即session对象. 客户端在发送请求时,都可以使用自己的session. 这样服务端就可以通过session来记录某个客户端的状态了</p><ul><li><p>服务端在为客户端创建session时,会同时将session对象的id,即JSESSIONID以cookie的形式放入响应对象</p></li><li><p>后端创建完session后,客户端会收到一个特殊的cookie,叫做JSESSIONID</p></li><li><p>客户端下一次请求时携带JSESSIONID,后端收到后,根据JSESSIONID找到对应的session对象</p></li><li><p>通过该机制,服务端通过session就可以存储一些专门针对某个客户端的信息了</p></li><li><p>session也是域对象(后续详细讲解)</p></li></ul><p>原理图如下</p><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563341991-fe9fa71b-dd7e-4a0f-bdaf-e2924656392f.png" alt="img"></p><p>应用场景</p><ol><li><p>记录用户的登录状态<br>   用户登录后,将用户的账号等敏感信息存入session </p></li><li><p>记录用户操作的历史<br>   例如记录用户的访问痕迹,用户的购物车信息等临时性的信息</p></li></ol><h3 id="1-3-2-HttpSession的使用"><a href="#1-3-2-HttpSession的使用" class="headerlink" title="1.3.2 HttpSession的使用"></a>1.3.2 HttpSession的使用</h3><p>用户提交form表单到ServletA,携带用户名,ServletA获取session 将用户名存到Session,用户再请求其他任意Servlet,获取之间存储的用户</p><ul><li>定义表单页,提交用户名,提交后</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;servletA&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>定义ServletA,将用户名存入session</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求中的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取session对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">         <span class="comment">// 获取Session的ID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jSessionId</span> <span class="operator">=</span> session.getId();</span><br><span class="line">        System.out.println(jSessionId);</span><br><span class="line">        <span class="comment">// 判断session是不是新创建的session</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isNew</span> <span class="operator">=</span> session.isNew();</span><br><span class="line">        System.out.println(isNew);</span><br><span class="line">        <span class="comment">// 向session对象中存入数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>响应中收到了一个JSESSIONID的cookie</li></ul><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563361859-a0d0a6c4-33f8-4723-8ca1-3847948b833a.png" alt="img"></p><ul><li>定义其他Servlet,从session中读取用户名</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取session对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">         <span class="comment">// 获取Session的ID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jSessionId</span> <span class="operator">=</span> session.getId();</span><br><span class="line">        System.out.println(jSessionId);</span><br><span class="line">        <span class="comment">// 判断session是不是新创建的session</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isNew</span> <span class="operator">=</span> session.isNew();</span><br><span class="line">        System.out.println(isNew);</span><br><span class="line">        <span class="comment">// 从session中取出数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String)session.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>请求中携带了一个JSESSIONID的cookie</li></ul><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563370299-b0fec97a-d4c8-43c7-93b4-d33d657b0fac.png" alt="img"></p><p>getSession方法的处理逻辑</p><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563376284-969303bc-e524-4372-a563-3651e8697a21.png" alt="img"></p><h3 id="1-3-3-HttpSession时效性"><a href="#1-3-3-HttpSession时效性" class="headerlink" title="1.3.3 HttpSession时效性"></a>1.3.3 HttpSession时效性</h3><p>为什么要设置session的时效</p><ul><li><p>用户量很大之后，Session对象相应的也要创建很多。如果一味创建不释放，那么服务器端的内存迟早要被耗尽。</p></li><li><p>客户端关闭行为无法被服务端直接侦测,或者客户端较长时间不操作也经常出现,类似这些的情况,就需要对session的时限进行设置了</p></li></ul><p>默认的session最大闲置时间(两次使用同一个session中的间隔时间) 在tomcat&#x2F;conf&#x2F;web.xml配置为30分钟</p><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563388528-4794f1bb-8288-42a8-b342-9c83ba7c4d0d.png" alt="img"></p><p>我们可以自己在当前项目的web.xml对最大闲置时间进行重新设定</p><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563393826-d141272b-b12e-414b-af9c-31cc409801f4.png" alt="img"></p><p>也可以通过HttpSession的API 对最大闲置时间进行设定</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置最大闲置时间</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">60</span>);</span><br></pre></td></tr></table></figure><p>也可以直接让session失效</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接让session失效</span></span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure><h2 id="1-4-三大域对象"><a href="#1-4-三大域对象" class="headerlink" title="1.4 三大域对象"></a>1.4 三大域对象</h2><h3 id="1-4-1-域对象概述"><a href="#1-4-1-域对象概述" class="headerlink" title="1.4.1 域对象概述"></a>1.4.1 域对象概述</h3><p>域对象: 一些用于存储数据和传递数据的对象,传递数据不同的范围,我们称之为不同的域,不同的域对象代表不同的域,共享数据的范围也不同</p><ul><li><p>web项目中,我们一定要熟练使用的域对象分别是 请求域,会话域,应用域</p></li><li><p>请求域对象是HttpServletRequest ,传递数据的范围是一次请求之内及请求转发</p></li><li><p>会话域对象是HttpSession,传递数据的范围是一次会话之内,可以跨多个请求</p></li><li><p>应用域对象是ServletContext,传递数据的范围是本应用之内,可以跨多个会话</p></li></ul><p>生活举例: 热水器摆放位置不同,使用的范围就不同</p><ol><li><p>摆在张三工位下,就只有张三一个人能用</p></li><li><p>摆在办公室的公共区,办公室内的所有人都可以用</p></li><li><p>摆在楼层的走廊区,该楼层的所有人都可以用</p></li></ol><p>三大域对象的数据作用范围图解</p><ul><li>请求域</li></ul><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563412450-0b95013d-7bf7-4195-9bdb-ff60988bfcfd.png" alt="img"></p><ul><li>会话域</li></ul><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563417543-10d60a59-8c28-4bd9-b2ce-eeabf53d98d6.png" alt="img"></p><ul><li>应用域</li></ul><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563423089-b9a6a545-a078-4ff2-a409-ae2c7461a662.png" alt="img"></p><ul><li>所有域在一起</li></ul><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563428295-bbb20a78-028d-4e10-a721-a393bde86760.png" alt="img"></p><h3 id="1-4-2-域对象的使用"><a href="#1-4-2-域对象的使用" class="headerlink" title="1.4.2 域对象的使用"></a>1.4.2 域对象的使用</h3><p>域对象的API</p><table><thead><tr><th>API</th><th>功能</th></tr></thead><tbody><tr><td>void setAttribute(String name,String value)</td><td>向域对象中添加&#x2F;修改数据</td></tr><tr><td>Object getAttribute(String name);</td><td>从域对象中获取数据</td></tr><tr><td>removeAttribute(String name);</td><td>移除域对象中的数据</td></tr></tbody></table><p>API测试</p><ul><li>ServletA向三大域中放入数据</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 向请求域中放入数据</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;request&quot;</span>,<span class="string">&quot;request-message&quot;</span>);</span><br><span class="line">        <span class="comment">//req.getRequestDispatcher(&quot;servletB&quot;).forward(req,resp);</span></span><br><span class="line">        <span class="comment">// 向会话域中放入数据</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;session&quot;</span>,<span class="string">&quot;session-message&quot;</span>);</span><br><span class="line">        <span class="comment">// 向应用域中放入数据</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        application.setAttribute(<span class="string">&quot;application&quot;</span>,<span class="string">&quot;application-message&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ServletB从三大于中取出数据</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 从请求域中获取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">reqMessage</span> <span class="operator">=</span>(String)req.getAttribute(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">        System.out.println(reqMessage);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从会话域中获取数据</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sessionMessage</span> <span class="operator">=</span>(String)session.getAttribute(<span class="string">&quot;session&quot;</span>);</span><br><span class="line">        System.out.println(sessionMessage);</span><br><span class="line">        <span class="comment">// 从应用域中获取数据</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">applicationMessage</span> <span class="operator">=</span>(String)application.getAttribute(<span class="string">&quot;application&quot;</span>);</span><br><span class="line">        System.out.println(applicationMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>请求转发时,请求域可以传递数据<code>请求域内一般放本次请求业务有关的数据,如:查询到的所有的部门信息</code></p></li><li><p>同一个会话内,不用请求转发,会话域可以传递数据<code>会话域内一般放本次会话的客户端有关的数据,如:当前客户端登录的用户</code></p></li><li><p>同一个APP内,不同的客户端,应用域可以传递数据<code>应用域内一般放本程序应用有关的数据 如:Spring框架的IOC容器</code></p></li></ul><h1 id="二-过滤器"><a href="#二-过滤器" class="headerlink" title="二 过滤器"></a>二 过滤器</h1><h2 id="2-1-过滤器概述"><a href="#2-1-过滤器概述" class="headerlink" title="2.1 过滤器概述"></a>2.1 过滤器概述</h2><p>Filter,即过滤器,是JAVAEE技术规范之一,作用目标资源的请求进行过滤的一套技术规范,是Java Web项目中<code>最为实用的技术之一</code></p><ul><li><p>Filter接口定义了过滤器的开发规范,所有的过滤器都要实现该接口</p></li><li><p>Filter的工作位置是项目中所有目标资源之前,容器在创建HttpServletRequest和HttpServletResponse对象后,会先调用Filter的doFilter方法</p></li><li><p>Filter的doFilter方法可以控制请求是否继续,如果放行,则请求继续,如果拒绝,则请求到此为止,由过滤器本身做出响应</p></li><li><p>Filter不仅可以对请求做出过滤,也可以在目标资源做出响应前,对响应再次进行处理</p></li><li><p>Filter是GOF中责任链模式的典型案例</p></li><li><p>Filter的常用应用包括但不限于: 登录权限检查,解决网站乱码,过滤敏感字符,日志记录,性能分析… …</p></li></ul><p>生活举例: 公司前台,停车场安保,地铁验票闸机</p><ul><li><p>公司前台对来访人员进行审核,如果是游客则拒绝进入公司,如果是客户则放行 . 客户离开时提醒客户不要遗忘物品</p></li><li><p>停车场保安对来访车辆进行控制,如果没有车位拒绝进入,如果有车位,发放停车卡并放行,车辆离开时收取请车费</p></li><li><p>地铁验票闸机在人员进入之前检查票,没票拒绝进入,有票验票后放行,人员离开时同样验票</p></li></ul><p>过滤器开发中应用的场景</p><ul><li><p>日志的记录</p></li><li><p>性能的分析</p></li><li><p>乱码的处理</p></li><li><p>事务的控制</p></li><li><p>登录的控制</p></li><li><p>跨域的处理</p></li><li><p>… …</p></li></ul><p>过滤器工作位置图解</p><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563470364-a2274f6b-ff63-42af-9850-1e470155843c.png" alt="img"></p><p>Filter接口API</p><ul><li>源码</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakarta.servlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>API目标</li></ul><table><thead><tr><th>API</th><th>目标</th></tr></thead><tbody><tr><td>default public void init(FilterConfig filterConfig)</td><td>初始化方法,由容器调用并传入初始配置信息filterConfig对象</td></tr><tr><td>public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</td><td>过滤方法,核心方法,过滤请求,决定是否放行,响应之前的其他处理等都在该方法中</td></tr><tr><td>default public void destroy()</td><td>销毁方法,容器在回收过滤器对象之前调用的方法</td></tr></tbody></table><h2 id="2-2-过滤器使用"><a href="#2-2-过滤器使用" class="headerlink" title="2.2 过滤器使用"></a>2.2 过滤器使用</h2><p>目标:开发一个日志记录过滤器</p><ul><li><p>用户请求到达目标资源之前,记录用户的请求资源路径</p></li><li><p>响应之前记录本次请求目标资源运算的耗时</p></li><li><p>可以选择将日志记录进入文件,为了方便测试,这里将日志直接在控制台打印</p></li></ul><p>定义一个过滤器类,编写功能代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.filters;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingFilter</span>  <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">SimpleDateFormat</span> <span class="variable">dateFormat</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 参数父转子</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span>(HttpServletRequest)  servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span>  <span class="variable">response</span> <span class="operator">=</span>(HttpServletResponse)  servletResponse;</span><br><span class="line">        <span class="comment">// 拼接日志文本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> dateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">beforeLogging</span> <span class="operator">=</span>requestURI+<span class="string">&quot;在&quot;</span>+time+<span class="string">&quot;被请求了&quot;</span>;</span><br><span class="line">        <span class="comment">// 打印日志</span></span><br><span class="line">        System.out.println(beforeLogging);</span><br><span class="line">        <span class="comment">// 获取系统时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 放行请求</span></span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line">        <span class="comment">// 获取系统时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">t2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//  拼接日志文本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">afterLogging</span> <span class="operator">=</span>requestURI+<span class="string">&quot;在&quot;</span>+time+<span class="string">&quot;的请求耗时:&quot;</span>+(t2-t1)+<span class="string">&quot;毫秒&quot;</span>;</span><br><span class="line">        <span class="comment">// 打印日志</span></span><br><span class="line">        System.out.println(afterLogging);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>说明 </p></li><li><ul><li>doFilter方法中的请求和响应对象是以父接口的形式声明的,实际传入的实参就是HttpServletRequest和HttpServletResponse子接口级别的,可以安全强转</li></ul></li><li><ul><li>filterChain.doFilter(request,response); 这行代码的功能是放行请求,如果没有这一行代码,则请求到此为止</li></ul></li><li><ul><li>filterChain.doFilter(request,response);在放行时需要传入request和response,意味着请求和响应对象要继续传递给后续的资源,这里没有产生新的request和response对象</li></ul></li></ul><p>定义两个Servlet作为目标资源</p><ul><li>ServletA</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletA&quot;,name = &quot;servletAName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 处理器请求</span></span><br><span class="line">        System.out.println(<span class="string">&quot;servletA处理请求的方法,耗时10毫秒&quot;</span>);</span><br><span class="line">        <span class="comment">// 模拟处理请求耗时</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ServletB</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletB&quot;, name = &quot;servletBName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 处理器请求</span></span><br><span class="line">        System.out.println(<span class="string">&quot;servletB处理请求的方法,耗时15毫秒&quot;</span>);</span><br><span class="line">        <span class="comment">// 模拟处理请求耗时</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">15</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置过滤器以及过滤器的过滤范围</p><ul><li>web.xml</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置filter,并为filter起别名--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>loggingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filters.LoggingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--为别名对应的filter配置要过滤的目标资源--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        url - pattern 根据请求的资源路径 对指定的请求进行过滤</span></span><br><span class="line"><span class="comment">                /* 过滤全部资源</span></span><br><span class="line"><span class="comment">                /a/&quot;过滤以a开头的资源</span></span><br><span class="line"><span class="comment">                *.html 过滤以html为后缀的资源</span></span><br><span class="line"><span class="comment">                /servlet 对servlet请求进行过滤</span></span><br><span class="line"><span class="comment">         servlet - name 根据请求的servlet的别名 对指定的servlet资源进行过滤</span></span><br><span class="line"><span class="comment">            一个filter-mopping中可以同时存在多个url - patten和servlet-name</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>loggingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过映射路径确定过滤资源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletA<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过后缀名确定过滤资源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过servlet别名确定过滤资源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servletBName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>说明 </p></li><li><ul><li>filter-mapping标签中定义了过滤器对那些资源进行过滤</li></ul></li><li><ul><li>子标签url-pattern通过映射路径确定过滤范围</li></ul></li><li><ul><li><ul><li>&#x2F;servletA  精确匹配,表示对servletA资源的请求进行过滤</li></ul></li></ul></li><li><ul><li><ul><li>*.html 表示对以.action结尾的路径进行过滤</li></ul></li></ul></li><li><ul><li><ul><li>&#x2F;* 表示对所有资源进行过滤</li></ul></li></ul></li><li><ul><li><ul><li>一个filter-mapping下可以配置多个url-pattern</li></ul></li></ul></li><li><ul><li>子标签servlet-name通过servlet别名确定对那些servlet进行过滤</li></ul></li><li><ul><li><ul><li>使用该标签确定目标资源的前提是servlet已经起了别名</li></ul></li></ul></li><li><ul><li><ul><li>一个filter-mapping下可以定义多个servlet-name</li></ul></li></ul></li><li><ul><li><ul><li>一个filter-mapping下,servlet-name和url-pattern子标签可以同时存在</li></ul></li></ul></li></ul><p>过滤过程图解</p><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563509753-d56436ff-e011-40b5-8c6b-166f647569c6.png" alt="img"></p><h2 id="2-3-过滤器生命周期"><a href="#2-3-过滤器生命周期" class="headerlink" title="2.3 过滤器生命周期"></a>2.3 过滤器生命周期</h2><p>过滤器作为web项目的组件之一,和Servlet的生命周期类似,略有不同,没有servlet的load-on-startup的配置,默认就是系统启动立刻构造</p><table><thead><tr><th>阶段</th><th>对应方法</th><th>执行时机</th><th>执行次数</th></tr></thead><tbody><tr><td>创建对象</td><td>构造器</td><td>web应用启动时</td><td>1</td></tr><tr><td>初始化方法</td><td>void init(FilterConfig filterConfig)</td><td>构造完毕</td><td>1</td></tr><tr><td>过滤请求</td><td>void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</td><td>每次请求</td><td>多次</td></tr><tr><td>销毁</td><td>default void destroy()</td><td>web应用关闭时</td><td>1次</td></tr></tbody></table><p>测试代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeCycleFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LifeCycleFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LifeCycleFilter constructor method invoked&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LifeCycleFilter init method invoked&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LifeCycleFilter doFilter method invoked&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LifeCycleFilter destory method invoked&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-过滤器链的使用"><a href="#2-4-过滤器链的使用" class="headerlink" title="2.4 过滤器链的使用"></a>2.4 过滤器链的使用</h2><p>一个web项目中,可以同时定义多个过滤器,多个过滤器对同一个资源进行过滤时,工作位置有先后,整体形成一个工作链,称之为过滤器链</p><ul><li><p>过滤器链中的过滤器的顺序由filter-mapping顺序决定</p></li><li><p>每个过滤器过滤的范围不同,针对同一个资源来说,过滤器链中的过滤器个数可能是不同的</p></li><li><p>如果某个Filter是使用ServletName进行匹配规则的配置，那么这个Filter执行的优先级要更低</p></li></ul><p>图解过滤器链</p><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563532371-2149c9bf-8173-46eb-8299-0e9ab61b765c.png" alt="img"></p><p>过滤器链功能测试</p><ul><li><p>定义三个过滤器,对目标资源Servlet的请求进行过滤 </p></li><li><p>目标Servlet资源代码</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servletC&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletC</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servletC service method  invoked&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>三个过滤器代码</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter1</span>  <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter1 before chain.doFilter code invoked&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;filter1 after  chain.doFilter code invoked&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter2</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter2 before chain.doFilter code invoked&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;filter2 after  chain.doFilter code invoked&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter3</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter3 before chain.doFilter code invoked&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;filter3 after  chain.doFilter code invoked&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>过滤器配置代码</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filters.Filter1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filters.Filter2<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter3<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filters.Filter3<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--filter-mapping的顺序决定了过滤器的工作顺序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletC<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletC<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter3<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletC<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>工作流程图解</p><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563554887-6655575e-46e5-4281-8ad5-577366bca285.png" alt="img"></p><h2 id="2-5-注解方式配置过滤器"><a href="#2-5-注解方式配置过滤器" class="headerlink" title="2.5 注解方式配置过滤器"></a>2.5 注解方式配置过滤器</h2><p>@WebFilter注解的使用</p><ul><li>源码</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakarta.servlet.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.DispatcherType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebFilter &#123;</span><br><span class="line">    String <span class="title function_">description</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">displayName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">filterName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String[] servletNames() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    DispatcherType[] dispatcherTypes() <span class="keyword">default</span> &#123;DispatcherType.REQUEST&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个比较完整的Filter的XML配置</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置filter,并为filter起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>loggingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filters.LoggingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置filter的初始参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>dateTimePattern<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>yyyy-MM-dd HH:mm:ss<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--为别名对应的filter配置要过滤的目标资源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>loggingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过映射路径确定过滤资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletA<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过后缀名确定过滤资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过servlet别名确定过滤资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servletBName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将xml配置转换成注解方式实现</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.filters;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebInitParam;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(</span></span><br><span class="line"><span class="meta">        filterName = &quot;loggingFilter&quot;,</span></span><br><span class="line"><span class="meta">        initParams = &#123;@WebInitParam(name=&quot;dateTimePattern&quot;,value=&quot;yyyy-MM-dd HH:mm:ss&quot;)&#125;,</span></span><br><span class="line"><span class="meta">        urlPatterns = &#123;&quot;/servletA&quot;,&quot;*.html&quot;&#125;,</span></span><br><span class="line"><span class="meta">        servletNames = &#123;&quot;servletBName&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingFilter</span>  <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SimpleDateFormat dateFormat ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*init初始化方法,通过filterConfig获取初始化参数</span></span><br><span class="line"><span class="comment">    * init方法中,可以用于定义一些其他初始化功能代码</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// 获取初始参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dateTimePattern</span> <span class="operator">=</span> filterConfig.getInitParameter(<span class="string">&quot;dateTimePattern&quot;</span>);</span><br><span class="line">        <span class="comment">// 初始化成员变量</span></span><br><span class="line">        dateFormat=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(dateTimePattern);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 参数父转子</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span>(HttpServletRequest)  servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span>  <span class="variable">response</span> <span class="operator">=</span>(HttpServletResponse)  servletResponse;</span><br><span class="line">        <span class="comment">// 拼接日志文本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> dateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">beforeLogging</span> <span class="operator">=</span>requestURI+<span class="string">&quot;在&quot;</span>+time+<span class="string">&quot;被请求了&quot;</span>;</span><br><span class="line">        <span class="comment">// 打印日志</span></span><br><span class="line">        System.out.println(beforeLogging);</span><br><span class="line">        <span class="comment">// 获取系统时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 放行请求</span></span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line">        <span class="comment">// 获取系统时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">t2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">String</span> <span class="variable">afterLogging</span> <span class="operator">=</span>requestURI+<span class="string">&quot;在&quot;</span>+time+<span class="string">&quot;的请求耗时:&quot;</span>+(t2-t1)+<span class="string">&quot;毫秒&quot;</span>;</span><br><span class="line">        <span class="comment">// 打印日志</span></span><br><span class="line">        System.out.println(afterLogging);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-监听器"><a href="#三-监听器" class="headerlink" title="三 监听器"></a>三 监听器</h1><h2 id="3-1-监听器概述"><a href="#3-1-监听器概述" class="headerlink" title="3.1 监听器概述"></a>3.1 监听器概述</h2><p>监听器：专门用于对域对象对象身上发生的事件或状态改变进行监听和相应处理的对象</p><ul><li><p>监听器是GOF设计模式中,观察者模式的典型案例 </p></li><li><p>观察者模式: 当被观察的对象发生某些改变时, 观察者自动采取对应的行动的一种设计模式 </p></li><li><p>监听器使用的感受类似JS中的事件,被观察的对象发生某些情况时,自动触发代码的执行 </p></li><li><p>监听器并不监听web项目中的所有组件,仅仅是对三大域对象做相关的事件监听</p></li></ul><p>监听器的分类</p><ul><li><p>web中定义八个监听器接口作为监听器的规范,这八个接口按照不同的标准可以形成不同的分类 </p></li><li><p>按监听的对象划分 </p></li><li><ul><li>application域监听器 ServletContextListener  ServletContextAttributeListener</li></ul></li><li><ul><li>session域监听器 HttpSessionListener  HttpSessionAttributeListener  HttpSessionBindingListener  HttpSessionActivationListener</li></ul></li><li><ul><li>request域监听器 ServletRequestListener  ServletRequestAttributeListener</li></ul></li><li><p>按监听的事件分 </p></li><li><ul><li>域对象的创建和销毁监听器 ServletContextListener  HttpSessionListener  ServletRequestListener</li></ul></li><li><ul><li>域对象数据增删改事件监听器 ServletContextAttributeListener  HttpSessionAttributeListener  ServletRequestAttributeListener</li></ul></li><li><ul><li>其他监听器  HttpSessionBindingListener  HttpSessionActivationListener</li></ul></li></ul><h2 id="3-2-监听器的六个主要接口"><a href="#3-2-监听器的六个主要接口" class="headerlink" title="3.2 监听器的六个主要接口"></a>3.2 监听器的六个主要接口</h2><h3 id="3-2-1-application域监听器"><a href="#3-2-1-application域监听器" class="headerlink" title="3.2.1 application域监听器"></a>3.2.1 application域监听器</h3><p>ServletContextListener  监听ServletContext对象的创建与销毁</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>contextInitialized(ServletContextEvent sce)</td><td>ServletContext创建时调用</td></tr><tr><td>contextDestroyed(ServletContextEvent sce)</td><td>ServletContext销毁时调用</td></tr></tbody></table><ul><li>ServletContextEvent对象代表从ServletContext对象身上捕获到的事件，通过这个事件对象我们可以获取到ServletContext对象。</li></ul><p>ServletContextAttributeListener 监听ServletContext中属性的添加、移除和修改</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>attributeAdded(ServletContextAttributeEvent scab)</td><td>向ServletContext中添加属性时调用</td></tr><tr><td>attributeRemoved(ServletContextAttributeEvent scab)</td><td>从ServletContext中移除属性时调用</td></tr><tr><td>attributeReplaced(ServletContextAttributeEvent scab)</td><td>当ServletContext中的属性被修改时调用</td></tr></tbody></table><ul><li>ServletContextAttributeEvent对象代表属性变化事件，它包含的方法如下：</li></ul><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取修改或添加的属性名</td></tr><tr><td>getValue()</td><td>获取被修改或添加的属性值</td></tr><tr><td>getServletContext()</td><td>获取ServletContext对象</td></tr></tbody></table><p>测试代码</p><ul><li>定义监听器</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> , ServletContextAttributeListener &#123;</span><br><span class="line">    <span class="comment">// 监听初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> sce.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;application&quot;</span>+application.hashCode()+<span class="string">&quot; initialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> sce.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;application&quot;</span>+application.hashCode()+<span class="string">&quot; destroyed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听数据增加</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(ServletContextAttributeEvent scae)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scae.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> scae.getValue();</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> scae.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;application&quot;</span>+application.hashCode()+<span class="string">&quot; add:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听数据移除</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeRemoved</span><span class="params">(ServletContextAttributeEvent scae)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scae.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> scae.getValue();</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> scae.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;application&quot;</span>+application.hashCode()+<span class="string">&quot; remove:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听数据修改</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeReplaced</span><span class="params">(ServletContextAttributeEvent scae)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scae.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> scae.getValue();</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> scae.getServletContext();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">newValue</span> <span class="operator">=</span> application.getAttribute(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;application&quot;</span>+application.hashCode()+<span class="string">&quot; change:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value+<span class="string">&quot; to &quot;</span>+newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义触发监听器的代码</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ServletA用于向application域中放入数据</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletA&quot;,name = &quot;servletAName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 向application域中放入数据</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        application.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        application.setAttribute(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ServletB用于向application域中修改和移除数据</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletB&quot;, name = &quot;servletBName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">appliation</span>  <span class="operator">=</span> getServletContext();</span><br><span class="line">        <span class="comment">//  修改application域中的数据</span></span><br><span class="line">        appliation.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        <span class="comment">//  删除application域中的数据</span></span><br><span class="line">        appliation.removeAttribute(<span class="string">&quot;k2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-session域监听器"><a href="#3-2-2-session域监听器" class="headerlink" title="3.2.2 session域监听器"></a>3.2.2 session域监听器</h3><p>HttpSessionListener  监听HttpSession对象的创建与销毁</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>sessionCreated(HttpSessionEvent hse)</td><td>HttpSession对象创建时调用</td></tr><tr><td>sessionDestroyed(HttpSessionEvent hse)</td><td>HttpSession对象销毁时调用</td></tr></tbody></table><ul><li>HttpSessionEvent对象代表从HttpSession对象身上捕获到的事件，通过这个事件对象我们可以获取到触发事件的HttpSession对象。</li></ul><p>HttpSessionAttributeListener 监听HttpSession中属性的添加、移除和修改</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>attributeAdded(HttpSessionBindingEvent se)</td><td>向HttpSession中添加属性时调用</td></tr><tr><td>attributeRemoved(HttpSessionBindingEvent se)</td><td>从HttpSession中移除属性时调用</td></tr><tr><td>attributeReplaced(HttpSessionBindingEvent se)</td><td>当HttpSession中的属性被修改时调用</td></tr></tbody></table><ul><li>HttpSessionBindingEvent对象代表属性变化事件，它包含的方法如下：</li></ul><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取修改或添加的属性名</td></tr><tr><td>getValue()</td><td>获取被修改或添加的属性值</td></tr><tr><td>getSession()</td><td>获取触发事件的HttpSession对象</td></tr></tbody></table><p>测试代码</p><ul><li>定义监听器</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span>, HttpSessionAttributeListener &#123;</span><br><span class="line">    <span class="comment">// 监听session创建</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;session&quot;</span>+session.hashCode()+<span class="string">&quot; created&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听session销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;session&quot;</span>+session.hashCode()+<span class="string">&quot; destroyed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听数据增加</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(HttpSessionBindingEvent se)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> se.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> se.getValue();</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;session&quot;</span>+session.hashCode()+<span class="string">&quot; add:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听数据移除</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeRemoved</span><span class="params">(HttpSessionBindingEvent se)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> se.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> se.getValue();</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;session&quot;</span>+session.hashCode()+<span class="string">&quot; remove:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听数据修改</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeReplaced</span><span class="params">(HttpSessionBindingEvent se)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> se.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> se.getValue();</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">newValue</span> <span class="operator">=</span> session.getAttribute(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;session&quot;</span>+session.hashCode()+<span class="string">&quot; change:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value+<span class="string">&quot; to &quot;</span>+newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义触发监听器的代码</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// servletA用于创建session并向session中放数据</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletA&quot;,name = &quot;servletAName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 创建session,并向session中放入数据</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"></span><br><span class="line">        session.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        session.setAttribute(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// servletB用于修改删除session中的数据并手动让session不可用</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletB&quot;, name = &quot;servletBName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">//  修改session域中的数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        <span class="comment">//  删除session域中的数据</span></span><br><span class="line">        session.removeAttribute(<span class="string">&quot;k2&quot;</span>);</span><br><span class="line">        <span class="comment">// 手动让session不可用</span></span><br><span class="line">        session.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-request域监听器"><a href="#3-2-3-request域监听器" class="headerlink" title="3.2.3 request域监听器"></a>3.2.3 request域监听器</h3><p>ServletRequestListener 监听ServletRequest对象的创建与销毁</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>requestInitialized(ServletRequestEvent sre)</td><td>ServletRequest对象创建时调用</td></tr><tr><td>requestDestroyed(ServletRequestEvent sre)</td><td>ServletRequest对象销毁时调用</td></tr></tbody></table><ul><li>ServletRequestEvent对象代表从HttpServletRequest对象身上捕获到的事件，通过这个事件对象我们可以获取到触发事件的HttpServletRequest对象。另外还有一个方法可以获取到当前Web应用的ServletContext对象。</li></ul><p>ServletRequestAttributeListener 监听ServletRequest中属性的添加、移除和修改</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>attributeAdded(ServletRequestAttributeEvent srae)</td><td>向ServletRequest中添加属性时调用</td></tr><tr><td>attributeRemoved(ServletRequestAttributeEvent srae)</td><td>从ServletRequest中移除属性时调用</td></tr><tr><td>attributeReplaced(ServletRequestAttributeEvent srae)</td><td>当ServletRequest中的属性被修改时调用</td></tr></tbody></table><ul><li>ServletRequestAttributeEvent对象代表属性变化事件，它包含的方法如下：</li></ul><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取修改或添加的属性名</td></tr><tr><td>getValue()</td><td>获取被修改或添加的属性值</td></tr><tr><td>getServletRequest ()</td><td>获取触发事件的ServletRequest对象</td></tr></tbody></table><ul><li>定义监听器</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> , ServletRequestAttributeListener &#123;</span><br><span class="line">    <span class="comment">// 监听初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> sre.getServletRequest();</span><br><span class="line">        System.out.println(<span class="string">&quot;request&quot;</span>+request.hashCode()+<span class="string">&quot; initialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> sre.getServletRequest();</span><br><span class="line">        System.out.println(<span class="string">&quot;request&quot;</span>+request.hashCode()+<span class="string">&quot; destoryed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听数据增加</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(ServletRequestAttributeEvent srae)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> srae.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> srae.getValue();</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> srae.getServletRequest();</span><br><span class="line">        System.out.println(<span class="string">&quot;request&quot;</span>+request.hashCode()+<span class="string">&quot; add:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  监听数据移除</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeRemoved</span><span class="params">(ServletRequestAttributeEvent srae)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> srae.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> srae.getValue();</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> srae.getServletRequest();</span><br><span class="line">        System.out.println(<span class="string">&quot;request&quot;</span>+request.hashCode()+<span class="string">&quot; remove:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听数据修改</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeReplaced</span><span class="params">(ServletRequestAttributeEvent srae)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> srae.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> srae.getValue();</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> srae.getServletRequest();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">newValue</span> <span class="operator">=</span> request.getAttribute(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;request&quot;</span>+request.hashCode()+<span class="string">&quot; change:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value+<span class="string">&quot; to &quot;</span>+newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义触发监听器的代码</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  servletA向请求域中放数据</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletA&quot;,name = &quot;servletAName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 向request中增加数据</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;v2&quot;</span>);</span><br><span class="line">        <span class="comment">// 请求转发</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;servletB&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// servletB修改删除域中的数据</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletB&quot;, name = &quot;servletBName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//  修改request域中的数据</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        <span class="comment">//  删除session域中的数据</span></span><br><span class="line">        req.removeAttribute(<span class="string">&quot;k2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-session域的两个特殊监听器"><a href="#3-3-session域的两个特殊监听器" class="headerlink" title="3.3 session域的两个特殊监听器"></a>3.3 session域的两个特殊监听器</h2><h3 id="3-3-3-session绑定监听器"><a href="#3-3-3-session绑定监听器" class="headerlink" title="3.3.3  session绑定监听器"></a>3.3.3  session绑定监听器</h3><p>HttpSessionBindingListener 监听当前监听器对象在Session域中的增加与移除</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>valueBound(HttpSessionBindingEvent event)</td><td>该类的实例被放到Session域中时调用</td></tr><tr><td>valueUnbound(HttpSessionBindingEvent event)</td><td>该类的实例从Session中移除时调用</td></tr></tbody></table><ul><li>HttpSessionBindingEvent对象代表属性变化事件，它包含的方法如下：</li></ul><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取当前事件涉及的属性名</td></tr><tr><td>getValue()</td><td>获取当前事件涉及的属性值</td></tr><tr><td>getSession()</td><td>获取触发事件的HttpSession对象</td></tr></tbody></table><p>测试代码</p><ul><li>定义监听器</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionBindingEvent;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionBindingListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySessionBindingListener</span>  <span class="keyword">implements</span> <span class="title class_">HttpSessionBindingListener</span> &#123;</span><br><span class="line">    <span class="comment">//  监听绑定</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">valueBound</span><span class="params">(HttpSessionBindingEvent event)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> event.getSession();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> event.getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;MySessionBindingListener&quot;</span>+<span class="built_in">this</span>.hashCode()+<span class="string">&quot; binding into session&quot;</span>+session.hashCode()+<span class="string">&quot; with name &quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听解除绑定</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">valueUnbound</span><span class="params">(HttpSessionBindingEvent event)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> event.getSession();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> event.getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;MySessionBindingListener&quot;</span>+<span class="built_in">this</span>.hashCode()+<span class="string">&quot; unbond outof session&quot;</span>+session.hashCode()+<span class="string">&quot; with name &quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义触发监听器的代码</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletA&quot;,name = &quot;servletAName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">// 绑定监听器</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;bindingListener&quot;</span>,<span class="keyword">new</span> <span class="title class_">MySessionBindingListener</span>());</span><br><span class="line">        <span class="comment">// 解除绑定监听器</span></span><br><span class="line">        session.removeAttribute(<span class="string">&quot;bindingListener&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-钝化活化监听器"><a href="#3-3-4-钝化活化监听器" class="headerlink" title="3.3.4 钝化活化监听器"></a>3.3.4 钝化活化监听器</h3><p>HttpSessionActivationListener  监听某个对象在Session中的序列化与反序列化。</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>sessionWillPassivate(HttpSessionEvent se)</td><td>该类实例和Session一起钝化到硬盘时调用</td></tr><tr><td>sessionDidActivate(HttpSessionEvent se)</td><td>该类实例和Session一起活化到内存时调用</td></tr></tbody></table><ul><li>HttpSessionEvent对象代表事件对象，通过getSession()方法获取事件涉及的HttpSession对象。</li></ul><p>什么是钝化活化</p><ul><li><p>session对象在服务端是以对象的形式存储于内存的,session过多,服务器的内存也是吃不消的</p></li><li><p>而且一旦服务器发生重启,所有的session对象都将被清除,也就意味着session中存储的不同客户端的登录状态丢失</p></li><li><p>为了分摊内存 压力并且为了保证session重启不丢失,我们可以设置将session进行钝化处理</p></li><li><p>在关闭服务器前或者到达了设定时间时,对session进行序列化到磁盘,这种情况叫做session的钝化</p></li><li><p>在服务器启动后或者再次获取某个session时,将磁盘上的session进行反序列化到内存,这种情况叫做session的活化</p></li></ul><p>如何配置钝化活化</p><ul><li>在web目录下,添加 META-INF下创建Context.xml</li></ul><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563692575-88ddc12e-b968-4850-b4c8-aabd836994f8.png" alt="img"></p><ul><li>文件中配置钝化</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.session.PersistentManager&quot;</span> <span class="attr">maxIdleSwap</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Store</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.session.FileStore&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;d:\mysession&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Store</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Manager</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>请求servletA,获得session,并存入数据,然后重启服务器</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletA&quot;,name = &quot;servletAName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">// 添加数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>请求servletB获取session,获取重启前存入的数据</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletB&quot;, name = &quot;servletBName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">v1</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;k1&quot;</span>);</span><br><span class="line">        System.out.println(v1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何监听钝化活化</p><ul><li>定义监听器</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionActivationListener;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivationListener</span>  <span class="keyword">implements</span> <span class="title class_">HttpSessionActivationListener</span>, Serializable &#123;</span><br><span class="line">    <span class="comment">//  监听钝化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionWillPassivate</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;session with JSESSIONID &quot;</span>+ session.getId()+<span class="string">&quot; will passivate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  监听活化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDidActivate</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;session with JSESSIONID &quot;</span>+ session.getId()+<span class="string">&quot; did activate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义触发监听器的代码</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletA&quot;,name = &quot;servletAName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">// 添加数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        <span class="comment">// 添加钝化活化监听器</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;activationListener&quot;</span>,<span class="keyword">new</span> <span class="title class_">ActivationListener</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-案例开发-日程管理-第三期"><a href="#四-案例开发-日程管理-第三期" class="headerlink" title="四 案例开发-日程管理-第三期"></a>四 案例开发-日程管理-第三期</h1><h2 id="4-1-过滤器控制登录校验"><a href="#4-1-过滤器控制登录校验" class="headerlink" title="4.1 过滤器控制登录校验"></a>4.1 过滤器控制登录校验</h2><p>需求说明:未登录状态下不允许访问showShedule.html和SysScheduleController相关增删改处理,重定向到login.html,登录成功后可以自由访问</p><ul><li>开发登录过滤器,对指定资源的请求进行过滤</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &#123;&quot;/showSchedule.html&quot;,&quot;/schedule/*&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFilter</span>  <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span>(HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span>(HttpServletResponse) servletResponse;</span><br><span class="line">       <span class="type">SysUser</span> <span class="variable">user</span> <span class="operator">=</span>  (SysUser)request.getSession().getAttribute(<span class="string">&quot;sysUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != user)&#123;</span><br><span class="line">            <span class="comment">// session中如果存在登录的用户 代表用户登录过,则放行</span></span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//用户未登录,重定向到登录页</span></span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改用户登录请求的login方法,登录成功时,将用户信息存入session</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用户登录的业务接口</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">// 接收用户请求参数</span></span><br><span class="line">       <span class="comment">// 获取要注册的用户名密码</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">userPwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userPwd&quot;</span>);</span><br><span class="line">       <span class="comment">// 调用服务层方法,根据用户名查询数据库中是否有一个用户</span></span><br><span class="line">       <span class="type">SysUser</span> <span class="variable">loginUser</span> <span class="operator">=</span>userService.findByUsername(username);</span><br><span class="line">       <span class="keyword">if</span>(<span class="literal">null</span> == loginUser)&#123;</span><br><span class="line">           <span class="comment">// 没有根据用户名找到用户,说明用户名有误</span></span><br><span class="line">           resp.sendRedirect(<span class="string">&quot;/loginUsernameError.html&quot;</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(! loginUser.getUserPwd().equals(MD5Util.encrypt(userPwd)))&#123;</span><br><span class="line">           <span class="comment">// 用户密码有误,</span></span><br><span class="line">           resp.sendRedirect(<span class="string">&quot;/loginUserPwdError.html&quot;</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="comment">// 登录成功,将用户信息存入session</span></span><br><span class="line">           req.getSession().setAttribute(<span class="string">&quot;sysUser&quot;</span>,loginUser);</span><br><span class="line">           <span class="comment">// 登录成功,重定向到日程展示页</span></span><br><span class="line">           resp.sendRedirect(<span class="string">&quot;/showSchedule.html&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="五-Ajax"><a href="#五-Ajax" class="headerlink" title="五 Ajax"></a>五 Ajax</h1><h2 id="5-1-什么是ajax"><a href="#5-1-什么是ajax" class="headerlink" title="5.1 什么是ajax"></a>5.1 什么是ajax</h2><ul><li><p>AJAX &#x3D; Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。 </p></li><li><p>AJAX 不是新的编程语言，而是一种使用现有标准的新方法。 </p></li><li><p>AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。 </p></li><li><p>AJAX 不需要任何浏览器插件，但需要用户允许 JavaScript 在浏览器上执行。 </p></li><li><p>XMLHttpRequest 只是实现 Ajax 的一种方式。</p></li></ul><p><strong>ajax工作原理：</strong></p><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563734750-64ea9862-f759-4bde-b4f5-0ac88e710001.png" alt="img"></p><ul><li><p>简单来说,我们之前发的请求通过类似  form表单标签,a标签 这种方式,现在通过 运行js代码动态决定什么时候发送什么样的请求</p></li><li><p>通过运行JS代码发送的请求浏览器可以不用跳转页面 ,我们可以在JS代码中决定是否要跳转页面</p></li><li><p>通过运行JS代码发送的请求,接收到返回结果后,我们可以将结果通过dom编程渲染到页面的某些元素上,实现局部更新</p></li></ul><h2 id="5-2-如何实现ajax请求"><a href="#5-2-如何实现ajax请求" class="headerlink" title="5.2 如何实现ajax请求"></a>5.2 如何实现ajax请求</h2><p>原生<strong>javascript方式进行ajax(了解):</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">getMessage</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//实例化一个XMLHttpRequest</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//设置XMLHttpRequest对象的回调函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//request.readStote 1 2 3 4 前面3个不用管 如果成功了一定会变成4</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//request.stotus  响应状态码 响应行状态码</span></span></span><br><span class="line"><span class="language-javascript">            request.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(request.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; request.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//接收响应结果，处理结果</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//request.responseText 后端响应回来的响应体中的数据</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">responseText</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//将信息放到指定位置</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> inputEle = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;message&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                    inputEle.<span class="property">value</span> = request.<span class="property">responseText</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//设置发送请求的方式和请求的路径</span></span></span><br><span class="line"><span class="language-javascript">            request.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/hello?username=zhangsan&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//发送请求</span></span></span><br><span class="line"><span class="language-javascript">            request.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getMessage()&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="六-案例开发-日程管理-第四期"><a href="#六-案例开发-日程管理-第四期" class="headerlink" title="六 案例开发-日程管理-第四期"></a>六 案例开发-日程管理-第四期</h1><h2 id="6-1-注册提交前校验用户名是否占用功能"><a href="#6-1-注册提交前校验用户名是否占用功能" class="headerlink" title="6.1 注册提交前校验用户名是否占用功能"></a>6.1 注册提交前校验用户名是否占用功能</h2><p>客户端代码编写处理</p><ul><li>regist.html页面代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.ht</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">5px</span> solid cadetblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.ltr</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid  powderblue;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.ipt</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.btn1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.msg</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: gold;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.buttonContainer</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">checkUsername</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> usernameReg = <span class="regexp">/^[a-zA-Z0-9]&#123;5,10&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> usernameInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;usernameInput&quot;</span>)  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> username = usernameInput.<span class="property">value</span>  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> usernameMsg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;usernameMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(!usernameReg.<span class="title function_">test</span>(username))&#123;</span></span><br><span class="line"><span class="language-javascript">          usernameMsg.<span class="property">innerText</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//格式正确，通过之后，检测名字是否被占用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//设置回调函数 设置响应回来的信息如何处理</span></span></span><br><span class="line"><span class="language-javascript">        request.<span class="property">onreadystatechange</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span>(request.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; request.<span class="property">status</span> == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            usernameMsg.<span class="property">innerText</span> = request.<span class="property">responseText</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//设置请求方式和请求的资源路径</span></span></span><br><span class="line"><span class="language-javascript">        request.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/user/checkUsernameUsed?username=&quot;</span>+username)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//发送请求</span></span></span><br><span class="line"><span class="language-javascript">        request.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">checkUserPwd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> userPwdReg = <span class="regexp">/^\d&#123;6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> userPwdInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userPwdInput&quot;</span>)  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> userPwd = userPwdInput.<span class="property">value</span>  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> userPwdMsg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userPwdMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(!userPwdReg.<span class="title function_">test</span>(userPwd))&#123;</span></span><br><span class="line"><span class="language-javascript">          userPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125; </span></span><br><span class="line"><span class="language-javascript">        userPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">true</span> </span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">checkReUserPwd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> userPwdReg = <span class="regexp">/^\d&#123;6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 再次输入的密码的格式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> reUserPwdInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;reUserPwdInput&quot;</span>)  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> reUserPwd = reUserPwdInput.<span class="property">value</span> </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> reUserPwdMsg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;reUserPwdMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(!userPwdReg.<span class="title function_">test</span>(reUserPwd))&#123;</span></span><br><span class="line"><span class="language-javascript">          reUserPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125; </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获得上次密码,对比两次密码是否一致</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> userPwdInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userPwdInput&quot;</span>)  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> userPwd = userPwdInput.<span class="property">value</span>  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(reUserPwd != userPwd)&#123;</span></span><br><span class="line"><span class="language-javascript">          reUserPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;两次密码不一致&quot;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125; </span></span><br><span class="line"><span class="language-javascript">        reUserPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="literal">true</span> </span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkForm</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> flag1 = <span class="title function_">checkUsername</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> flag2 = <span class="title function_">checkUserPwd</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> flag3 = <span class="title function_">checkReUserPwd</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> flag1 &amp;&amp; flag2 &amp;&amp; flag3</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>欢迎使用日程管理系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>请注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/user/regist&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return checkForm()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入账号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">id</span>=<span class="string">&quot;usernameInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;checkUsername()&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;usernameMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userPwdInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;checkUserPwd()&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;userPwdMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reUserPwdInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;checkReUserPwd()&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;reUserPwdMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;buttonContainer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>  <span class="attr">href</span>=<span class="string">&quot;login.html&quot;</span>&gt;</span>去登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.ht</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">5px</span> solid cadetblue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.ltr</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid  powderblue;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.ipt</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.btn1</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.msg</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: gold;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.buttonContainer</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">checkUsername</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> usernameReg = <span class="regexp">/^[a-zA-Z0-9]&#123;5,10&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> usernameInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;usernameInput&quot;</span>)  </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> username = usernameInput.<span class="property">value</span>  </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> usernameMsg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;usernameMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(!usernameReg.<span class="title function_">test</span>(username))&#123;</span></span><br><span class="line"><span class="language-javascript">        usernameMsg.<span class="property">innerText</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            * 1响应乱码问题</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            * 2响应信息格式不规范 处理方式不规范</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            *   后端响应回来的信息应当有一个统一的格式 前后端共同遵守</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            *   响应一个JSON文件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            *   &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            *       &quot;code&quot;:100/200/300  业务状态码  本次请求是否成功</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    &quot;message&quot;:业务状态码 补充说明</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    &quot;date&#123;&#125;&quot; 本次响应的数据 成功/不成功</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            *   &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            * 3 效验不通过 无法阻止表单提交的问题 未来用vue axios 结合premise处理</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            *</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            *</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            * */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//格式正确，通过之后，检测名字是否被占用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//设置回调函数 设置响应回来的信息如何处理</span></span></span><br><span class="line"><span class="language-javascript">    request.<span class="property">onreadystatechange</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(request.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; request.<span class="property">status</span> == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(request.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (result.<span class="property">code</span> == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                usernameMsg.<span class="property">innerText</span>=<span class="string">&quot;用户名可用&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result.<span class="property">code</span> == <span class="number">505</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                usernameMsg.<span class="property">innerText</span>=<span class="string">&quot;用户名被占用&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//设置请求方式和请求的资源路径</span></span></span><br><span class="line"><span class="language-javascript">    request.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/user/checkUsernameUsed?username=&quot;</span>+username)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//发送请求</span></span></span><br><span class="line"><span class="language-javascript">    request.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">checkUserPwd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> userPwdReg = <span class="regexp">/^\d&#123;6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> userPwdInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userPwdInput&quot;</span>)  </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> userPwd = userPwdInput.<span class="property">value</span>  </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> userPwdMsg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userPwdMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(!userPwdReg.<span class="title function_">test</span>(userPwd))&#123;</span></span><br><span class="line"><span class="language-javascript">        userPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125; </span></span><br><span class="line"><span class="language-javascript">    userPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="literal">true</span> </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">checkReUserPwd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> userPwdReg = <span class="regexp">/^\d&#123;6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 再次输入的密码的格式</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> reUserPwdInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;reUserPwdInput&quot;</span>)  </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> reUserPwd = reUserPwdInput.<span class="property">value</span> </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> reUserPwdMsg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;reUserPwdMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!userPwdReg.<span class="title function_">test</span>(reUserPwd))&#123;</span></span><br><span class="line"><span class="language-javascript">                reUserPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125; </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获得上次密码,对比两次密码是否一致</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> userPwdInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userPwdInput&quot;</span>)  </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> userPwd = userPwdInput.<span class="property">value</span>  </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(reUserPwd != userPwd)&#123;</span></span><br><span class="line"><span class="language-javascript">                reUserPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;两次密码不一致&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125; </span></span><br><span class="line"><span class="language-javascript">            reUserPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span> </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkForm</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> flag1 = <span class="title function_">checkUsername</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> flag2 = <span class="title function_">checkUserPwd</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> flag3 = <span class="title function_">checkReUserPwd</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> flag1 &amp;&amp; flag2 &amp;&amp; flag3</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>欢迎使用日程管理系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>请注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/user/regist&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return checkForm()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入账号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">id</span>=<span class="string">&quot;usernameInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;checkUsername()&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;usernameMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userPwdInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;checkUserPwd()&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;userPwdMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reUserPwdInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;checkReUserPwd()&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;reUserPwdMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;buttonContainer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>  <span class="attr">href</span>=<span class="string">&quot;login.html&quot;</span>&gt;</span>去登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ht</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ltr</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid  powderblue;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ipt</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.msg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: gold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.buttonContainer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 校验用户名的方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkUsername</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义正则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> usernameReg=<span class="regexp">/^[a-zA-Z0-9]&#123;5,10&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> username =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;usernameInput&quot;</span>).<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> usernameMsgSpan =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;usernameMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!usernameReg.<span class="title function_">test</span>(username))&#123;</span></span><br><span class="line"><span class="language-javascript">                usernameMsgSpan.<span class="property">innerText</span>=<span class="string">&quot;不合法&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发送ajax请求校验用户名是否被占用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> request;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                request= <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                request= <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            request.<span class="property">onreadystatechange</span>= <span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// request.readyState == 4 代表请求结束,已经接收到响应结果</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// request.status== 200  表示后端响应状态码是200</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(request.<span class="property">readyState</span> == <span class="number">4</span>  &amp;&amp; request.<span class="property">status</span>== <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 后端的响应的JSON字符串转换为前端的对象</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> response =<span class="title class_">JSON</span>.<span class="title function_">parse</span>(request.<span class="property">responseText</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//  判断业务码是否是200</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (response.<span class="property">code</span> != <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        usernameMsgSpan.<span class="property">innerText</span>=<span class="string">&quot;已占用&quot;</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 设置请求方式,请求资源路径,是否为异步请求</span></span></span><br><span class="line"><span class="language-javascript">            request.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;/user/checkUsernameUsed?username=&#x27;</span>+username,<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="language-javascript">            request.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 前面校验都通过</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// usernameMsgSpan.innerText=&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// return true</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 校验密码的方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkUserPwd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义正则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> passwordReg=<span class="regexp">/^[0-9]&#123;6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> userPwd =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userPwdInput&quot;</span>).<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> userPwdMsgSpan =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userPwdMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!passwordReg.<span class="title function_">test</span>(userPwd))&#123;</span></span><br><span class="line"><span class="language-javascript">                userPwdMsgSpan.<span class="property">innerText</span>=<span class="string">&quot;不合法&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            userPwdMsgSpan.<span class="property">innerText</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 校验密码的方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkReUserPwd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义正则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> passwordReg=<span class="regexp">/^[0-9]&#123;6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> userPwd =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userPwdInput&quot;</span>).<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> reUserPwd =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;reUserPwdInput&quot;</span>).<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> reUserPwdMsgSpan =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;reUserPwdMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!passwordReg.<span class="title function_">test</span>(userPwd))&#123;</span></span><br><span class="line"><span class="language-javascript">                reUserPwdMsgSpan.<span class="property">innerText</span>=<span class="string">&quot;不合法&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(userPwd != reUserPwd)&#123;</span></span><br><span class="line"><span class="language-javascript">                reUserPwdMsgSpan.<span class="property">innerText</span>=<span class="string">&quot;不一致&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            reUserPwdMsgSpan.<span class="property">innerText</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//表单提交时统一校验</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkForm</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="title function_">checkUsername</span>() &amp;&amp; <span class="title function_">checkUserPwd</span>() &amp;&amp; <span class="title function_">checkReUserPwd</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>欢迎使用日程管理系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>请注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/user/regist&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return checkForm()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入账号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">id</span>=<span class="string">&quot;usernameInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;checkUsername()&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;usernameMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userPwdInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;checkUserPwd()&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;userPwdMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reUserPwdInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;checkReUserPwd()&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;reUserPwdMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;buttonContainer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>  <span class="attr">href</span>=<span class="string">&quot;/login.html&quot;</span>&gt;</span>去登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务端代码处理</p><ul><li>添加公共的JSON数据响应格式类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.common;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务含义和状态码对应关系的枚举</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCodeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">200</span>,<span class="string">&quot;success&quot;</span>),</span><br><span class="line">    USERNAME_ERROR(<span class="number">501</span>,<span class="string">&quot;usernameError&quot;</span>),</span><br><span class="line">    PASSWORD_ERROR(<span class="number">503</span>,<span class="string">&quot;passwordError&quot;</span>),</span><br><span class="line">    NOTLOGIN(<span class="number">504</span>,<span class="string">&quot;notLogin&quot;</span>),</span><br><span class="line">    USERNAME_USED(<span class="number">505</span>,<span class="string">&quot;userNameUsed&quot;</span>)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ResultCodeEnum</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.common;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局统一响应的JSON格式处理类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// 返回码</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">// 返回消息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">// 返回数据</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 返回数据</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">build</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;T&gt;();</span><br><span class="line">        <span class="keyword">if</span> (data != <span class="literal">null</span>)</span><br><span class="line">            result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">build</span><span class="params">(T body, Integer code, String message)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = build(body);</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">build</span><span class="params">(T body, ResultCodeEnum resultCodeEnum)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = build(body);</span><br><span class="line">        result.setCode(resultCodeEnum.getCode());</span><br><span class="line">        result.setMessage(resultCodeEnum.getMessage());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data  baseCategory1List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Result&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        Result&lt;T&gt; result = build(data);</span><br><span class="line">        <span class="keyword">return</span> build(data, ResultCodeEnum.SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Result&lt;T&gt; <span class="title function_">message</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setMessage(msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Result&lt;T&gt; <span class="title function_">code</span><span class="params">(Integer code)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setCode(code);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>增加Jackson依赖</li></ul><p><img src="/../image/%E4%BC%9A%E8%AF%9D%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8/1707563780586-84b28fc5-b78d-445b-96df-073c572d6b04.png" alt="img"></p><ul><li>添加WEBUtil工具类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.common.Result;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ObjectMapper objectMapper;</span><br><span class="line">    <span class="comment">// 初始化objectMapper</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        objectMapper=<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">// 设置JSON和Object转换时的时间日期格式</span></span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从请求中获取JSON串并转换为Object</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">readJson</span><span class="params">(HttpServletRequest request,Class&lt;T&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader = request.getReader();</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((line = reader.readLine())!= <span class="literal">null</span>)&#123;</span><br><span class="line">                buffer.append(line);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            t= objectMapper.readValue(buffer.toString(),clazz);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将Result对象转换成JSON串并放入响应对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeJson</span><span class="params">(HttpServletResponse response, Result result)</span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(result);</span><br><span class="line">            response.getWriter().write(json);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用户名校验业务接口代码</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">   * SysUserController下,注册时校验用户名是否被占用的业务接口</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">checkUsernameUsed</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">      <span class="type">SysUser</span> <span class="variable">registUser</span> <span class="operator">=</span> userService.findByUsername(username);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//封装结果对象</span></span><br><span class="line">      Result result=<span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span>(<span class="literal">null</span> ==registUser)&#123;</span><br><span class="line">          <span class="comment">// 未占用,创建一个code为200的对象</span></span><br><span class="line">          result= Result.ok(<span class="literal">null</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">// 占用, 创建一个结果为505的对象</span></span><br><span class="line">          result= Result.build(<span class="literal">null</span>, ResultCodeEnum.USERNAME_USED);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 将result对象转换成JSON并响应给客户端</span></span><br><span class="line">      WebUtil.writeJson(resp,result);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">checkUsernameUsed</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//接受用户名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="comment">//调用服务层业务查询该用户名是否有对应的用户</span></span><br><span class="line">    <span class="type">SysUser</span> <span class="variable">byUsername</span> <span class="operator">=</span> userService.findByUsername(username);</span><br><span class="line">    <span class="comment">//如果有 响应 已占用</span></span><br><span class="line">    Result&lt;Object&gt; result = Result.ok(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (byUsername != <span class="literal">null</span>) &#123;</span><br><span class="line">        result=Result.build(<span class="literal">null</span>, ResultCodeEnum.USERNAME_USED);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将result对象转化成json响应给客户端</span></span><br><span class="line">    <span class="comment">//objectMapper</span></span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> objectMapper.writeValueAsString(result);</span><br><span class="line">    <span class="comment">//告诉客户端发送的是一个json</span></span><br><span class="line">    resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">    resp.getWriter().write(info);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>servlet</title>
      <link href="/2024/02/20/servlet/"/>
      <url>/2024/02/20/servlet/</url>
      
        <content type="html"><![CDATA[<h1 id="一-Servlet简介"><a href="#一-Servlet简介" class="headerlink" title="一 Servlet简介"></a>一 Servlet简介</h1><h2 id="1-1-动态资源和静态资源"><a href="#1-1-动态资源和静态资源" class="headerlink" title="1.1 动态资源和静态资源"></a>1.1 动态资源和静态资源</h2><p>静态资源</p><ul><li>无需在程序运行时通过代码运行生成的资源,在程序运行之前就写好的资源. 例如:html css js img ,音频文件和视频文件</li></ul><p>动态资源 </p><ul><li>需要在程序运行时通过代码运行生成的资源,在程序运行之前无法确定的数据,运行时动态生成,例如Servlet,Thymeleaf … …</li><li>动态资源指的不是视图上的动画效果或者是简单的人机交互效果</li></ul><p>生活举例</p><ul><li><p>去蛋糕店买蛋糕</p></li><li><ul><li>直接买柜台上已经做好的 : 静态资源</li><li>和柜员说要求后现场制作 : 动态资源</li></ul></li></ul><h2 id="1-2-Servlet简介"><a href="#1-2-Servlet简介" class="headerlink" title="1.2 Servlet简介"></a>1.2 Servlet简介</h2><p>Servlet (server applet) 是运行在服务端(tomcat)的Java小程序，是sun公司提供一套定义动态资源规范; 从代码层面上来讲Servlet就是一个接口</p><ul><li>用来接收、处理客户端请求、响应给浏览器的动态资源。在整个Web应用中，Servlet主要负责接收处理请求、协同调度功能以及响应数据。我们可以把Servlet称为Web应用中的<strong>控制器</strong></li></ul><p><img src="/../image/servlet/1707138300829-c957c081-5f4b-4804-9c4b-07029156586d.png" alt="img"></p><ul><li>不是所有的JAVA类都能用于处理客户端请求,能处理客户端请求并做出响应的一套技术标准就是Servlet</li><li>Servlet是运行在服务端的,所以 Servlet必须在WEB项目中开发且在Tomcat这样的服务容器中运行</li></ul><p>请求响应与HttpServletRequest和HttpServletResponse之间的对应关系</p><p><img src="/../image/servlet/1707140389776-0ee51f77-610a-4776-a247-3b1a08b4b6b8.png" alt="img"></p><p><img src="/../image/servlet/1707138311101-45c6f1d7-aa0d-46ed-8ed4-cc879e064547.png" alt="img"></p><h1 id="二-Servlet开发流程"><a href="#二-Servlet开发流程" class="headerlink" title="二 Servlet开发流程"></a>二 Servlet开发流程</h1><h2 id="2-1-目标"><a href="#2-1-目标" class="headerlink" title="2.1 目标"></a>2.1 目标</h2><p>校验注册时,用户名是否被占用. 通过客户端向一个Servlet发送请求,携带username,如果用户名是’atguigu’,则向客户端响应 NO,如果是其他,响应YES</p><h2 id="2-2-开发过程"><a href="#2-2-开发过程" class="headerlink" title="2.2 开发过程"></a>2.2 开发过程</h2><p>步骤1 开发一个web类型的module </p><ul><li>过程参照之前</li></ul><p>步骤2 开发一个UserServlet</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span>  <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 根据名字获取请求中的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;atguigu&quot;</span>.equals(username))&#123;</span><br><span class="line">            <span class="comment">//通过响应对象响应信息</span></span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义一个类,要继承HttpServlet类</li><li>重写service方法,该方法主要就是用于处理用户请求的服务方法</li><li>HttpServletRequest 代表请求对象,是有请求报文经过tomcat转换而来的,通过该对象可以获取请求中的信息</li><li>HttpServletResponse 代表响应对象,该对象会被tomcat转换为响应的报文,通过该对象可以设置响应中的信息</li><li>Servlet对象的生命周期(创建,初始化,处理服务,销毁)是由tomcat管理的,无需我们自己new</li><li>HttpServletRequest HttpServletResponse 两个对象也是有tomcat负责转换,在调用service方法时传入给我们用的</li></ul><p>步骤3 在web.xml为UseServlet配置请求的映射路径</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span><br><span class="line">         version=<span class="string">&quot;5.0&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;!--给UserServlet起一个别名--&gt;</span><br><span class="line">        &lt;servlet-name&gt;userServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.atguigu.servlet.UserServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;!--关联别名和映射路径--&gt;</span><br><span class="line">        &lt;servlet-name&gt;userServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;!--可以为一个Servlet匹配多个不同的映射路径,但是不同的Servlet不能使用相同的url-pattern--&gt;</span><br><span class="line">        &lt;url-pattern&gt;/userServlet&lt;/url-pattern&gt;</span><br><span class="line">       &lt;!-- &lt;url-pattern&gt;/userServlet2&lt;/url-pattern&gt;--&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            /        表示通配所有资源,不包括jsp文件</span><br><span class="line">            <span class="comment">/*       表示通配所有资源,包括jsp文件</span></span><br><span class="line"><span class="comment">            /a/*     匹配所有以a前缀的映射路径</span></span><br><span class="line"><span class="comment">            *.action 匹配所有以action为后缀的映射路径</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="comment">       &lt;!-- &lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span></span><br><span class="line"><span class="comment">    &lt;/servlet-mapping&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;/web-app&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>Servlet并不是文件系统中实际存在的文件或者目录,所以为了能够请求到该资源,我们需要为其配置映射路径</p></li><li><p>servlet的请求映射路径配置在web.xml中</p></li><li><p>servlet-name作为servlet的别名,可以自己随意定义,见名知意就好</p></li><li><p>url-pattern标签用于定义Servlet的请求映射路径</p></li><li><p>一个servlet可以对应多个不同的url-pattern</p></li><li><p>多个servlet不能使用相同的url-pattern</p></li><li><p>url-pattern中可以使用一些通配写法</p></li><li><ul><li>&#x2F; 表示通配所有资源,不包括jsp文件</li><li>&#x2F;* 表示通配所有资源,包括jsp文件</li><li>&#x2F;a&#x2F;* 匹配所有以a前缀的映射路径</li><li>*.action 匹配所有以action为后缀的映射路径</li></ul></li></ul><p>步骤4 开发一个form表单,向servlet发送一个get请求并携带username参数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;userServlet&quot;</span>&gt;</span><br><span class="line">        请输入用户名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> /&gt; &lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;校验&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>启动项目,访问index.html ,提交表单测试</p><ul><li>使用debug模式运行测试</li></ul><p><img src="/../image/servlet/1707138340944-fe5c0405-9e9e-4235-a82f-c58f5e5288a6.png" alt="img"></p><p>映射关系图</p><p><img src="/../image/servlet/1707138350205-42a8476b-42cf-4272-aa58-91c56b3bcbc3.png" alt="img"></p><h1 id="三-Servlet注解方式配置"><a href="#三-Servlet注解方式配置" class="headerlink" title="三 Servlet注解方式配置"></a>三 Servlet注解方式配置</h1><h2 id="3-1-WebServlet注解源码"><a href="#3-1-WebServlet注解源码" class="headerlink" title="3.1 @WebServlet注解源码"></a>3.1 @WebServlet注解源码</h2><p>官方JAVAEEAPI文档下载地址</p><ul><li><a href="https://www.oracle.com/java/technologies/javaee/javaeetechnologies.html#javaee8">Java EE - Technologies (oracle.com)</a></li><li>@WebServlet注解的源码阅读</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakarta.servlet.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Servlet 3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The name of the servlet</span></span><br><span class="line"><span class="comment">     * 相当于 servlet-name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the name of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The URL patterns of the servlet</span></span><br><span class="line"><span class="comment">     * 如果只配置一个url-pattern ,则通过该属性即可,和urlPatterns属性互斥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the URL patterns of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The URL patterns of the servlet</span></span><br><span class="line"><span class="comment">     * 如果要配置多个url-pattern ,需要通过该属性,和value属性互斥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the URL patterns of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The load-on-startup order of the servlet</span></span><br><span class="line"><span class="comment">     * 配置Servlet是否在项目加载时实例化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the load-on-startup order of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The init parameters of the servlet</span></span><br><span class="line"><span class="comment">     * 配置初始化参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the init parameters of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Declares whether the servlet supports asynchronous operation mode.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the servlet supports asynchronous operation mode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> jakarta.servlet.ServletRequest#startAsync</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> jakarta.servlet.ServletRequest#startAsync( jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The small-icon of the servlet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the small-icon of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The large-icon of the servlet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the large-icon of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The description of the servlet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the description of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">description</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The display name of the servlet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the display name of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">displayName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-WebServlet注解使用"><a href="#3-2-WebServlet注解使用" class="headerlink" title="3.2 @WebServlet注解使用"></a>3.2 @WebServlet注解使用</h2><p>使用@WebServlet注解替换Servlet配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(</span></span><br><span class="line"><span class="meta">        name = &quot;userServlet&quot;,</span></span><br><span class="line"><span class="meta">        //value = &quot;/user&quot;,</span></span><br><span class="line"><span class="meta">        urlPatterns = &#123;&quot;/userServlet1&quot;,&quot;/userServlet2&quot;,&quot;/userServlet&quot;&#125;,</span></span><br><span class="line"><span class="meta">        initParams = &#123;@WebInitParam(name = &quot;encoding&quot;,value = &quot;UTF-8&quot;)&#125;,</span></span><br><span class="line"><span class="meta">        loadOnStartup = 6</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span>  <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encoding</span> <span class="operator">=</span> getServletConfig().getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line">        System.out.println(encoding);</span><br><span class="line">        <span class="comment">// 获取请求中的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;atguigu&quot;</span>.equals(username))&#123;</span><br><span class="line">            <span class="comment">//通过响应对象响应信息</span></span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-Servlet生命周期"><a href="#四-Servlet生命周期" class="headerlink" title="四 Servlet生命周期"></a>四 Servlet生命周期</h1><h2 id="4-1-生命周期简介"><a href="#4-1-生命周期简介" class="headerlink" title="4.1 生命周期简介"></a>4.1 生命周期简介</h2><p>什么是Servlet的生命周期</p><ul><li>应用程序中的对象不仅在空间上有层次结构的关系，在时间上也会因为处于程序运行过程中的不同阶段而表现出不同状态和不同行为——这就是对象的生命周期。</li><li>简单的叙述生命周期，就是对象在容器中从开始创建到销毁的过程。</li></ul><p>Servlet容器</p><ul><li>Servlet对象是Servlet容器创建的，生命周期方法都是由容器(目前我们使用的是Tomcat)调用的。这一点和我们之前所编写的代码有很大不同。在今后的学习中我们会看到，越来越多的对象交给容器或框架来创建，越来越多的方法由容器或框架来调用，开发人员要尽可能多的将精力放在业务逻辑的实现上。</li></ul><p>Servlet主要的生命周期执行特点</p><table><thead><tr><th><strong>生命周期</strong></th><th><strong>对应方法</strong></th><th><strong>执行时机</strong></th><th><strong>执行次数</strong></th></tr></thead><tbody><tr><td>构造对象</td><td>构造器</td><td>第一次请求或者容器启动</td><td>1</td></tr><tr><td>初始化</td><td>init()</td><td>构造完毕后</td><td>1</td></tr><tr><td>处理服务</td><td>service(HttpServletRequest req,HttpServletResponse resp)</td><td>每次请求</td><td>多次</td></tr><tr><td>销毁</td><td>destory()</td><td>容器关闭</td><td>1</td></tr></tbody></table><h2 id="4-2-生命周期测试"><a href="#4-2-生命周期测试" class="headerlink" title="4.2 生命周期测试"></a>4.2 生命周期测试</h2><p>开发servlet代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.servlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletLifeCycle</span>  <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServletLifeCycle</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置Servlet</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;servletLifeCycle&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.atguigu.servlet.ServletLifeCycle&lt;/servlet-class&gt;</span><br><span class="line">        &lt;!--load-on-startup</span><br><span class="line">            如果配置的是正整数则表示容器在启动时就要实例化Servlet,</span><br><span class="line">            数字表示的是实例化的顺序</span><br><span class="line">            -<span class="number">1</span> 启动时不回实例化servlet</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;load-on-startup&gt;<span class="number">6</span> &lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;servletLifeCycle&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/servletLiftCycle&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><ul><li>请求Servlet测试</li></ul><p>略</p><h2 id="4-3-生命周期总结"><a href="#4-3-生命周期总结" class="headerlink" title="4.3 生命周期总结"></a>4.3 生命周期总结</h2><ol><li>通过生命周期测试我们发现Servlet对象在容器中是单例的</li><li>容器是可以处理并发的用户请求的,每个请求在容器中都会开启一个线程</li><li>多个线程可能会使用相同的Servlet对象,所以在Servlet中,我们不要轻易定义一些容易经常发生修改的成员变量</li><li>load-on-startup中定义的正整数表示实例化顺序,如果数字重复了,容器会自行解决实例化顺序问题,但是应该避免重复</li><li>Tomcat容器中,已经定义了一些随系统启动实例化的servlet,我们自定义的servlet的load-on-startup尽量不要占用数字1-5</li></ol><h1 id="五-Servlet继承结构"><a href="#五-Servlet继承结构" class="headerlink" title="五 Servlet继承结构"></a>五 Servlet继承结构</h1><h2 id="5-1-Servlet-接口"><a href="#5-1-Servlet-接口" class="headerlink" title="5.1 Servlet 接口"></a>5.1 Servlet 接口</h2><p>源码及功能解释</p><ul><li>通过idea查看: 此处略</li></ul><p>接口及方法说明</p><ul><li><p>Servlet 规范接口,所有的Servlet必须实现 </p></li><li><ul><li>public void init(ServletConfig config) throws ServletException;</li></ul></li><li><ul><li><ul><li>初始化方法,容器在构造servlet对象后,自动调用的方法,容器负责实例化一个ServletConfig对象,并在调用该方法时传入</li><li>ServletConfig对象可以为Servlet 提供初始化参数</li></ul></li></ul></li><li><ul><li>public ServletConfig getServletConfig();</li></ul></li><li><ul><li><ul><li>获取ServletConfig对象的方法,后续可以通过该对象获取Servlet初始化参数</li></ul></li></ul></li><li><ul><li>public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException;</li></ul></li><li><ul><li><ul><li>处理请求并做出响应的服务方法,每次请求产生时由容器调用</li><li>容器创建一个ServletRequest对象和ServletResponse对象,容器在调用service方法时,传入这两个对象</li></ul></li></ul></li><li><ul><li>public String getServletInfo();</li></ul></li><li><ul><li><ul><li>获取ServletInfo信息的方法</li></ul></li></ul></li><li><ul><li>public void destroy();</li></ul></li><li><ul><li><ul><li>Servlet实例在销毁之前调用的方法</li></ul></li></ul></li></ul><h2 id="5-2-GenericServlet-抽象类"><a href="#5-2-GenericServlet-抽象类" class="headerlink" title="5.2 GenericServlet 抽象类"></a>5.2 GenericServlet 抽象类</h2><p>源码</p><ul><li>通过idea查看: 此处略</li></ul><p>源码解释</p><ul><li><p>GenericServlet 抽象类是对Servlet接口一些固定功能的粗糙实现,以及对service方法的再次抽象声明,并定义了一些其他相关功能方法</p></li><li><ul><li>private transient ServletConfig config;</li></ul></li><li><ul><li><ul><li>初始化配置对象作为属性</li></ul></li></ul></li><li><ul><li>public GenericServlet() { }</li></ul></li><li><ul><li><ul><li>构造器,为了满足继承而准备</li></ul></li></ul></li><li><ul><li>public void destroy() { }</li></ul></li><li><ul><li><ul><li>销毁方法的平庸实现</li></ul></li></ul></li><li><ul><li>public String getInitParameter(String name)</li></ul></li><li><ul><li><ul><li>获取初始参数的快捷方法</li></ul></li></ul></li><li><ul><li>public Enumeration<String> getInitParameterNames()</li></ul></li><li><ul><li><ul><li>返回所有初始化参数名的方法</li></ul></li></ul></li><li><ul><li>public ServletConfig getServletConfig()</li></ul></li><li><ul><li><ul><li>获取初始Servlet初始配置对象ServletConfig的方法</li></ul></li></ul></li><li><ul><li>public ServletContext getServletContext()</li></ul></li><li><ul><li><ul><li>获取上下文对象ServletContext的方法</li></ul></li></ul></li><li><ul><li>public String getServletInfo()</li></ul></li><li><ul><li><ul><li>获取Servlet信息的平庸实现</li></ul></li></ul></li><li><ul><li>public void init(ServletConfig config) throws ServletException()</li></ul></li><li><ul><li><ul><li>初始化方法的实现,并在此调用了init的重载方法</li></ul></li></ul></li><li><ul><li>public void init() throws ServletException</li></ul></li><li><ul><li><ul><li>重载init方法,为了让我们自己定义初始化功能的方法</li></ul></li></ul></li><li><ul><li>public void log(String msg) </li><li>public void log(String message, Throwable t)</li></ul></li><li><ul><li><ul><li>打印日志的方法及重载</li></ul></li></ul></li><li><ul><li>public abstract void service(ServletRequest req, ServletResponse res) throws ServletException, IOException;</li></ul></li><li><ul><li><ul><li>服务方法再次声明</li></ul></li></ul></li><li><ul><li>public String getServletName()</li></ul></li><li><ul><li><ul><li>获取ServletName的方法</li></ul></li></ul></li></ul><h2 id="5-3-HttpServlet-抽象类"><a href="#5-3-HttpServlet-抽象类" class="headerlink" title="5.3 HttpServlet 抽象类"></a>5.3 HttpServlet 抽象类</h2><p>源码</p><ul><li>通过idea查看: 此处略</li></ul><p>解释</p><ul><li><p>abstract class HttpServlet extends GenericServlet HttpServlet抽象类,除了基本的实现以外,增加了更多的基础功能</p></li><li><ul><li>private static final String METHOD_DELETE &#x3D; “DELETE”;</li><li>private static final String METHOD_HEAD &#x3D; “HEAD”;</li><li>private static final String METHOD_GET &#x3D; “GET”;</li><li>private static final String METHOD_OPTIONS &#x3D; “OPTIONS”;</li><li>private static final String METHOD_POST &#x3D; “POST”;</li><li>private static final String METHOD_PUT &#x3D; “PUT”;</li><li>private static final String METHOD_TRACE &#x3D; “TRACE”;</li></ul></li><li><ul><li><ul><li>上述属性用于定义常见请求方式名常量值</li></ul></li></ul></li><li><ul><li>public HttpServlet() {}</li></ul></li><li><ul><li><ul><li>构造器,用于处理继承</li></ul></li></ul></li><li><ul><li>public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException</li></ul></li><li><ul><li><ul><li>对服务方法的实现</li><li>在该方法中,将请求和响应对象转换成对应HTTP协议的HttpServletRequest HttpServletResponse对象</li><li>调用重载的service方法</li></ul></li></ul></li><li><ul><li>public void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException</li></ul></li><li><ul><li><ul><li>重载的service方法,被重写的service方法所调用</li><li>在该方法中,通过请求方式判断,调用具体的do***方法完成请求的处理</li></ul></li></ul></li><li><ul><li>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doHead(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doOptions(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doTrace(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li></ul></li><li><ul><li><ul><li>对应不同请求方式的处理方法</li><li>除了doOptions和doTrace方法,其他的do*** 方法都在故意响应错误信息</li></ul></li></ul></li></ul><h2 id="5-4-自定义Servlet"><a href="#5-4-自定义Servlet" class="headerlink" title="5.4 自定义Servlet"></a>5.4 自定义Servlet</h2><p>继承关系图解</p><p><img src="/../image/servlet/1707138368301-7263684c-8dca-4a44-bb98-1337d8a33ebb.png" alt="img"></p><ul><li><p>自定义Servlet中,必须要对处理请求的方法进行重写</p></li><li><ul><li>要么重写service方法</li><li>要么重写doGet&#x2F;doPost方法</li></ul></li></ul><h1 id="六-ServletConfig和ServletContext"><a href="#六-ServletConfig和ServletContext" class="headerlink" title="六 ServletConfig和ServletContext"></a>六 ServletConfig和ServletContext</h1><h2 id="6-1-ServletConfig的使用"><a href="#6-1-ServletConfig的使用" class="headerlink" title="6.1 ServletConfig的使用"></a>6.1 ServletConfig的使用</h2><p>ServletConfig是什么</p><ul><li>为Servlet提供初始配置参数的一种对象,每个Servlet都有自己独立唯一的ServletConfig对象</li><li>容器会为每个Servlet实例化一个ServletConfig对象,并通过Servlet生命周期的init方法传入给Servlet作为属性</li></ul><p><img src="/../image/servlet/1707138378810-a90a1b9e-c704-40e3-b822-9195312f0289.png" alt="img"></p><p>ServletConfig是一个接口,定义了如下API</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakarta.servlet;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ServletConfig</span> &#123;</span><br><span class="line">    String <span class="title function_">getServletName</span><span class="params">()</span>;</span><br><span class="line">    ServletContext <span class="title function_">getServletContext</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">getInitParameter</span><span class="params">(String var1)</span>;</span><br><span class="line">    Enumeration&lt;String&gt; <span class="title function_">getInitParameterNames</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法名</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>getServletName()</td><td>获取<servlet-name>HelloServlet</servlet-name>定义的Servlet名称</td></tr><tr><td>getServletContext()</td><td>获取ServletContext对象</td></tr><tr><td>getInitParameter()</td><td>获取配置Servlet时设置的『初始化参数』，根据名字获取值</td></tr><tr><td>getInitParameterNames()</td><td>获取所有初始化参数名组成的Enumeration对象</td></tr></tbody></table><p>ServletConfig怎么用,测试代码如下</p><ul><li>定义Servlet</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletConfig();</span><br><span class="line">        <span class="comment">// 根据参数名获取单个参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;param1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;param1:&quot;</span>+value);</span><br><span class="line">        <span class="comment">// 获取所有参数名</span></span><br><span class="line">        Enumeration&lt;String&gt; parameterNames = servletConfig.getInitParameterNames();</span><br><span class="line">        <span class="comment">// 迭代并获取参数名</span></span><br><span class="line">        <span class="keyword">while</span> (parameterNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">paramaterName</span> <span class="operator">=</span> parameterNames.nextElement();</span><br><span class="line">            System.out.println(paramaterName+<span class="string">&quot;:&quot;</span>+servletConfig.getInitParameter(paramaterName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletConfig();</span><br><span class="line">        <span class="comment">// 根据参数名获取单个参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;param1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;param1:&quot;</span>+value);</span><br><span class="line">        <span class="comment">// 获取所有参数名</span></span><br><span class="line">        Enumeration&lt;String&gt; parameterNames = servletConfig.getInitParameterNames();</span><br><span class="line">        <span class="comment">// 迭代并获取参数名</span></span><br><span class="line">        <span class="keyword">while</span> (parameterNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">paramaterName</span> <span class="operator">=</span> parameterNames.nextElement();</span><br><span class="line">            System.out.println(paramaterName+<span class="string">&quot;:&quot;</span>+servletConfig.getInitParameter(paramaterName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置Servlet</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">       &lt;servlet-name&gt;ServletA&lt;/servlet-name&gt;</span><br><span class="line">       &lt;servlet-class&gt;com.atguigu.servlet.ServletA&lt;/servlet-class&gt;</span><br><span class="line">       &lt;!--配置ServletA的初始参数--&gt;</span><br><span class="line">       &lt;init-param&gt;</span><br><span class="line">           &lt;param-name&gt;param1&lt;/param-name&gt;</span><br><span class="line">           &lt;param-value&gt;value1&lt;/param-value&gt;</span><br><span class="line">       &lt;/init-param&gt;</span><br><span class="line">       &lt;init-param&gt;</span><br><span class="line">           &lt;param-name&gt;param2&lt;/param-name&gt;</span><br><span class="line">           &lt;param-value&gt;value2&lt;/param-value&gt;</span><br><span class="line">       &lt;/init-param&gt;</span><br><span class="line">   &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;ServletB&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.atguigu.servlet.ServletB&lt;/servlet-class&gt;</span><br><span class="line">        &lt;!--配置ServletB的初始参数--&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;param3&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;value3&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;param4&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;value4&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;ServletA&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/servletA&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;ServletB&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/servletB&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><ul><li>请求Servlet测试</li></ul><p>略</p><h2 id="6-2-ServletContext的使用"><a href="#6-2-ServletContext的使用" class="headerlink" title="6.2 ServletContext的使用"></a>6.2 ServletContext的使用</h2><p>ServletContext是什么</p><ul><li>ServletContext对象有称呼为上下文对象,或者叫应用域对象(后面统一讲解域对象)</li><li>容器会为每个app创建一个独立的唯一的ServletContext对象</li><li>ServletContext对象为所有的Servlet所共享</li><li>ServletContext可以为所有的Servlet提供初始配置参数</li></ul><p><img src="/../image/servlet/1707138391454-d2e81dc2-f0e3-4c59-a8a5-d1600598bf43.png" alt="img"></p><p>ServletContext怎么用</p><ul><li>配置ServletContext参数</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span><br><span class="line">         version=<span class="string">&quot;5.0&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;paramA&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;valueA&lt;/param-value&gt;</span><br><span class="line">    &lt;/context-param&gt;</span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;paramB&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;valueB&lt;/param-value&gt;</span><br><span class="line">    &lt;/context-param&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><ul><li>在Servlet中获取ServletContext并获取参数</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 从ServletContext中获取为所有的Servlet准备的参数</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">valueA</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;paramA&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;paramA:&quot;</span>+valueA);</span><br><span class="line">        <span class="comment">// 获取所有参数名</span></span><br><span class="line">        Enumeration&lt;String&gt; initParameterNames = servletContext.getInitParameterNames();</span><br><span class="line">        <span class="comment">// 迭代并获取参数名</span></span><br><span class="line">        <span class="keyword">while</span> (initParameterNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">paramaterName</span> <span class="operator">=</span> initParameterNames.nextElement();</span><br><span class="line">            System.out.println(paramaterName+<span class="string">&quot;:&quot;</span>+servletContext.getInitParameter(paramaterName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-ServletContext其他重要API"><a href="#6-3-ServletContext其他重要API" class="headerlink" title="6.3 ServletContext其他重要API"></a>6.3 ServletContext其他重要API</h2><h3 id="获取资源的真实路径"><a href="#获取资源的真实路径" class="headerlink" title="获取资源的真实路径"></a>获取资源的真实路径</h3><p>String realPath &#x3D; servletContext.getRealPath(“资源在web目录中的路径”);</p><ul><li>例如我们的目标是需要获取项目中某个静态资源的路径，不是工程目录中的路径，而是<strong>部署目录中的路径</strong>；我们如果直接拷贝其在我们电脑中的完整路径的话其实是有问题的，因为如果该项目以后部署到公司服务器上的话，路径肯定是会发生改变的，所以我们需要使用代码动态获取资源的真实路径. 只要使用了servletContext动态获取资源的真实路径，<strong>那么无论项目的部署路径发生什么变化，都会动态获取项目运行时候的实际路径</strong>，所以就不会发生由于写死真实路径而导致项目部署位置改变引发的路径错误问题</li></ul><h3 id="获取项目的上下文路径"><a href="#获取项目的上下文路径" class="headerlink" title="获取项目的上下文路径"></a>获取项目的上下文路径</h3><p>String contextPath &#x3D; servletContext.getContextPath();</p><ul><li>项目的部署名称,也叫项目的上下文路径,在部署进入tomcat时所使用的路径,该路径是可能发生变化的,通过该API动态获取项目真实的上下文路径,可以<strong>帮助我们解决一些后端页面渲染技术或者请求转发和响应重定向中的路径问题</strong></li></ul><h3 id="应用域对象的相关API"><a href="#应用域对象的相关API" class="headerlink" title="应用域对象的相关API"></a>应用域对象的相关API</h3><ul><li>域对象: 一些用于存储数据和传递数据的对象,传递数据不同的范围,我们称之为不同的域,不同的域对象代表不同的域,共享数据的范围也不同</li><li>ServletContext代表应用,所以ServletContext域也叫作应用域,是webapp中最大的域,可以在本应用内实现数据的共享和传递</li><li>webapp中的三大域对象,分别是应用域,会话域,请求域</li><li>后续我们会将三大域对象统一进行讲解和演示,三大域对象都具有的API如下</li></ul><table><thead><tr><th><strong>API</strong></th><th><strong>功能解释</strong></th></tr></thead><tbody><tr><td>void setAttribute(String key,Object value);</td><td>向域中存储&#x2F;修改数据</td></tr><tr><td>Object getAttribute(String key);</td><td>获得域中的数据</td></tr><tr><td>void removeAttribute(String key);</td><td>移除域中的数据</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;ka&quot;</span>,<span class="string">&quot;ha&quot;</span>);</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;ka&quot;</span>,<span class="string">&quot;haa&quot;</span>);</span><br><span class="line">        System.out.println(servletContext.getAttribute(<span class="string">&quot;ka&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七-HttpServletRequest"><a href="#七-HttpServletRequest" class="headerlink" title="七 HttpServletRequest"></a>七 HttpServletRequest</h1><h2 id="7-1-HttpServletRequest简介"><a href="#7-1-HttpServletRequest简介" class="headerlink" title="7.1 HttpServletRequest简介"></a>7.1 HttpServletRequest简介</h2><p>HttpServletRequest是什么</p><ul><li>HttpServletRequest是一个接口,其父接口是ServletRequest</li><li>HttpServletRequest是Tomcat将请求报文转换封装而来的对象,在Tomcat调用service方法时传入</li><li>HttpServletRequest代表客户端发来的请求,所有请求中的信息都可以通过该对象获得</li></ul><p><img src="/../image/servlet/1707138404484-747c7463-407e-42e9-8064-7ea113a431db.png" alt="img"></p><h2 id="7-2-HttpServletRequest常见API"><a href="#7-2-HttpServletRequest常见API" class="headerlink" title="7.2 HttpServletRequest常见API"></a>7.2 HttpServletRequest常见API</h2><p>HttpServletRequest怎么用</p><ul><li>获取请求行信息相关(方式,请求的url,协议及版本)</li></ul><table><thead><tr><th><strong>API</strong></th><th><strong>功能解释</strong></th></tr></thead><tbody><tr><td>StringBuffer getRequestURL();</td><td>获取客户端请求的url</td></tr><tr><td>String getRequestURI();</td><td>获取客户端请求项目中的具体资源</td></tr><tr><td>int getServerPort();</td><td>获取客户端发送请求时的端口</td></tr><tr><td>int getLocalPort();</td><td>获取本应用在所在容器的端口</td></tr><tr><td>int getRemotePort();</td><td>获取客户端程序的端口</td></tr><tr><td>String getScheme();</td><td>获取请求协议</td></tr><tr><td>String getProtocol();</td><td>获取请求协议及版本号</td></tr><tr><td>String getMethod();</td><td>获取请求方式</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet2</span>  <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 行相关  GET/POST</span></span><br><span class="line">        System.out.println(req.getMethod());<span class="comment">//获取请求方式</span></span><br><span class="line">        System.out.println(req.getScheme());<span class="comment">//获取请求协议</span></span><br><span class="line">        System.out.println(req.getProtocol());<span class="comment">//获取请求协议及版本</span></span><br><span class="line">        System.out.println(req.getRequestURI());<span class="comment">//获取请求单URI 项目内的资源路径</span></span><br><span class="line">        System.out.println(req.getRequestURL());<span class="comment">//获取请求URL 项目内资源的完成的路径</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * URI 统一资源标识符   /web03/servlet02  资源定位的要求和规范</span></span><br><span class="line"><span class="comment">        * URL 统一资源定位符  http://localhost:8080/web03/servlet02 http协议下一个具体的资源路径</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        System.out.println(req.getLocalPort());<span class="comment">//本应用容器的端口号 8080</span></span><br><span class="line">        System.out.println(req.getServerPort());<span class="comment">//客服端请求时使用的端口号 8080</span></span><br><span class="line">        System.out.println(req.getRemotePort());<span class="comment">//客户端软件的端口号 49436</span></span><br><span class="line">        <span class="comment">// 头相关</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获得请求头信息相关</li></ul><table><thead><tr><th><strong>API</strong></th><th><strong>功能解释</strong></th></tr></thead><tbody><tr><td>String getHeader(String headerName);</td><td>根据头名称获取请求头</td></tr><tr><td>Enumeration<String> getHeaderNames();</td><td>获取所有的请求头名字</td></tr><tr><td>String getContentType();</td><td>获取content-type请求头</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servlet02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet2</span>  <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 头相关</span></span><br><span class="line">        <span class="comment">//根据名字获取某个请求头</span></span><br><span class="line">        System.out.println(req.getHeader(<span class="string">&quot;Accept&quot;</span>));</span><br><span class="line">        <span class="comment">//获取本次请求中所有的请求头</span></span><br><span class="line">        Enumeration&lt;String&gt; headerNames = req.getHeaderNames();</span><br><span class="line">        <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">hname</span> <span class="operator">=</span> headerNames.nextElement();</span><br><span class="line">            System.out.println(hname+<span class="string">&quot;:&quot;</span>+req.getHeader(hname));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获得请求参数相关</li></ul><table><thead><tr><th><strong>API</strong></th><th><strong>功能解释</strong></th></tr></thead><tbody><tr><td>String getParameter(String parameterName);</td><td>根据请求参数名获取请求单个参数值</td></tr><tr><td>String[] getParameterValues(String parameterName);</td><td>根据请求参数名获取请求多个参数值数组</td></tr><tr><td>Enumeration<String> getParameterNames();</td><td>获取所有请求参数名</td></tr><tr><td>Map&lt;String, String[]&gt; getParameterMap();</td><td>获取所有请求参数的键值对集合</td></tr><tr><td>BufferedReader getReader() throws IOException;</td><td>获取读取请求体的字符输入流</td></tr><tr><td>ServletInputStream getInputStream() throws IOException;</td><td>获取读取请求体的字节输入流</td></tr><tr><td>int getContentLength();</td><td>获得请求体长度的字节数</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet3</span>  <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取键值对形式的参数</span></span><br><span class="line">        <span class="comment">//根据参数名获取单个参数值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userPwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userPwd&quot;</span>);</span><br><span class="line">        System.out.println(userPwd);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据参数名获取多个参数</span></span><br><span class="line">        String[] values = req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        System.out.println(values);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有的参数名</span></span><br><span class="line">        Enumeration&lt;String&gt; headerNames = req.getParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">nexted</span> <span class="operator">=</span> headerNames.nextElement();</span><br><span class="line">            String[] values1 = req.getParameterValues(nexted);</span><br><span class="line">            <span class="keyword">if</span> (values1.length&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//方式一</span></span><br><span class="line">                <span class="keyword">for</span> (String s : values1) &#123;</span><br><span class="line">                    System.out.println(s);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//方式二</span></span><br><span class="line">                System.out.println(nexted+<span class="string">&quot;=&quot;</span>+ Arrays.toString(values1));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(nexted+<span class="string">&quot;=&quot;</span>+ values1[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回所有参数的map集合 key = 参数名  value = 参数值</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</span><br><span class="line">        Set&lt;Map.Entry&lt;String, String[]&gt;&gt; entries = parameterMap.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String[]&gt; entry : entries) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pname</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            String[] value = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span>(value.length&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(pname+<span class="string">&quot;=&quot;</span>+ Arrays.toString(value));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(pname+<span class="string">&quot;=&quot;</span>+ value[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 以上API专门用于获取key=value形式的参数 无论这些参数在url还是请求体中</span></span><br><span class="line"><span class="comment">        * from表单标签提交get请求时，参数以键值对的方式存在不放在请求体中，但get请求也是可以有请求体</span></span><br><span class="line"><span class="comment">        * 获取请求体中的非键值对数据？ JSON 文件</span></span><br><span class="line"><span class="comment">        * 获得一个从请求体中读取字符的字符输入流 JSON</span></span><br><span class="line"><span class="comment">        *  BufferedReader reader = req.getReader();</span></span><br><span class="line"><span class="comment">        * 获得一个从请求体中获得二进制数据的字节输入流 文件</span></span><br><span class="line"><span class="comment">        *  ServletInputStream inputStream = req.getInputStream();</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其他API</li></ul><table><thead><tr><th><strong>API</strong></th><th><strong>功能解释</strong></th></tr></thead><tbody><tr><td>String getServletPath();</td><td>获取请求的Servlet的映射路径</td></tr><tr><td>ServletContext getServletContext();</td><td>获取ServletContext对象</td></tr><tr><td>Cookie[] getCookies();</td><td>获取请求中的所有cookie</td></tr><tr><td>HttpSession getSession();</td><td>获取Session对象</td></tr><tr><td>void setCharacterEncoding(String encoding) ;</td><td>设置请求体字符集</td></tr></tbody></table><h1 id="八-HttpServletResponse"><a href="#八-HttpServletResponse" class="headerlink" title="八 HttpServletResponse"></a>八 HttpServletResponse</h1><h2 id="8-1-HttpServletResponse简介"><a href="#8-1-HttpServletResponse简介" class="headerlink" title="8.1 HttpServletResponse简介"></a>8.1 HttpServletResponse简介</h2><p>HttpServletResponse是什么</p><ul><li>HttpServletResponse是一个接口,其父接口是ServletResponse</li><li>HttpServletResponse是Tomcat预先创建的,在Tomcat调用service方法时传入</li><li>HttpServletResponse代表对客户端的响应,该对象会被转换成响应的报文发送给客户端,通过该对象我们可以设置响应信息</li></ul><p><img src="/../image/servlet/1707138415990-67063ffc-b71c-473a-8391-dd6f1a1357d6.png" alt="img"></p><h2 id="8-2-HttpServletResponse的常见API"><a href="#8-2-HttpServletResponse的常见API" class="headerlink" title="8.2 HttpServletResponse的常见API"></a>8.2 HttpServletResponse的常见API</h2><p>HttpServletRequest怎么用</p><ul><li>设置响应行相关</li></ul><table><thead><tr><th><strong>API</strong></th><th><strong>功能解释</strong></th></tr></thead><tbody><tr><td>void setStatus(int code);</td><td>设置响应状态码</td></tr></tbody></table><ul><li>设置响应头相关</li></ul><table><thead><tr><th><strong>API</strong></th><th><strong>功能解释</strong></th></tr></thead><tbody><tr><td>void setHeader(String headerName, String headerValue);</td><td>设置&#x2F;修改响应头键值对</td></tr><tr><td>void setContentType(String contentType);</td><td>设置content-type响应头及响应字符集(设置MIME类型)</td></tr></tbody></table><ul><li>设置响应体相关</li></ul><table><thead><tr><th><strong>API</strong></th><th><strong>功能解释</strong></th></tr></thead><tbody><tr><td>PrintWriter getWriter() throws IOException;</td><td>获得向响应体放入信息的字符输出流</td></tr><tr><td>ServletOutputStream getOutputStream() throws IOException;</td><td>获得向响应体放入信息的字节输出流</td></tr><tr><td>void setContentLength(int length);</td><td>设置响应体的字节长度,其实就是在设置content-length响应头</td></tr></tbody></table><ul><li>其他API</li></ul><table><thead><tr><th><strong>API</strong></th><th><strong>功能解释</strong></th></tr></thead><tbody><tr><td>void sendError(int code, String message) throws IOException;</td><td>向客户端响应错误信息的方法,需要指定响应码和响应信息</td></tr><tr><td>void addCookie(Cookie cookie);</td><td>向响应体中增加cookie</td></tr><tr><td>void setCharacterEncoding(String encoding);</td><td>设置响应体字符集</td></tr></tbody></table><p>MIME类型</p><ul><li>MIME类型,可以理解为文档类型,用户表示传递的数据是属于什么类型的文档</li><li>浏览器可以根据MIME类型决定该用什么样的方式解析接收到的响应体数据</li><li>可以这样理解: 前后端交互数据时,告诉对方发给对方的是 html&#x2F;css&#x2F;js&#x2F;图片&#x2F;声音&#x2F;视频&#x2F;… …</li><li>tomcat&#x2F;conf&#x2F;web.xml中配置了常见文件的拓展名和MIMIE类型的对应关系</li><li>常见的MIME类型举例如下</li></ul><table><thead><tr><th><strong>文件拓展名</strong></th><th><strong>MIME类型</strong></th></tr></thead><tbody><tr><td>.html</td><td>text&#x2F;html</td></tr><tr><td>.css</td><td>text&#x2F;css</td></tr><tr><td>.js</td><td>application&#x2F;javascript</td></tr><tr><td>.png &#x2F;.jpeg&#x2F;.jpg&#x2F;… …</td><td>image&#x2F;jpeg</td></tr><tr><td>.mp3&#x2F;.mpe&#x2F;.mpeg&#x2F; … …</td><td>audio&#x2F;mpeg</td></tr><tr><td>.mp4</td><td>video&#x2F;mp4</td></tr><tr><td>.m1v&#x2F;.m1v&#x2F;.m2v&#x2F;.mpe&#x2F;… …</td><td>video&#x2F;mpeg</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servlet4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//设置响应行相关的API</span></span><br><span class="line">        resp.setStatus(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//设置响应头相关的API</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot;&lt;h1&gt;hello&lt;h1&gt;&quot;</span>;</span><br><span class="line">        resp.setHeader(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;valuea&quot;</span>);</span><br><span class="line">        <span class="comment">// resp.setHeader(&quot;Content-Type&quot;,&quot;text/html&quot;);</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.setContentLength(info.getBytes().length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置响应体内容API</span></span><br><span class="line">        <span class="comment">//获得一个响应体中输入文本字符输出流</span></span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">weiter</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        weiter.write(info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="九-请求转发和响应重定向"><a href="#九-请求转发和响应重定向" class="headerlink" title="九 请求转发和响应重定向"></a>九 请求转发和响应重定向</h1><h2 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h2><p>什么是请求转发和响应重定向</p><ul><li>请求转发和响应重定向是web应用中间接访问项目资源的两种手段,也是Servlet控制页面跳转的两种手段</li><li>请求转发通过HttpServletRequest实现,响应重定向通过HttpServletResponse实现</li><li>请求转发生活举例: 张三找李四借钱,李四没有,李四找王五,让王五借给张三</li><li>响应重定向生活举例:张三找李四借钱,李四没有,李四让张三去找王五,张三自己再去找王五借钱</li></ul><h2 id="9-2-请求转发"><a href="#9-2-请求转发" class="headerlink" title="9.2 请求转发"></a>9.2 请求转发</h2><p>请求转发运行逻辑图</p><p><img src="/../image/servlet/1707138429518-d42cd061-1800-4b59-8b47-b813b746ee0c.png" alt="img"></p><p>请求转发特点(背诵)</p><ul><li>请求转发通过HttpServletRequest对象获取请求转发器实现</li><li>请求转发是服务器内部的行为,对客户端是屏蔽的</li><li>客户端只发送了一次请求,客户端地址栏不变</li><li>服务端只产生了一对请求和响应对象,这一对请求和响应对象会继续传递给下一个资源</li><li>因为全程只有一个HttpServletRequset对象,所以请求参数可以传递,请求域中的数据也可以传递</li><li>请求转发可以转发给其他Servlet动态资源,也可以转发给一些静态资源以实现页面跳转</li><li>请求转发可以转发给WEB-INF下受保护的资源</li><li>请求转发不能转发到本项目以外的外部资源</li></ul><p>请求转发测试代码</p><p><img src="/../image/servlet/1707138442276-f5cfea9b-d8c3-4671-843a-4a9cf01e4c3c.png" alt="img"></p><ul><li>ServletA</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//  获取请求转发器</span></span><br><span class="line">        <span class="comment">//  转发给servlet  ok</span></span><br><span class="line">        <span class="type">RequestDispatcher</span>  <span class="variable">requestDispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;servletB&quot;</span>);</span><br><span class="line">        <span class="comment">//  转发给一个视图资源 ok</span></span><br><span class="line">        <span class="comment">//RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;welcome.html&quot;);</span></span><br><span class="line">        <span class="comment">//  转发给WEB-INF下的资源  ok</span></span><br><span class="line">        <span class="comment">//RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;WEB-INF/views/view1.html&quot;);</span></span><br><span class="line">        <span class="comment">//  转发给外部资源   no</span></span><br><span class="line">        <span class="comment">//RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;http://www.atguigu.com&quot;);</span></span><br><span class="line">        <span class="comment">//  获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="comment">//  向请求域中添加数据</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;reqKey&quot;</span>,<span class="string">&quot;requestMessage&quot;</span>);</span><br><span class="line">        <span class="comment">//  做出转发动作</span></span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 1请求转发是通过HttpServletRequest对象实现的</span></span><br><span class="line"><span class="comment">    * 2请求转发是服务器内部行为，对客户是屏蔽的</span></span><br><span class="line"><span class="comment">    * 3客户端只产生了一次请求</span></span><br><span class="line"><span class="comment">    * 4客户端的地址栏是不变的</span></span><br><span class="line"><span class="comment">    * 5请求的参数是可以继续传递的</span></span><br><span class="line"><span class="comment">    * 6目标是可以是servlet动态资源也可以是html静态资源</span></span><br><span class="line"><span class="comment">    * 7目标资源可以是WEI-INF下受保护的资源，该方式也是WEI-INF下资源的唯一访问方式</span></span><br><span class="line"><span class="comment">    * 8不可以是外部资源</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了A&quot;</span>);</span><br><span class="line">        <span class="comment">//请求转发</span></span><br><span class="line">        <span class="comment">//获取请求转发器 转发servlet</span></span><br><span class="line">        <span class="comment">//RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;servletB&quot;);</span></span><br><span class="line">        <span class="comment">// 转发视图资源</span></span><br><span class="line">        <span class="comment">//RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;a.html&quot;);</span></span><br><span class="line">        <span class="comment">//转发WEB-INF受保护资源</span></span><br><span class="line">        <span class="comment">//RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;WEB-INF/b.html&quot;);</span></span><br><span class="line">        <span class="comment">//外部资源 不可以</span></span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;https://www.baidu.com/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">money</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;money值为&quot;</span>+money);</span><br><span class="line">        <span class="comment">//让请求转发器做出转发动作</span></span><br><span class="line">        requestDispatcher.forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ServletB</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="comment">// 获取请求域中的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">reqMessage</span> <span class="operator">=</span> (String)req.getAttribute(<span class="string">&quot;reqKey&quot;</span>);</span><br><span class="line">        System.out.println(reqMessage);</span><br><span class="line">        <span class="comment">// 做出响应</span></span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;servletB response&quot;</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打开浏览器,输入以下url测试</li></ul><p><a href="http://localhost:8080/web03_war_exploded/servletA?username=atguigu">http://localhost:8080/web03_war_exploded/servletA?username=atguigu</a></p><h2 id="9-3-响应重定向"><a href="#9-3-响应重定向" class="headerlink" title="9.3 响应重定向"></a>9.3 响应重定向</h2><p>响应重定向运行逻辑图</p><p><img src="/../image/servlet/1707138450560-e60b6b5a-8db5-41d3-9bb5-ce930a32864a.png" alt="img"></p><p>响应重定向特点(背诵)</p><ul><li>响应重定向通过HttpServletResponse对象的sendRedirect方法实现</li><li>响应重定向是服务端通过302响应码和路径,告诉客户端自己去找其他资源,是在服务端提示下的,客户端的行为</li><li>客户端至少发送了两次请求,客户端地址栏是要变化的</li><li>服务端产生了多对请求和响应对象,且请求和响应对象不会传递给下一个资源</li><li>因为全程产生了多个HttpServletRequset对象,所以请求参数不可以传递,请求域中的数据也不可以传递</li><li>重定向可以是其他Servlet动态资源,也可以是一些静态资源以实现页面跳转</li><li>重定向不可以到给WEB-INF下受保护的资源</li><li>重定向可以到本项目以外的外部资源</li></ul><p>响应重定向测试代码</p><p><img src="/../image/servlet/1707138456562-2664d3a0-fd17-471e-99fc-3b8d5eff39cd.png" alt="img"></p><ul><li>ServletA</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//  获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="comment">//  向请求域中添加数据</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;reqKey&quot;</span>,<span class="string">&quot;requestMessage&quot;</span>);</span><br><span class="line">        <span class="comment">//  响应重定向</span></span><br><span class="line">        <span class="comment">// 重定向到servlet动态资源 OK</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;servletB&quot;</span>);</span><br><span class="line">        <span class="comment">// 重定向到视图静态资源 OK</span></span><br><span class="line">        <span class="comment">//resp.sendRedirect(&quot;welcome.html&quot;);</span></span><br><span class="line">        <span class="comment">// 重定向到WEB-INF下的资源 NO</span></span><br><span class="line">        <span class="comment">//resp.sendRedirect(&quot;WEB-INF/views/view1&quot;);</span></span><br><span class="line">        <span class="comment">// 重定向到外部资源</span></span><br><span class="line">        <span class="comment">//resp.sendRedirect(&quot;http://www.atguigu.com&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 1重定向是通过HttpServletResponse对象实现的</span></span><br><span class="line"><span class="comment">    * 2响应重定向是在服务端提示下，客户端的行为</span></span><br><span class="line"><span class="comment">    * 3客户端的地址栏是变化的，客户端产生了多次请求</span></span><br><span class="line"><span class="comment">    * 4请求产生多次，祸端会有多个request对象，此时请求中的参数不能继续自动传递的</span></span><br><span class="line"><span class="comment">    * 5目标资源可以是视图资源</span></span><br><span class="line"><span class="comment">    * 6目标可以是外部资源</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * 重点：同样能够实现页面跳转，优先使用重定向  </span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//接受用户请求</span></span><br><span class="line">        System.out.println(<span class="string">&quot;servlet1执行了&quot;</span>);</span><br><span class="line">        System.out.println(req.getParameter(<span class="string">&quot;money&quot;</span>));</span><br><span class="line">        <span class="comment">//响应重定向 设置响应状态码为302  同时设置location响应头</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;a.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ServletB</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="comment">// 获取请求域中的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">reqMessage</span> <span class="operator">=</span> (String)req.getAttribute(<span class="string">&quot;reqKey&quot;</span>);</span><br><span class="line">        System.out.println(reqMessage);</span><br><span class="line">        <span class="comment">// 做出响应</span></span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;servletB response&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十-web乱码和路径问题总结"><a href="#十-web乱码和路径问题总结" class="headerlink" title="十 web乱码和路径问题总结"></a>十 web乱码和路径问题总结</h1><h2 id="10-1-乱码问题"><a href="#10-1-乱码问题" class="headerlink" title="10.1 乱码问题"></a>10.1 乱码问题</h2><p>乱码问题产生的根本原因是什么</p><ol><li>数据的编码和解码使用的不是同一个字符集</li><li>使用了不支持某个语言文字的字符集</li></ol><p>各个字符集的兼容性</p><p><img src="/../image/servlet/1707138470243-b1da37c8-6e8c-48e8-b9e6-49fbbda7f12f.png" alt="img"></p><ul><li>由上图得知,上述字符集都兼容了ASCII</li><li>ASCII中有什么? 英文字母和一些通常使用的符号,所以这些东西无论使用什么字符集都不会乱码</li></ul><h3 id="10-1-1-HTML乱码问题"><a href="#10-1-1-HTML乱码问题" class="headerlink" title="10.1.1 HTML乱码问题"></a>10.1.1 HTML乱码问题</h3><p>设置项目文件的字符集要使用一个支持中文的字符集</p><ul><li>查看当前文件的字符集</li></ul><p><img src="/../image/servlet/1707138480436-4d61c363-aefe-435e-9af7-d5d1e53575c1.png" alt="img"></p><ul><li>查看项目字符集 配置,将Global Encoding 全局字符集,Project Encoding 项目字符集, Properties Files 属性配置文件字符集设置为UTF-8</li></ul><p><img src="/../image/servlet/1707138490497-da8c6ecd-d146-4a8e-b4ea-e1ff9e13e72a.png" alt="img"></p><p>当前视图文件的字符集通过<meta charset="UTF-8"> 来告知浏览器通过什么字符集来解析当前文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    中文</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="10-1-2-Tomcat控制台乱码"><a href="#10-1-2-Tomcat控制台乱码" class="headerlink" title="10.1.2 Tomcat控制台乱码"></a>10.1.2 Tomcat控制台乱码</h3><p>在tomcat10.1.7这个版本中,修改 tomcat&#x2F;conf&#x2F;logging.properties中,所有的UTF-8为GBK即可</p><ul><li>修改前</li></ul><p><img src="/../image/servlet/1707138501329-f2fd1ae8-1f85-49f8-a3ed-d32ca8bffa22.png" alt="img"></p><ul><li>修改后</li></ul><p><img src="/../image/servlet/1707138506688-3c9b09b6-50ca-452c-87ee-3f7e4a3ac75a.png" alt="img"></p><p>sout乱码问题,设置JVM加载.class文件时使用UTF-8字符集</p><ul><li>设置虚拟机加载.class文件的字符集和编译时使用的字符集一致</li></ul><p><img src="/../image/servlet/1707138525080-ead37821-101f-4aff-acae-21f8b102c2f8.png" alt="img"></p><h3 id="10-1-3-请求乱码问题"><a href="#10-1-3-请求乱码问题" class="headerlink" title="10.1.3 请求乱码问题"></a>10.1.3 请求乱码问题</h3><h4 id="10-1-3-1-GET请求乱码"><a href="#10-1-3-1-GET请求乱码" class="headerlink" title="10.1.3.1 GET请求乱码"></a>10.1.3.1 GET请求乱码</h4><p>GET请求方式乱码分析</p><ul><li>GET方式提交参数的方式是将参数放到URL后面,如果使用的不是UTF-8,那么会对参数进行URL编码处理</li><li>HTML中的 <meta charset='字符集'/> 影响了GET方式提交参数的URL编码</li><li>tomcat10.1.7的URI编码默认为 UTF-8</li><li>当GET方式提交的参数URL编码和tomcat10.1.7默认的URI编码不一致时,就会出现乱码</li></ul><p>GET请求方式乱码演示</p><ul><li>浏览器解析的文档的<meta charset="GBK" /></li></ul><p><img src="/../image/servlet/1707138550011-8b1cf943-1e07-47df-9a86-07158f51a317.png" alt="img"></p><ul><li>GET方式提交时,会对数据进行URL编码处理 ,是将GBK 转码为 “百分号码”<img src="/../image/servlet/1707474552719-585f9ea1-72f5-4978-be68-27b6809f995f.png" alt="img"></li><li>tomcat10.1.7 默认使用UTF-8对URI进行解析,造成前后端使用的字符集不一致,出现乱码</li></ul><p><img src="/../image/servlet/1707138566456-79835374-d8fa-40fe-95fe-1f543703ded8.png" alt="img"></p><p>GET请求方式乱码解决</p><ul><li>方式1 :设置GET方式提交的编码和Tomcat10.1.7的URI默认解析编码一致即可 (推荐)</li></ul><p><img src="/../image/servlet/1707138584393-fba3f477-1b8e-4b94-bda3-45c275ef24cb.png" alt="img"></p><ul><li>方式2 : 设置Tomcat10.1.7的URI解析字符集和GET请求发送时所使用URL转码时的字符集一致即可,修改conf&#x2F;server.xml中 Connecter 添加 URIEncoding&#x3D;”GBK” (不推荐)</li></ul><p><img src="/../image/servlet/1707138589882-3e9c2e5f-f694-42fe-9c93-6ec35c1c8fe6.png" alt="img"></p><h4 id="10-1-3-2-POST方式请求乱码"><a href="#10-1-3-2-POST方式请求乱码" class="headerlink" title="10.1.3.2 POST方式请求乱码"></a>10.1.3.2 POST方式请求乱码</h4><p>POST请求方式乱码分析</p><ul><li>POST请求将参数放在请求体中进行发送</li><li>请求体使用的字符集受到了<meta charset="字符集"/> 的影响</li><li>Tomcat10.1.7 默认使用UTF-8字符集对请求体进行解析</li><li>如果请求体的URL转码和Tomcat的请求体解析编码不一致,就容易出现乱码</li></ul><p>POST方式乱码演示</p><ul><li>POST请求请求体受到了<meta charset="字符集"/> 的影响</li></ul><p><img src="/../image/servlet/1707138601419-5a51304b-f519-492c-9e7f-4b34fdd6b1fe.png" alt="img"></p><ul><li>请求体中,将GBK数据进行 URL编码</li></ul><p><img src="/../image/servlet/1707138608193-e8c41f42-da43-4788-b480-d8e4752991ff.png" alt="img"></p><ul><li>后端默认使用UTF-8解析请求体,出现字符集不一致,导致乱码</li></ul><p><img src="/../image/servlet/1707138613428-6b9f1c4b-9a18-4d77-bbe4-b22c02442a11.png" alt="img"></p><p>POST请求方式乱码解决</p><ul><li>方式1 : 请求时,使用UTF-8字符集提交请求体 (推荐)</li></ul><p><img src="/../image/servlet/1707138619310-23e66906-c412-4336-be2f-573bf9756a25.png" alt="img"></p><ul><li>方式2 : 后端在获取参数前,设置解析请求体使用的字符集和请求发送时使用的字符集一致 (不推荐)</li></ul><p><img src="/../image/servlet/1707138624392-2b4056b5-a6cc-4801-b2dd-8d074c30f8b9.png" alt="img"></p><h3 id="10-1-3-响应乱码问题"><a href="#10-1-3-响应乱码问题" class="headerlink" title="10.1.3 响应乱码问题"></a>10.1.3 响应乱码问题</h3><p>响应乱码分析</p><ul><li>在Tomcat10.1.7中,向响应体中放入的数据默认使用了工程编码 UTF-8</li><li>浏览器在接收响应信息时,使用了不同的字符集或者是不支持中文的字符集就会出现乱码</li></ul><p>响应乱码演示</p><ul><li>服务端通过response对象向响应体添加数据</li></ul><p><img src="/../image/servlet/1707138644489-23cf0a8f-40b4-4ae4-ae1d-8a6f4b1ede3a.png" alt="img"></p><ul><li>浏览器接收数据解析乱码</li></ul><p><img src="/../image/servlet/1707138650052-27b6431a-66e1-4caa-b5d0-4b53972485e6.png" alt="img"></p><p>响应乱码解决</p><ul><li><p>方式1 : 手动设定浏览器对本次响应体解析时使用的字符集(不推荐)</p></li><li><ul><li>edge和 chrome浏览器没有提供直接的比较方便的入口,不方便</li></ul></li><li><p>方式2: 后端通过设置响应体的字符集和浏览器解析响应体的默认字符集一致(不推荐)</p></li></ul><p><img src="/../image/servlet/1707138663586-227c87d3-9e34-481d-b7eb-950e019bf122.png" alt="img"></p><p>方式3: 通过设置content-type响应头,告诉浏览器以指定的字符集解析响应体(推荐)</p><p><img src="/../image/servlet/1707138669429-b25905ab-f635-41b4-a087-431292c4fc2c.png" alt="img"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//设置响应体使用UTF-8编码</span></span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//设置响应头，告诉客户端使用UTF-8解码</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/servlet/1707138675364-ff7ce4b1-b743-4994-beed-7b4049c3037f.png" alt="img"></p><h2 id="10-2-路径问题"><a href="#10-2-路径问题" class="headerlink" title="10.2 路径问题"></a>10.2 路径问题</h2><p>相对路径和绝对路径</p><ul><li><p>相对路径</p></li><li><ul><li>相对路径的规则是: 以当前资源所在的路径为出发点去寻找目标资源</li><li>相对路径不以 &#x2F; 开头</li><li>在file协议下,使用的是磁盘路径</li><li>在http协议下,使用的是url路径</li><li>相对路径中可以使用 .&#x2F;表示当前资源所在路径,可以省略不写</li><li>相对路径中可以使用..&#x2F;表示当前资源所在路径的上一层路径,需要时要手动添加</li></ul></li><li><p>绝对路径</p></li><li><ul><li>绝对路径的规则是: 使用以一个固定的路径做出出发点去寻找目标资源,和当前资源所在的路径没有关系</li><li>绝对路径要以&#x2F; 开头</li><li>绝对路径的写法中,不以当前资源的所在路径为出发点,所以不会出现 .&#x2F; 和..&#x2F;</li><li>不同的项目和不同的协议下,绝对路径的基础位置可能不同,要通过测试确定</li><li>绝对路径的好处就是:无论当前资源位置在哪,寻找目标资源路径的写法都一致</li></ul></li><li><p>应用场景</p></li></ul><ol><li><ol><li>前端代码中,href src action 等属性</li><li>请求转发和重定向中的路径</li></ol></li></ol><h3 id="10-2-1-前端路径问题"><a href="#10-2-1-前端路径问题" class="headerlink" title="10.2.1 前端路径问题"></a>10.2.1 前端路径问题</h3><p>前端项目结构</p><p><img src="/../image/servlet/1707138698992-ec544e7a-2c0f-4ed0-b8ed-caa0badb1ec2.png" alt="img"></p><h4 id="10-2-1-1-相对路径情况分析"><a href="#10-2-1-1-相对路径情况分析" class="headerlink" title="10.2.1.1 相对路径情况分析"></a>10.2.1.1 相对路径情况分析</h4><p>相对路径情况1:web&#x2F;index.html中引入web&#x2F;static&#x2F;img&#x2F;logo.png</p><ul><li>访问index.html的url为 : <a href="http://localhost:8080/web03_war_exploded/index.html">http://localhost:8080/web03_war_exploded/index.html</a></li><li>当前资源为 : index.html</li><li>当前资源的所在路径为 : <a href="http://localhost:8080/web03_war_exploded/">http://localhost:8080/web03_war_exploded/</a></li><li>要获取的目标资源url为 : <a href="http://localhost:8080/web03_war_exploded/static/img/logo.png">http://localhost:8080/web03_war_exploded/static/img/logo.png</a></li><li>index.html中定义的了 : <img src="static/img/logo.png"/></li><li>寻找方式就是在当前资源所在路径(<a href="http://localhost:8080/web03_war_exploded/)%E5%90%8E%E6%8B%BC%E6%8E%A5src%E5%B1%9E%E6%80%A7%E5%80%BC(static/img/logo.png),%E6%AD%A3%E5%A5%BD%E6%98%AF%E7%9B%AE%E6%A0%87%E8%B5%84%E6%BA%90%E6%AD%A3%E5%B8%B8%E8%8E%B7%E5%8F%96%E7%9A%84url(http://localhost:8080/web03_war_exploded/static/img/logo.png)">http://localhost:8080/web03_war_exploded/)后拼接src属性值(static/img/logo.png),正好是目标资源正常获取的url(http://localhost:8080/web03_war_exploded/static/img/logo.png)</a></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;img src=<span class="string">&quot;static/img/logo.png&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>相对路径情况2:web&#x2F;a&#x2F;b&#x2F;c&#x2F;test.html中引入web&#x2F;static&#x2F;img&#x2F;logo.png</p><ul><li>访问test.html的url为 : <a href="http://localhost:8080/web03_war_exploded/a/b/c/test.html">http://localhost:8080/web03_war_exploded/a/b/c/test.html</a></li><li>当前资源为 : test.html</li><li>当前资源的所在路径为 : <a href="http://localhost:8080/web03_war_exploded/a/b/c/">http://localhost:8080/web03_war_exploded/a/b/c/</a></li><li>要获取的目标资源url为 : <a href="http://localhost:8080/web03_war_exploded/static/img/logo.png">http://localhost:8080/web03_war_exploded/static/img/logo.png</a></li><li>test.html中定义的了 : <img src="../../../static/img/logo.png"/></li><li>寻找方式就是在当前资源所在路径(<a href="http://localhost:8080/web03_war_exploded/a/b/static/img/logo.png),%E5%85%B6%E4%B8%AD">http://localhost:8080/web03_war_exploded/a/b/c/)后拼接src属性值(../../../static/img/logo.png),其中</a> ..&#x2F;可以抵消一层路径,正好是目标资源正常获取的url(<a href="http://localhost:8080/web03_war_exploded/static/img/logo.png">http://localhost:8080/web03_war_exploded/static/img/logo.png</a>)</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- ../代表上一层路径 --&gt;</span><br><span class="line">    &lt;img src=<span class="string">&quot;../../../static/img/logo.png&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>相对路径情况3:web&#x2F;WEB-INF&#x2F;views&#x2F;view1.html中引入web&#x2F;static&#x2F;img&#x2F;logo.png</p><ul><li>view1.html在WEB-INF下,需要通过Servlet请求转发获得</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/view1Servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">View1Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;WEB-INF/views/view1.html&quot;</span>);</span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>访问view1.html的url为 : <a href="http://localhost:8080/web03_war_exploded/view1Servlet">http://localhost:8080/web03_war_exploded/view1Servlet</a></li><li>当前资源为 : view1Servlet</li><li>当前资源的所在路径为 : <a href="http://localhost:8080/web03_war_exploded/">http://localhost:8080/web03_war_exploded/</a></li><li>要获取的目标资源url为 : <a href="http://localhost:8080/web03_war_exploded/static/img/logo.png">http://localhost:8080/web03_war_exploded/static/img/logo.png</a></li><li>view1.html中定义的了 : <img src="static/img/logo.png"/></li><li>寻找方式就是在当前资源所在路径(<a href="http://localhost:8080/web03_war_exploded/)%E5%90%8E%E6%8B%BC%E6%8E%A5src%E5%B1%9E%E6%80%A7%E5%80%BC(static/img/logo.png),%E6%AD%A3%E5%A5%BD%E6%98%AF%E7%9B%AE%E6%A0%87%E8%B5%84%E6%BA%90%E6%AD%A3%E5%B8%B8%E8%8E%B7%E5%8F%96%E7%9A%84url(http://localhost:8080/web03_war_exploded/static/img/logo.png)">http://localhost:8080/web03_war_exploded/)后拼接src属性值(static/img/logo.png),正好是目标资源正常获取的url(http://localhost:8080/web03_war_exploded/static/img/logo.png)</a></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&quot;static/img/logo.png&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="10-2-1-2-绝对路径情况分析"><a href="#10-2-1-2-绝对路径情况分析" class="headerlink" title="10.2.1.2 绝对路径情况分析"></a>10.2.1.2 绝对路径情况分析</h4><p>绝对路径情况1:web&#x2F;index.html中引入web&#x2F;static&#x2F;img&#x2F;logo.png</p><ul><li>访问index.html的url为 : <a href="http://localhost:8080/web03_war_exploded/index.html">http://localhost:8080/web03_war_exploded/index.html</a></li><li>绝对路径的基准路径为 : <a href="http://localhost:8080/">http://localhost:8080</a></li><li>要获取的目标资源url为 : <a href="http://localhost:8080/web03_war_exploded/static/img/logo.png">http://localhost:8080/web03_war_exploded/static/img/logo.png</a></li><li>index.html中定义的了 : <img src="/web03_war_exploded/static/img/logo.png"/></li><li>寻找方式就是在基准路径(<a href="http://localhost:8080)后面拼接src属性值(/web03_war_exploded/static/img/logo.png),得到的正是目标资源访问的正确路径">http://localhost:8080)后面拼接src属性值(/web03_war_exploded/static/img/logo.png),得到的正是目标资源访问的正确路径</a></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 绝对路径写法 --&gt;</span><br><span class="line">    &lt;img src=<span class="string">&quot;/web03_war_exploded/static/img/logo.png&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>绝对路径情况2:web&#x2F;a&#x2F;b&#x2F;c&#x2F;test.html中引入web&#x2F;static&#x2F;img&#x2F;logo.png</p><ul><li>访问test.html的url为 : <a href="http://localhost:8080/web03_war_exploded/a/b/c/test.html">http://localhost:8080/web03_war_exploded/a/b/c/test.html</a></li><li>绝对路径的基准路径为 : <a href="http://localhost:8080/">http://localhost:8080</a></li><li>要获取的目标资源url为 : <a href="http://localhost:8080/web03_war_exploded/static/img/logo.png">http://localhost:8080/web03_war_exploded/static/img/logo.png</a></li><li>test.html中定义的了 : <img src="/web03_war_exploded/static/img/logo.png"/></li><li>寻找方式就是在基准路径(<a href="http://localhost:8080)后面拼接src属性值(/web03_war_exploded/static/img/logo.png),得到的正是目标资源访问的正确路径">http://localhost:8080)后面拼接src属性值(/web03_war_exploded/static/img/logo.png),得到的正是目标资源访问的正确路径</a></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 绝对路径写法 --&gt;</span><br><span class="line">    &lt;img src=<span class="string">&quot;/web03_war_exploded/static/img/logo.png&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>绝对路径情况3:web&#x2F;WEB-INF&#x2F;views&#x2F;view1.html中引入web&#x2F;static&#x2F;img&#x2F;logo.png</p><ul><li>view1.html在WEB-INF下,需要通过Servlet请求转发获得</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/view1Servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">View1Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;WEB-INF/views/view1.html&quot;</span>);</span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>访问view1.html的url为 : <a href="http://localhost:8080/web03_war_exploded/view1Servlet">http://localhost:8080/web03_war_exploded/view1Servlet</a></li><li>绝对路径的基准路径为 : <a href="http://localhost:8080/">http://localhost:8080</a></li><li>要获取的目标资源url为 : <a href="http://localhost:8080/web03_war_exploded/static/img/logo.png">http://localhost:8080/web03_war_exploded/static/img/logo.png</a></li><li>view1.html中定义的了 : <img src="/web03_war_exploded/static/img/logo.png"/></li><li>寻找方式就是在基准路径(<a href="http://localhost:8080)后面拼接src属性值(/static/img/logo.png),得到的正是目标资源访问的正确路径">http://localhost:8080)后面拼接src属性值(/static/img/logo.png),得到的正是目标资源访问的正确路径</a></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&quot;/web03_war_exploded/static/img/logo.png&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="10-2-1-3-base标签的使用"><a href="#10-2-1-3-base标签的使用" class="headerlink" title="10.2.1.3 base标签的使用"></a>10.2.1.3 base标签的使用</h4><p>base标签定义页面相对路径公共前缀</p><ul><li>base 标签定义在head标签中,用于定义相对路径的公共前缀</li><li>base 标签定义的公共前缀只在相对路径上有效,绝对路径中无效</li><li>如果相对路径开头有 .&#x2F; 或者..&#x2F;修饰,则base标签对该路径同样无效</li></ul><p>index.html 和a&#x2F;b&#x2F;c&#x2F;test.html 以及view1Servlet 中的路径处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;!--定义相对路径的公共前缀,将相对路径转化成了绝对路径--&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;/web03_war_exploded/&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;img src=<span class="string">&quot;static/img/logo.png&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="10-2-1-4-缺省项目上下文路径"><a href="#10-2-1-4-缺省项目上下文路径" class="headerlink" title="10.2.1.4 缺省项目上下文路径"></a>10.2.1.4 缺省项目上下文路径</h4><p>项目上下文路径变化问题</p><ul><li>通过 base标签虽然解决了相对路径转绝对路径问题,但是base中定义的是项目的上下文路径</li><li>项目的上下文路径是可以随意变化的</li><li>一旦项目的上下文路径发生变化,所有base标签中的路径都需要改</li></ul><p>解决方案</p><ul><li>将项目的上下文路径进行缺省设置,设置为 &#x2F;,所有的绝对路径中就不必填写项目的上下文了,直接就是&#x2F;开头即可</li></ul><h3 id="10-2-2-重定向中的路径问题"><a href="#10-2-2-重定向中的路径问题" class="headerlink" title="10.2.2 重定向中的路径问题"></a>10.2.2 重定向中的路径问题</h3><p>目标 :由&#x2F;x&#x2F;y&#x2F;z&#x2F;servletA重定向到a&#x2F;b&#x2F;c&#x2F;test.html</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/x/y/z/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-2-2-1相对路径写法"><a href="#10-2-2-1相对路径写法" class="headerlink" title="10.2.2.1相对路径写法"></a>10.2.2.1相对路径写法</h4><ul><li>访问ServletA的url为 : <a href="http://localhost:8080/web03_war_exploded/x/y/z/servletA">http://localhost:8080/web03_war_exploded/x/y/z/servletA</a></li><li>当前资源为 : servletA</li><li>当前资源的所在路径为 : <a href="http://localhost:8080/web03_war_exploded/x/x/z/">http://localhost:8080/web03_war_exploded/x/x/z/</a></li><li>要获取的目标资源url为 : <a href="http://localhost:8080/web03_war_exploded/a/b/c/test.html">http://localhost:8080/web03_war_exploded/a/b/c/test.html</a></li><li>ServletA重定向的路径 : ..&#x2F;..&#x2F;..&#x2F;a&#x2F;b&#x2F;c&#x2F;test&#x2F;html</li><li>寻找方式就是在当前资源所在路径(<a href="http://localhost:8080/web03_war_exploded/x/y/a/b/c/test/html),%E5%BD%A2%E6%88%90(http://localhost:8080/web03_war_exploded/a/b/c/test/html)%E6%AF%8F%E4%B8%AA../%E6%8A%B5%E6%B6%88%E4%B8%80%E5%B1%82%E7%9B%AE%E5%BD%95,%E6%AD%A3%E5%A5%BD%E6%98%AF%E7%9B%AE%E6%A0%87%E8%B5%84%E6%BA%90%E6%AD%A3%E5%B8%B8%E8%8E%B7%E5%8F%96%E7%9A%84url(http://localhost:8080/web03_war_exploded/a/b/c/test/html)">http://localhost:8080/web03_war_exploded/x/y/z/)后拼接(../../../a/b/c/test/html),形成(http://localhost:8080/web03_war_exploded/x/y/z/../../../a/b/c/test/html)每个../抵消一层目录,正好是目标资源正常获取的url(http://localhost:8080/web03_war_exploded/a/b/c/test/html)</a></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/x/y/z/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 相对路径重定向到test.html</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;../../../a/b/c/test.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-2-2-2绝对路径写法"><a href="#10-2-2-2绝对路径写法" class="headerlink" title="10.2.2.2绝对路径写法"></a>10.2.2.2绝对路径写法</h4><ul><li><p>访问ServletA的url为 : <a href="http://localhost:8080/web03_war_exploded/x/y/z/servletA">http://localhost:8080/web03_war_exploded/x/y/z/servletA</a></p></li><li><p>绝对路径的基准路径为 : <a href="http://localhost:8080/">http://localhost:8080</a></p></li><li><p>要获取的目标资源url为 : <a href="http://localhost:8080/web03_war_exploded/a/b/c/test.html">http://localhost:8080/web03_war_exploded/a/b/c/test.html</a></p></li><li><p>ServletA重定向的路径 : &#x2F;web03_war_exploded&#x2F;a&#x2F;b&#x2F;c&#x2F;test.html</p></li><li><p>寻找方式就是在基准路径(<a href="http://localhost:8080)后面拼接(/web03_war_exploded/a/b/c/test.html),得到">http://localhost:8080)后面拼接(/web03_war_exploded/a/b/c/test.html),得到</a>( <a href="http://localhost:8080/web03_war_exploded/a/b/c/test.html)%E6%AD%A3%E6%98%AF%E7%9B%AE%E6%A0%87%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E7%9A%84%E6%AD%A3%E7%A1%AE%E8%B7%AF%E5%BE%84">http://localhost:8080/web03_war_exploded/a/b/c/test.html)正是目标资源访问的正确路径</a></p></li><li><p>绝对路径中需要填写项目上下文路径,但是上下文路径是变换的</p></li><li><ul><li>可以通过 ServletContext的getContextPath()获取上下文路径</li><li>可以将项目上下文路径定义为 &#x2F; 缺省路径,那么路径中直接以&#x2F;开头即可</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绝对路径中,要写项目上下文路径</span></span><br><span class="line"><span class="comment">//resp.sendRedirect(&quot;/web03_war_exploded/a/b/c/test.html&quot;);</span></span><br><span class="line"><span class="comment">// 通过ServletContext对象动态获取项目上下文路径</span></span><br><span class="line"><span class="comment">//resp.sendRedirect(getServletContext().getContextPath()+&quot;/a/b/c/test.html&quot;);</span></span><br><span class="line"><span class="comment">// 缺省项目上下文路径时,直接以/开头即可</span></span><br><span class="line">resp.sendRedirect(<span class="string">&quot;/a/b/c/test.html&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="10-2-3-请求转发中的路径问题"><a href="#10-2-3-请求转发中的路径问题" class="headerlink" title="10.2.3 请求转发中的路径问题"></a>10.2.3 请求转发中的路径问题</h3><p>目标 :由x&#x2F;y&#x2F;servletB请求转发到a&#x2F;b&#x2F;c&#x2F;test.html</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/x/y/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-2-3-1-相对路径写法"><a href="#10-2-3-1-相对路径写法" class="headerlink" title="10.2.3.1 相对路径写法"></a>10.2.3.1 相对路径写法</h4><ul><li>访问ServletB的url为 : <a href="http://localhost:8080/web03_war_exploded/x/y/servletB">http://localhost:8080/web03_war_exploded/x/y/servletB</a></li><li>当前资源为 : servletB</li><li>当前资源的所在路径为 : <a href="http://localhost:8080/web03_war_exploded/x/x/">http://localhost:8080/web03_war_exploded/x/x/</a></li><li>要获取的目标资源url为 : <a href="http://localhost:8080/web03_war_exploded/a/b/c/test.html">http://localhost:8080/web03_war_exploded/a/b/c/test.html</a></li><li>ServletA请求转发路径 : ..&#x2F;..&#x2F;a&#x2F;b&#x2F;c&#x2F;test&#x2F;html</li><li>寻找方式就是在当前资源所在路径(<a href="http://localhost:8080/web03_war_exploded/x/y/a/b/c/test/html),%E5%BD%A2%E6%88%90(http://localhost:8080/web03_war_exploded/a/b/c/test/html)%E6%AF%8F%E4%B8%AA../%E6%8A%B5%E6%B6%88%E4%B8%80%E5%B1%82%E7%9B%AE%E5%BD%95,%E6%AD%A3%E5%A5%BD%E6%98%AF%E7%9B%AE%E6%A0%87%E8%B5%84%E6%BA%90%E6%AD%A3%E5%B8%B8%E8%8E%B7%E5%8F%96%E7%9A%84url(http://localhost:8080/web03_war_exploded/a/b/c/test/html)">http://localhost:8080/web03_war_exploded/x/y/)后拼接(../../a/b/c/test/html),形成(http://localhost:8080/web03_war_exploded/x/y/../../a/b/c/test/html)每个../抵消一层目录,正好是目标资源正常获取的url(http://localhost:8080/web03_war_exploded/a/b/c/test/html)</a></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/x/y/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;../../a/b/c/test.html&quot;</span>);</span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-2-3-2绝对路径写法"><a href="#10-2-3-2绝对路径写法" class="headerlink" title="10.2.3.2绝对路径写法"></a>10.2.3.2绝对路径写法</h4><ul><li>请求转发只能转发到项目内部的资源,其绝对路径无需添加项目上下文路径</li><li>请求转发绝对路径的基准路径相当于<a href="http://localhost:8080/web03_war_exploded">http://localhost:8080/web03_war_exploded</a></li><li>在项目上下文路径为缺省值时,也无需改变,直接以&#x2F;开头即可</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/x/y/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;/a/b/c/test.html&quot;</span>);</span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-2-3-3目标资源内相对路径处理"><a href="#10-2-3-3目标资源内相对路径处理" class="headerlink" title="10.2.3.3目标资源内相对路径处理"></a>10.2.3.3目标资源内相对路径处理</h4><ul><li>此时需要注意,请求转发是服务器行为,浏览器不知道,地址栏不变化,相当于我们访问test.html的路径为<a href="http://localhost:8080/web03_war_exploded/x/y/servletB">http://localhost:8080/web03_war_exploded/x/y/servletB</a></li><li>那么此时 test.html资源的所在路径就是<a href="http://localhost:8080/web03_war_exploded/x/y/%E6%89%80%E4%BB%A5test.html%E4%B8%AD%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E8%A6%81%E5%9F%BA%E4%BA%8E%E8%AF%A5%E8%B7%AF%E5%BE%84%E7%BC%96%E5%86%99,%E5%A6%82%E6%9E%9C%E4%BD%BF%E7%94%A8%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%88%99%E4%B8%8D%E7%94%A8%E8%80%83%E8%99%91">http://localhost:8080/web03_war_exploded/x/y/所以test.html中相对路径要基于该路径编写,如果使用绝对路径则不用考虑</a></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        当前资源路径是     http:<span class="comment">//localhost:8080/web03_war_exploded/x/y/servletB</span></span><br><span class="line">        当前资源所在路径是  http:<span class="comment">//localhost:8080/web03_war_exploded/x/y/</span></span><br><span class="line">        目标资源路径=所在资源路径+src属性值 </span><br><span class="line">        http:<span class="comment">//localhost:8080/web03_war_exploded/x/y/../../static/img/logo.png</span></span><br><span class="line">        http:<span class="comment">//localhost:8080/web03_war_exploded/static/img/logo.png</span></span><br><span class="line">        得到目标路径正是目标资源的访问路径   </span><br><span class="line">    --&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;../../static/img/logo.png&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="十一-MVC架构模式"><a href="#十一-MVC架构模式" class="headerlink" title="十一 MVC架构模式"></a>十一 MVC架构模式</h1><p>MVC（Model View Controller）是软件工程中的一种<strong>软件架构模式</strong>，它把软件系统分为<strong>模型</strong>、<strong>视图</strong>和<strong>控制器</strong>三个基本部分。用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。</p><ul><li><strong>M</strong>：Model 模型层,具体功能如下</li></ul><ol><li><ol><li>存放和数据库对象的实体类以及一些用于存储非数据库表完整相关的VO对象</li><li>存放一些对数据进行逻辑运算操作的的一些业务处理代码</li></ol></li></ol><ul><li><strong>V</strong>：View 视图层,具体功能如下</li></ul><ol><li><ol><li>存放一些视图文件相关的代码 html css js等</li><li>在前后端分离的项目中,后端已经没有视图文件,该层次已经衍化成独立的前端项目</li></ol></li></ol><ul><li><strong>C</strong>：Controller 控制层,具体功能如下</li></ul><ol><li><ol><li>接收客户端请求,获得请求数据</li><li>将准备好的数据响应给客户端</li></ol></li></ol><p>MVC模式下,项目中的常见包</p><ul><li>M:</li></ul><ol><li><ol><li>实体类包(pojo &#x2F;entity &#x2F;bean) 专门存放和数据库对应的实体类和一些VO对象</li><li>数据库访问包(dao&#x2F;mapper) 专门存放对数据库不同表格CURD方法封装的一些类</li><li>服务包(service) 专门存放对数据进行业务逻辑运算的一些类</li></ol></li></ol><ul><li>C:</li></ul><ol><li><ol><li>控制层包(controller)</li></ol></li></ol><ul><li>V:</li></ul><ol><li><ol><li>web目录下的视图资源 html css js img 等</li><li>前端工程化后,在后端项目中已经不存在了</li></ol></li></ol><p>非前后端分离的MVC</p><p><img src="/../image/servlet/1707138732838-3be988f3-7591-457a-9b48-67b3d59bec6a.png" alt="img"></p><p><img src="/../image/servlet/1707493133512-09d24438-5d3a-459c-9dac-a987092330c3.png" alt="img"></p><p>前后端分离的MVC</p><p><img src="/../image/servlet/1707138738214-9ee059b8-5562-4a3d-b2b7-922c0de35a69.png" alt="img"></p><h1 id="十二-案例开发-日程管理-第二期"><a href="#十二-案例开发-日程管理-第二期" class="headerlink" title="十二 案例开发-日程管理-第二期"></a>十二 案例开发-日程管理-第二期</h1><h2 id="12-1-项目搭建"><a href="#12-1-项目搭建" class="headerlink" title="12.1 项目搭建"></a>12.1 项目搭建</h2><h3 id="12-1-1-数据库准备"><a href="#12-1-1-数据库准备" class="headerlink" title="12.1.1 数据库准备"></a>12.1.1 数据库准备</h3><ul><li>创建schedule_system数据库并执行如下语句</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line"><span class="type">SET</span> <span class="variable">FOREIGN_KEY_CHECKS</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- 创建日程表</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_schedule`;</span><br><span class="line">CREATE TABLE `sys_schedule`  (</span><br><span class="line">  `sid` <span class="type">int</span> NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `uid` <span class="type">int</span> NULL DEFAULT NULL,</span><br><span class="line">  `title` varchar(<span class="number">20</span>) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `completed` <span class="type">int</span>(<span class="number">1</span>) NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY <span class="title function_">KEY</span> <span class="params">(`sid`)</span> USING BTREE</span><br><span class="line">) ENGINE = <span class="type">InnoDB</span> <span class="variable">AUTO_INCREMENT</span> <span class="operator">=</span> <span class="number">1</span> <span class="type">CHARACTER</span> <span class="variable">SET</span> <span class="operator">=</span> <span class="type">utf8mb4</span> <span class="variable">COLLATE</span> <span class="operator">=</span> <span class="type">utf8mb4_0900_ai_ci</span> <span class="variable">ROW_FORMAT</span> <span class="operator">=</span> Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- 插入日程数据</span><br><span class="line">-- ----------------------------</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- 创建用户表</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_user`;</span><br><span class="line">CREATE TABLE `sys_user`  (</span><br><span class="line">  `uid` <span class="type">int</span> NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(<span class="number">10</span>) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `user_pwd` varchar(<span class="number">100</span>) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY <span class="title function_">KEY</span> <span class="params">(`uid`)</span> USING BTREE,</span><br><span class="line">  UNIQUE INDEX `username`(`username`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB <span class="type">CHARACTER</span> <span class="variable">SET</span> <span class="operator">=</span> <span class="type">utf8mb4</span> <span class="variable">COLLATE</span> <span class="operator">=</span> <span class="type">utf8mb4_0900_ai_ci</span> <span class="variable">ROW_FORMAT</span> <span class="operator">=</span> Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- 插入用户数据</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_user` VALUES (<span class="number">1</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>);</span><br><span class="line">INSERT INTO `sys_user` VALUES (<span class="number">2</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">SET</span> <span class="variable">FOREIGN_KEY_CHECKS</span> <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>获得如下表格</li><li><img src="/../image/servlet/1707138745053-04018f2e-7834-4111-8dd6-b73571a0de85.png" alt="img"></li></ul><h3 id="12-1-2-项目结构"><a href="#12-1-2-项目结构" class="headerlink" title="12.1.2 项目结构"></a>12.1.2 项目结构</h3><p><img src="/../image/servlet/1707138749822-01d50bdc-8b09-4edb-b3ec-88fd157bb8bb.png" alt="img"></p><h3 id="12-1-3-导入依赖"><a href="#12-1-3-导入依赖" class="headerlink" title="12.1.3 导入依赖"></a>12.1.3 导入依赖</h3><p><img src="/../image/servlet/1707138754957-72474074-26b6-48c0-8149-9e32f77858f8.png" alt="img"></p><h3 id="12-1-4-pojo包处理"><a href="#12-1-4-pojo包处理" class="headerlink" title="12.1.4 pojo包处理"></a>12.1.4 pojo包处理</h3><p>使用lombok处理getter setter equals hashcode 构造器 </p><p><img src="/../image/servlet/1707532107496-4f5e6020-a067-4af7-97f5-66c671553291.png" alt="img"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-----------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 1实体类的类名和表面应该对应</span></span><br><span class="line"><span class="comment">* 2实体类的属性名和表格的列名应该对应</span></span><br><span class="line"><span class="comment">* 3每个属性都必须是私有的</span></span><br><span class="line"><span class="comment">* 4每个属性都应该具备get和set方法</span></span><br><span class="line"><span class="comment">* 5必须具备无参构造器</span></span><br><span class="line"><span class="comment">* 6应该实现序列化结构(缓存 分布式项目数据传递 可能会将对象序列化)</span></span><br><span class="line"><span class="comment">* 7应该重写类的hashcode 和equals方法、</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 使用Lombok帮助我们生成这些内容</span></span><br><span class="line"><span class="comment">* lombok使用</span></span><br><span class="line"><span class="comment">*   检查是否安装lombok插件</span></span><br><span class="line"><span class="comment">*   检查是否勾选 enable annotation processing</span></span><br><span class="line"><span class="comment">*   导入lombok依赖</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span><span class="comment">//添加全参构造</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span><span class="comment">//添加无参构造</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUser</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  Integer id;</span><br><span class="line">    <span class="keyword">private</span>  String username;</span><br><span class="line">    <span class="keyword">private</span>  String userPwd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysSchedule</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer sid;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Integer completed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------------------------------</span></span><br></pre></td></tr></table></figure><h3 id="12-1-5-dao包处理"><a href="#12-1-5-dao包处理" class="headerlink" title="12.1.5 dao包处理"></a>12.1.5 dao包处理</h3><p>导入JDBCUtil连接池工具类并准备jdbc.properties配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; threadLocal =<span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line">    <span class="comment">// 初始化连接池</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">// 可以帮助我们读取.properties配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> JDBCUtil.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(resourceAsStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*1 向外提供连接池的方法*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*2 向外提供连接的方法*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == connection) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection = dataSource.getConnection();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            threadLocal.set(connection);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*定义一个归还连接的方法 (解除和ThreadLocal之间的关联关系) */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">releaseConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != connection) &#123;</span><br><span class="line">            threadLocal.remove();</span><br><span class="line">            <span class="comment">// 把连接设置回自动提交的连接</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.setAutoCommit(<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// 自动归还到连接池</span></span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/schedule_system</span></span><br><span class="line">username=root</span><br><span class="line">password=root</span><br><span class="line">initialSize=<span class="number">5</span></span><br><span class="line">maxActive=<span class="number">10</span></span><br><span class="line">maxWait=<span class="number">1000</span></span><br></pre></td></tr></table></figure><ul><li>创建BaseDao对象并复制如下代码</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.dao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.util.JDBCUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseDao</span> &#123;</span><br><span class="line">    <span class="comment">// 公共的查询方法  返回的是单个对象</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">baseQueryObject</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object ... args)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtil.getConnection();</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 准备语句对象</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 设置语句上的参数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                preparedStatement.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行 查询</span></span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">                t = (T) resultSet.getObject(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != resultSet) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    resultSet.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != preparedStatement) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    preparedStatement.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            JDBCUtil.releaseConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 公共的查询方法  返回的是对象的集合</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">baseQuery</span><span class="params">(Class clazz, String sql, Object ... args)</span>&#123;</span><br><span class="line">        List&lt;T&gt; list =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtil.getConnection();</span><br><span class="line">        PreparedStatement preparedStatement=<span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 准备语句对象</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 设置语句上的参数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                preparedStatement.setObject(i+<span class="number">1</span>,args[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行 查询</span></span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="type">ResultSetMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> resultSet.getMetaData();</span><br><span class="line">            <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> metaData.getColumnCount();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将结果集通过反射封装成实体类对象</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                <span class="comment">// 使用反射实例化对象</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span>clazz.getDeclaredConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> metaData.getColumnLabel(i);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> resultSet.getObject(columnName);</span><br><span class="line">                    <span class="comment">// 处理datetime类型字段和java.util.Data转换问题</span></span><br><span class="line">                    <span class="keyword">if</span>(value.getClass().equals(LocalDateTime.class))&#123;</span><br><span class="line">                        value= Timestamp.valueOf((LocalDateTime) value);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(columnName);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    field.set(obj,value);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                list.add((T)obj);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> !=resultSet) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    resultSet.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != preparedStatement) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    preparedStatement.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            JDBCUtil.releaseConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通用的增删改方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">baseUpdate</span><span class="params">(String sql,Object ... args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtil.getConnection();</span><br><span class="line">        PreparedStatement preparedStatement=<span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 准备语句对象</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 设置语句上的参数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                preparedStatement.setObject(i+<span class="number">1</span>,args[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行 增删改 executeUpdate</span></span><br><span class="line">            rows = preparedStatement.executeUpdate();</span><br><span class="line">            <span class="comment">// 释放资源(可选)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != preparedStatement) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    preparedStatement.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            JDBCUtil.releaseConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回的是影响数据库记录数</span></span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>dao层所有接口</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.dao;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysUserDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.dao;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysScheduleDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------------------------------------------</span></span><br></pre></td></tr></table></figure><ul><li>dao层所有实现类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.dao.impl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.SysUserDao;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span> <span class="keyword">implements</span> <span class="title class_">SysUserDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.dao.impl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.SysScheduleDao;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysScheduleDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span> <span class="keyword">implements</span> <span class="title class_">SysScheduleDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><h3 id="12-1-6-service包处理"><a href="#12-1-6-service包处理" class="headerlink" title="12.1.6 service包处理"></a>12.1.6 service包处理</h3><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysUserService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysScheduleService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><ul><li>实现类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.SysUserService;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SysUserService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.SysScheduleService;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysScheduleServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SysScheduleService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><h3 id="12-1-7-controller包处理"><a href="#12-1-7-controller包处理" class="headerlink" title="12.1.7 controller包处理"></a>12.1.7 controller包处理</h3><ul><li>BaseController处理请求路径问题</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> req.getRequestURI();</span><br><span class="line">        String[] split = requestURI.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span>split[split.length-<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 通过反射获取要执行的方法</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method method=clazz.getDeclaredMethod(methodName,HttpServletRequest.class,HttpServletResponse.class);</span><br><span class="line">            <span class="comment">// 设置方法可以访问</span></span><br><span class="line">            method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 通过反射执行代码</span></span><br><span class="line">            method.invoke(<span class="built_in">this</span>,req,resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多个处理器继承BaseController</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//----------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/user/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/schedule/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysScheduleController</span>  <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><h3 id="12-1-8-加密工具类的使用"><a href="#12-1-8-加密工具类的使用" class="headerlink" title="12.1.8 加密工具类的使用"></a>12.1.8 加密工具类的使用</h3><ul><li>导入MD5Util工具类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.util;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MD5Util</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String strSrc)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">char</span> hexChars[] = &#123; <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span> &#125;;</span><br><span class="line">            <span class="type">byte</span>[] bytes = strSrc.getBytes();</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            md.update(bytes);</span><br><span class="line">            bytes = md.digest();</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> bytes.length;</span><br><span class="line">            <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[j * <span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">                <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> bytes[i];</span><br><span class="line">                chars[k++] = hexChars[b &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">0xf</span>];</span><br><span class="line">                chars[k++] = hexChars[b &amp; <span class="number">0xf</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;MD5加密出错!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-1-9-页面文件的导入"><a href="#12-1-9-页面文件的导入" class="headerlink" title="12.1.9 页面文件的导入"></a>12.1.9 页面文件的导入</h3><ul><li>复制资源下的日程管理中的HTML到项目的web目录下即可</li></ul><p><img src="/../image/servlet/1707138789896-c1fda14d-dd38-49f6-9d94-b919e95d47d8.png" alt="img"></p><h2 id="12-3-业务代码"><a href="#12-3-业务代码" class="headerlink" title="12.3 业务代码"></a>12.3 业务代码</h2><h3 id="12-3-1-注册业务处理"><a href="#12-3-1-注册业务处理" class="headerlink" title="12.3.1 注册业务处理"></a>12.3.1 注册业务处理</h3><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysUser;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.SysUserService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.impl.SysUserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/user/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserController</span>  <span class="keyword">extends</span> <span class="title class_">BaseContoller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">SysUserService</span> <span class="variable">userService</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SysUserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收用户注册请求的业务处理方法( 业务接口 不是java中的interface  )</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">regist</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 1 接收客户端提交的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userPwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userPwd&quot;</span>);</span><br><span class="line">        <span class="comment">// 2 调用服务层方法,完成注册功能</span></span><br><span class="line">            <span class="comment">//将参数放入一个SysUser对象中,在调用regist方法时传入</span></span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">sysUser</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SysUser</span>(<span class="literal">null</span>,username,userPwd);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span>userService.regist(sysUser);</span><br><span class="line">        <span class="comment">// 3 根据注册结果(成功  失败) 做页面跳转</span></span><br><span class="line">        <span class="keyword">if</span>(rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/registSuccess.html&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/registFail.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysUserService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户完成注册的业务方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registUser 用于保存注册用户名和密码的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 注册成功返回&gt;0的整数,否则返回0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">regist</span><span class="params">(SysUser registUser)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.SysUserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.impl.SysUserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysUser;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.SysUserService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.util.MD5Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserServiceImpl</span>  <span class="keyword">implements</span> <span class="title class_">SysUserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SysUserDao</span>  <span class="variable">userDao</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SysUserDaoImpl</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">regist</span><span class="params">(SysUser sysUser)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将用户的明文密码转换为密文密码</span></span><br><span class="line">        sysUser.setUserPwd(MD5Util.encrypt(sysUser.getUserPwd()));</span><br><span class="line">        <span class="comment">// 调用DAO 层的方法  将sysUser信息存入数据库</span></span><br><span class="line">        <span class="keyword">return</span> userDao.addSysUser(sysUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>dao</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysUserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向数据库中增加一条用户记录的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sysUser 要增加的记录的username和user_pwd字段以SysUser实体类对象的形式接收</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 增加成功返回1 增加失败返回0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addSysUser</span><span class="params">(SysUser sysUser)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.SysUserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysUser;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span> <span class="keyword">implements</span> <span class="title class_">SysUserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addSysUser</span><span class="params">(SysUser sysUser)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span><span class="string">&quot;insert into sys_user values(DEFAULT,?,?)&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> baseUpdate(sql,sysUser.getUsername(),sysUser.getUserPwd());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-3-2-登录业务处理"><a href="#12-3-2-登录业务处理" class="headerlink" title="12.3.2 登录业务处理"></a>12.3.2 登录业务处理</h3><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysUser;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.SysUserService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.impl.SysUserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.util.MD5Util;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/user/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserController</span>  <span class="keyword">extends</span> <span class="title class_">BaseContoller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">SysUserService</span> <span class="variable">userService</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SysUserServiceImpl</span>();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收用登录请求,完成的登录业务接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1 接收用户名和密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userPwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userPwd&quot;</span>);</span><br><span class="line">        <span class="comment">//2 调用服务层方法,根据用户名查询用户信息</span></span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">loginUser</span> <span class="operator">=</span>userService.findByUsername(username);</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> == loginUser)&#123;</span><br><span class="line">            <span class="comment">// 跳转到用户名有误提示页</span></span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/loginUsernameError.html&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(! MD5Util.encrypt(userPwd).equals(loginUser.getUserPwd()))&#123;</span><br><span class="line">            <span class="comment">//3 判断密码是否匹配</span></span><br><span class="line">            <span class="comment">// 跳转到密码有误提示页</span></span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/loginUserPwdError.html&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//4 跳转到首页</span></span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/showSchedule.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysUserService</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名获得完整用户信息的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 要查询的用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果找到了返回SysUser对象,找不到返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SysUser <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.schedule.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.SysUserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.impl.SysUserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysUser;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.service.SysUserService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.util.MD5Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SysUserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SysUserDao</span> <span class="variable">userDao</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SysUserDaoImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SysUser <span class="title function_">findByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用服务层方法,继续查询</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userDao.findByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>dao</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.schedule.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysUserDao</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名获得完整用户信息的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 要查询的用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果找到了返回SysUser对象,找不到返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SysUser <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.dao.SysUserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.schedule.pojo.SysUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span> <span class="keyword">implements</span> <span class="title class_">SysUserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SysUser <span class="title function_">findByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span><span class="string">&quot;select uid,username, user_pwd userPwd from sys_user where username = ?&quot;</span>;</span><br><span class="line">        List&lt;SysUser&gt; userList = baseQuery(SysUser.class, sql, username);</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">null</span> != userList&amp;&amp; userList.size()&gt;<span class="number">0</span>? userList.get(<span class="number">0</span>):<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML、Tomcat、HTTP</title>
      <link href="/2024/02/05/XML%E3%80%81Tomcat%E3%80%81HTTP/"/>
      <url>/2024/02/05/XML%E3%80%81Tomcat%E3%80%81HTTP/</url>
      
        <content type="html"><![CDATA[<h1 id="一-XML"><a href="#一-XML" class="headerlink" title="一 XML"></a>一 XML</h1><p>XML是EXtensible Markup Language的缩写，翻译过来就是可扩展标记语言。所以很明显，XML和HTML一样都是标记语言，也就是说它们的基本语法都是标签。</p><ul><li><p><strong>可扩展</strong> 三个字表面上的意思是XML允许自定义格式。但这不代表你可以随便写。 </p></li><li><p>在XML基本语法规范的基础上，你使用的那些第三方应用程序、框架会通过XML约束的方式强制规定配置文件中可以写什么和怎么写 </p></li><li><p>XML基本语法这个知识点的定位是：我们不需要从零开始，从头到尾的一行一行编写XML文档，而是在第三方应用程序、框架已提供的配置文件的基础上修改。要改成什么样取决于你的需求，而怎么改取决XML基本语法和具体的XML约束。</p></li></ul><h2 id="1-1-常见配置文件类型"><a href="#1-1-常见配置文件类型" class="headerlink" title="1.1 常见配置文件类型"></a>1.1 常见配置文件类型</h2><ol><li><p>properties文件,例如druid连接池就是使用properties文件作为配置文件</p></li><li><p>XML文件,例如Tomcat就是使用XML文件作为配置文件</p></li><li><p>YAML文件,例如SpringBoot就是使用YAML作为配置文件</p></li><li><p>json文件,通常用来做文件传输，也可以用来做前端或者移动端的配置文件</p></li><li><p>等等…</p></li></ol><h3 id="1-1-1-properties配置文件"><a href="#1-1-1-properties配置文件" class="headerlink" title="1.1.1 properties配置文件"></a>1.1.1 properties配置文件</h3><p>示例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">atguigu.jdbc.url=jdbc:mysql://localhost:3306/atguigu</span><br><span class="line">atguigu.jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">atguigu.jdbc.username=root</span><br><span class="line">atguigu.jdbc.password=root</span><br></pre></td></tr></table></figure><p>语法规范</p><ul><li><p>由键值对组成</p></li><li><p>键和值之间的符号是等号</p></li><li><p>每一行都必须顶格写，前面不能有空格之类的其他符号</p></li></ul><h3 id="1-1-2-xml配置文件"><a href="#1-1-2-xml配置文件" class="headerlink" title="1.1.2 xml配置文件"></a>1.1.2 xml配置文件</h3><p>示例</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><p>XML的基本语法</p><ul><li><p>XML的基本语法和HTML的基本语法简直如出一辙。其实这不是偶然的，XML基本语法+HTML约束&#x3D;HTML语法。在逻辑上HTML确实是XML的子集。</p></li><li><p>XML文档声明 这部分基本上就是固定格式，要注意的是文档声明一定要从第一行第一列开始写</p></li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>根标签 </p></li><li><ul><li>根标签有且只能有一个。</li></ul></li><li><p>标签关闭 </p></li><li><ul><li>双标签：开始标签和结束标签必须成对出现。</li></ul></li><li><ul><li>单标签：单标签在标签内关闭。</li></ul></li><li><p>标签嵌套 </p></li><li><ul><li>可以嵌套，但是不能交叉嵌套。</li></ul></li><li><p>注释不能嵌套</p></li><li><p>标签名、属性名建议使用小写字母</p></li><li><p>属性 </p></li><li><ul><li>属性必须有值</li></ul></li><li><ul><li>属性值必须加引号，单双都行</li></ul></li></ul><p>XML的约束(稍微了解)</p><p>将来我们主要就是根据XML约束中的规定来编写XML配置文件，而且会在我们编写XML的时候根据约束来提示我们编写, 而XML约束主要包括DTD和Schema两种。</p><ul><li><p>DTD</p></li><li><p>Schema</p></li></ul><p>Schema约束要求我们一个XML文档中，所有标签，所有属性都必须在约束中有明确的定义。</p><p>下面我们以web.xml的约束声明为例来做个说明：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-DOM4J进行XML解析（了解）"><a href="#1-2-DOM4J进行XML解析（了解）" class="headerlink" title="1.2 DOM4J进行XML解析（了解）"></a>1.2 DOM4J进行XML解析（了解）</h2><h3 id="1-2-1-DOM4J的使用步骤"><a href="#1-2-1-DOM4J的使用步骤" class="headerlink" title="1.2.1 DOM4J的使用步骤"></a>1.2.1 DOM4J的使用步骤</h3><ol><li><p>导入jar包 dom4j.jar</p></li><li><p>创建解析器对象(SAXReader)</p></li><li><p>解析xml 获得Document对象</p></li><li><p>获取根节点RootElement</p></li><li><p>获取根节点下的子节点</p></li></ol><h3 id="1-2-2-DOM4J的API介绍"><a href="#1-2-2-DOM4J的API介绍" class="headerlink" title="1.2.2 DOM4J的API介绍"></a>1.2.2 DOM4J的API介绍</h3><p>1.创建SAXReader对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br></pre></td></tr></table></figure><p> \2. 解析XML获取Document对象: 需要传入要解析的XML文件的字节输入流</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> reader.read(inputStream);</span><br></pre></td></tr></table></figure><p> \3. 获取文档的根标签</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> documen.getRootElement()</span><br></pre></td></tr></table></figure><p> \4. 获取标签的子标签</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取所有子标签</span></span><br><span class="line">List&lt;Element&gt; sonElementList = rootElement.elements();</span><br><span class="line"><span class="comment">//获取指定标签名的子标签</span></span><br><span class="line">List&lt;Element&gt; sonElementList = rootElement.elements(<span class="string">&quot;标签名&quot;</span>);</span><br></pre></td></tr></table></figure><p> \5. 获取标签体内的文本</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> element.getText();</span><br></pre></td></tr></table></figure><p> \6. 获取标签的某个属性的值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> element.attributeValue(<span class="string">&quot;属性名&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="二-Tomcat10"><a href="#二-Tomcat10" class="headerlink" title="二 Tomcat10"></a>二 Tomcat10</h1><h2 id="2-1-WEB服务器"><a href="#2-1-WEB服务器" class="headerlink" title="2.1 WEB服务器"></a>2.1 WEB服务器</h2><p>Web服务器通常由硬件和软件共同构成。</p><ul><li><p>硬件：电脑，提供服务供其它客户电脑访问</p></li><li><p>软件：电脑上安装的服务器软件，安装后能提供服务给网络中的其他计算机，将本地文件映射成一个虚拟的url地址供网络中的其他人访问。</p></li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/web%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="img"></p><p>常见的JavaWeb服务器：</p><ul><li><p><strong>Tomcat（Apache）</strong>：当前应用最广的JavaWeb服务器</p></li><li><p>Jetty:更轻量级、更灵活的servlet容器</p></li><li><p>JBoss（Redhat红帽）：支持JavaEE，应用比较广EJB容器 –&gt; SSH轻量级的框架代替</p></li><li><p>GlassFish（Orcale）：Oracle开发JavaWeb服务器，应用不是很广</p></li><li><p>Resin（Caucho）：支持JavaEE，应用越来越广</p></li><li><p>Weblogic（Orcale）：要钱的！支持JavaEE，适合大型项目</p></li><li><p>Websphere（IBM）：要钱的！支持JavaEE，适合大型项目</p></li></ul><h2 id="2-2-Tomcat服务器"><a href="#2-2-Tomcat服务器" class="headerlink" title="2.2 Tomcat服务器"></a>2.2 Tomcat服务器</h2><h3 id="2-2-1-简介"><a href="#2-2-1-简介" class="headerlink" title="2.2.1 简介"></a>2.2.1 简介</h3><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/Tomcat.png" alt="img"></p><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p><h3 id="2-2-2-安装"><a href="#2-2-2-安装" class="headerlink" title="2.2.2 安装"></a>2.2.2 安装</h3><p>版本</p><ul><li><p>版本：企业用的比较广泛的是8.0和9.0,目前比较新正式发布版本是Tomcat10.0, Tomcat11仍然处于测试阶段。</p></li><li><p>注意：由于10的版本变化，8和9开发的程序无法运行javax.* to jakarta.*.包名发生了变化</p></li><li><p>JAVAEE 版本和Servlet版本号对应关系 <a href="https://jakarta.ee/release/">Jakarta EE Releases</a></p></li></ul><table><thead><tr><th><strong>Servlet</strong> Version</th><th>EE Version</th></tr></thead><tbody><tr><td>6.1</td><td>Jakarta EE ?</td></tr><tr><td>6.0</td><td>Jakarta EE 10</td></tr><tr><td>5.0</td><td>Jakarta EE 9&#x2F;9.1</td></tr><tr><td>4.0</td><td>JAVA EE 8</td></tr><tr><td>3.1</td><td>JAVA EE 7</td></tr><tr><td>3.1</td><td>JAVA EE 7</td></tr><tr><td>3.0</td><td>JAVAEE 6</td></tr></tbody></table><ul><li>Tomcat 版本和Servlet版本之间的对应关系</li></ul><table><thead><tr><th><strong>Servlet</strong> Version</th><th><strong>Tomcat</strong>  Version</th><th><strong>JDK</strong> Version</th></tr></thead><tbody><tr><td>6.1</td><td>11.0.x</td><td>17 and later</td></tr><tr><td>6.0</td><td>10.1.x</td><td>11 and later</td></tr><tr><td>5.0</td><td>10.0.x (superseded)</td><td>8 and later</td></tr><tr><td>4.0</td><td>9.0.x</td><td>8 and later</td></tr><tr><td>3.1</td><td>8.5.x</td><td>7 and later</td></tr><tr><td>3.1</td><td>8.0.x (superseded)</td><td>7 and later</td></tr><tr><td>3.0</td><td>7.0.x (archived)</td><td>6 and later (7 and later for WebSocket)</td></tr></tbody></table><p>下载</p><ul><li><p>Tomcat官方网站：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p></li><li><p>安装版：需要安装，一般不考虑使用。</p></li><li><p>解压版: 直接解压缩使用，我们使用的版本。<img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/%E4%B8%8B%E8%BD%BD.png" alt="img"></p></li></ul><p>安装</p><ol><li>正确安装JDK并配置JAVA_HOME(以JDK17为例 <a href="https://injdk.cn中可以下载各种版本的jdk/">https://injdk.cn中可以下载各种版本的JDK</a>)</li></ol><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="img"></p><ol><li>解压tomcat到非中文无空格目录</li></ol><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/%E8%A7%A3%E5%8E%8B.png" alt="img"></p><ol><li>点击bin&#x2F;startup.bat启动</li></ol><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/%E5%90%AF%E5%8A%A8.png" alt="img"><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/%E5%91%BD%E4%BB%A4%E8%A1%8C.png" alt="img"></p><ol><li>打开浏览器输入 <a href="http://localhost:8080访问测试">http://localhost:8080访问测试</a></li></ol><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/%E8%AE%BF%E9%97%AE.png" alt="img"></p><ol><li>直接关闭窗口或者运行 bin&#x2F;shutdown.bat关闭tomcat</li></ol><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/%E5%85%B3%E9%97%ADTomcat.png" alt="img"></p><ol><li>处理dos窗口日志中文乱码问题: 修改conf&#x2F;logging.properties,将所有的UTF-8修改为GBK</li></ol><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/%E4%BF%AE%E6%94%B9%E4%B9%B1%E7%A0%81.png" alt="img"></p><ul><li>修改前</li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/%E4%BF%AE%E6%94%B9%E5%89%8D.png" alt="img"></p><ul><li>修改后 控制台的字符集</li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/%E4%BF%AE%E6%94%B9%E5%90%8E.png" alt="img"></p><ul><li>重启测试</li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/%E9%87%8D%E5%90%AF%E6%B5%8B%E8%AF%95.png" alt="img"></p><p>配置环境变量（可配可不配但Linux必须配置）</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="img"></p><h2 id="2-3-Tomcat目录及测试"><a href="#2-3-Tomcat目录及测试" class="headerlink" title="2.3 Tomcat目录及测试"></a>2.3 Tomcat目录及测试</h2><p>你的Tomcat解压目录 这个目录下直接包含Tomcat的bin目录，conf目录等，我们称之为<strong>Tomcat的安装目录或根目录</strong>。</p><ul><li><p>bin：该目录下存放的是二进制可执行文件，如果是安装版，那么这个目录下会有两个exe文件：tomcat10.exe、tomcat10w.exe，前者是在控制台下启动Tomcat，后者是弹出GUI窗口启动Tomcat；如果是解压版，那么会有startup.bat和shutdown.bat文件，startup.bat用来启动Tomcat，但需要先配置JAVA_HOME环境变量才能启动，shutdawn.bat用来停止Tomcat； </p></li><li><p>conf：这是一个非常非常重要的目录，这个目录下有四个最为重要的文件： </p></li><li><ul><li><strong>server.xml：配置整个服务器信息。例如修改端口号。默认HTTP请求的端口号是：8080</strong></li></ul></li><li><ul><li>tomcat-users.xml：存储tomcat用户的文件，这里保存的是tomcat的用户名及密码，以及用户的角色信息。可以按着该文件中的注释信息添加tomcat用户，然后就可以在Tomcat主页中进入Tomcat Manager页面了；</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://tomcat.apache.org/xml&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-script&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-script&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-jmx&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-status&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;admin&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">&quot;admin&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">roles</span>=<span class="string">&quot;admin-gui,admin-script,manager-gui,manager-script,manager-jmx,manager-status&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>    web.xml：部署描述符文件，这个文件中注册了很多MIME类型，即文档类型。这些MIME类型是客户端与服务器之间说明文档类型的，如用户请求一个html网页，那么服务器还会告诉客户端浏览器响应的文档是text/html类型的，这就是一个MIME类型。客户端浏览器通过这个MIME类型就知道如何处理它了。当然是在浏览器中显示这个html文件了。但如果服务器响应的是一个exe文件，那么浏览器就不可能显示它，而是应该弹出下载窗口才对。MIME就是用来说明文档的内容是什么类型的！ </code></pre><ul><li><ul><li>context.xml：对所有应用的统一配置，通常我们不会去配置它。</li></ul></li><li><p>lib：Tomcat的类库，里面是一大堆jar文件。如果需要添加Tomcat依赖的jar文件，可以把它放到这个目录中，当然也可以把应用依赖的jar文件放到这个目录中，这个目录中的jar所有项目都可以共享之，但这样你的应用放到其他Tomcat下时就不能再共享这个目录下的jar包了，所以建议只把Tomcat需要的jar包放到这个目录下； </p></li><li><p>logs：这个目录中都是日志文件，记录了Tomcat启动和关闭的信息，如果启动Tomcat时有错误，那么异常也会记录在日志文件中。 </p></li><li><p>temp：存放Tomcat的临时文件，这个目录下的东西可以在停止Tomcat后删除！ </p></li><li><p><strong>webapps：存放web项目的目录，其中每个文件夹都是一个项目</strong>；如果这个目录下已经存在了目录，那么都是tomcat自带的项目。其中ROOT是一个特殊的项目，在地址栏中访问：<a href="http://127.0.0.1:8080，没有给出项目目录时，对应的就是ROOT项目.http://localhost:8080/examples，进入示例项目。其中examples"就是项目名，即文件夹的名字。">http://127.0.0.1:8080，没有给出项目目录时，对应的就是ROOT项目.http://localhost:8080/examples，进入示例项目。其中examples&quot;就是项目名，即文件夹的名字。</a> </p></li><li><p>work：运行时生成的文件，最终运行的文件都在这里。通过webapps中的项目生成的！可以把这个目录下的内容删除，再次运行时会生再次生成work目录。当客户端用户访问一个JSP文件时，Tomcat会通过JSP生成Java文件，然后再编译Java文件生成class文件，生成的java和class文件都会存放到这个目录下。 </p></li><li><p>LICENSE：许可证。 </p></li><li><p>NOTICE：说明文件。</p></li></ul><h2 id="2-4-WEB项目的标准结构"><a href="#2-4-WEB项目的标准结构" class="headerlink" title="2.4 WEB项目的标准结构"></a>2.4 WEB项目的标准结构</h2><p>一个标准的可以用于发布的WEB项目标准结构如下</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/web%E7%BB%93%E6%9E%84.png" alt="img"></p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/web%E7%BB%93%E6%9E%841.png" alt="img"></p><ul><li><p>app  本应用根目录 </p></li><li><ul><li>static 非必要目录,约定俗成的名字,一般在此处放静态资源 ( css  js  img)</li></ul></li><li><ul><li>WEB-INF  必要目录,必须叫WEB-INF,受保护的资源目录,浏览器通过url不可以直接访问的目录</li></ul></li><li><ul><li><ul><li>classes   必要目录,src下源代码,配置文件,编译后会在该目录下,web项目中如果没有源码,则该目录不会出现</li></ul></li></ul></li><li><ul><li><ul><li>lib       必要目录,项目依赖的jar编译后会出现在该目录下,web项目要是没有依赖任何jar,则该目录不会出现</li></ul></li></ul></li><li><ul><li><ul><li>web.xml  必要文件,web项目的基本配置文件. 较新的版本中可以没有该文件,但是学习过程中还是需要该文件</li></ul></li></ul></li><li><ul><li>index.html  非必要文件,index.html&#x2F;index.htm&#x2F;index.jsp为默认的欢迎页</li></ul></li></ul><p>url的组成部分和项目中资源的对应关系</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/url%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB.png" alt="img"></p><h2 id="2-5-WEB项目部署的方式"><a href="#2-5-WEB项目部署的方式" class="headerlink" title="2.5 WEB项目部署的方式"></a>2.5 WEB项目部署的方式</h2><p>方式1  直接将编译好的项目放在webapps目录下  (已经演示)</p><p>方式2  将编译好的项目打成war包放在webapps目录下,tomcat启动后会自动解压war包(其实和第一种一样)</p><p>方式3  可以将项目放在非webapps的其他目录下,在tomcat中通过配置文件指向app的实际磁盘路径</p><ul><li>在磁盘的自定义目录上准备一个app</li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801389493-ddc276b7-3488-4c6f-be5f-68f857923492.png" alt="img"></p><ul><li>在tomcat的conf下创建Catalina&#x2F;localhost目录,并在该目录下准备一个app.xml文件</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">path: 项目的访问路径,也是项目的上下文路径,就是在浏览器中,输入的项目名称</span></span><br><span class="line"><span class="comment">    docBase: 项目在磁盘中的实际路径</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/app&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;D:\mywebapps\app&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动tomcat访问测试即可</li></ul><h2 id="2-6-IDEA中开发并部署运行WEB项目"><a href="#2-6-IDEA中开发并部署运行WEB项目" class="headerlink" title="2.6 IDEA中开发并部署运行WEB项目"></a>2.6 IDEA中开发并部署运行WEB项目</h2><h3 id="2-6-1-IDEA关联本地Tomcat"><a href="#2-6-1-IDEA关联本地Tomcat" class="headerlink" title="2.6.1 IDEA关联本地Tomcat"></a>2.6.1 IDEA关联本地Tomcat</h3><p>可以在创建项目前设置本地tomcat,也可以在打开某个项目的状态下找到settings</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801422997-b248670f-cc45-4afd-8fc7-d2b496e4672a.png" alt="img"></p><p>找到 Build,Execution,Eeployment下的Application Servers ,找到+号</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801428355-fdf935e0-f2af-40dd-b0a3-191d5615cf74.png" alt="img"></p><p>选择Tomcat Server</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801435351-4f81e789-2ed8-406b-887d-280e17f6aed5.png" alt="img"></p><p>选择tomcat的安装目录</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801441145-762b650d-c568-42c6-8829-52a40a8b12f6.png" alt="img"></p><p>点击ok</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801446080-2d374812-2be1-43f4-b8d6-d42d0fe627b1.png" alt="img"></p><p>关联完毕</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801452046-884923cd-2492-4b18-88f2-ee35daa47dee.png" alt="img"></p><h3 id="2-6-2-IDEA创建web工程"><a href="#2-6-2-IDEA创建web工程" class="headerlink" title="2.6.2 IDEA创建web工程"></a>2.6.2 IDEA创建web工程</h3><p>推荐先创建一个空项目,这样可以在一个空项目下同时存在多个modules,不用后续来回切换之前的项目,当然也可以忽略此步直接创建web项目</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801460227-860cb763-1b88-48a6-9189-3b25e214c9c8.png" alt="img"></p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801469172-063c9d71-06d3-4f1e-a052-056d14c93084.png" alt="img"></p><p>检查项目的SDK,语法版本,以及项目编译后的输出目录</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801472313-369b41a7-29f3-4cab-98cb-a90394abec46.png" alt="img"></p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801477005-e5de2812-fc43-4588-88b9-241d2eb8f091.png" alt="img"></p><p>先创建一个普通的JAVA项目</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801483979-e925df52-a19f-4b27-aa54-7af2fa2f63f3.png" alt="img"></p><p>检查各项信息是否填写有误</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801561489-fe63f89e-00f1-404a-bd1d-0aa315b366e2.png" alt="img"></p><p><img src="/images/1681458599545.png" alt="img">创建完毕后,为项目添加Tomcat依赖</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801509685-850db947-50cd-4394-9144-85a884080bfa.png" alt="img"></p><p><img src="/images/1681458857830.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2024/png/34041098/1706801514702-ff984ed1-3bb1-411f-aaef-05c71067772c.png" alt="img"></p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801531791-70b237b0-5bc4-440b-822b-11acab8fee0e.png" alt="img"></p><p>选择modules,添加  framework support</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801570581-e2847413-f138-43af-993c-98adab103bdc.png" alt="img"></p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706887103226-0182c4b5-09fe-4f2c-b901-d1942b41dfd3.png" alt="img"></p><p><img src="/images/1681458672258.png" alt="img">选择Web Application 注意Version,勾选  Create web.xml</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801614829-fd189026-81b6-4066-a809-436504aa2047.png" alt="img"></p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706887116955-2635b2e2-5e7a-4b99-953d-68816b6525ec.png" alt="img"></p><p>删除index.jsp ,替换为 index.html</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801620825-7b2472ff-9f7a-46a2-a340-82c1a45d39c8.png" alt="img"></p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801628475-e4a73d3b-3888-4a9d-84b4-c93ff34cbfc0.png" alt="img"></p><p><img src="/images/1681459080873.png" alt="img">处理配置文件</p><ul><li><p>在工程下创建resources目录,专门用于存放配置文件(都放在src下也行,单独存放可以尽量避免文件集中存放造成的混乱)</p></li><li><p>标记目录为资源目录,不标记的话则该目录不参与编译</p></li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801638395-6b19f1f2-c0ce-4f4d-8c68-1dfabd166eb7.png" alt="img"></p><ul><li>标记完成后,显示效果如下</li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801644478-522463ef-6e65-4e5f-9d1d-33677b917199.png" alt="img"></p><p>处理依赖jar包问题</p><ul><li><p>在WEB-INF下创建lib目录</p></li><li><p>必须在WEB-INF下,且目录名必须叫lib!!!</p></li><li><p>复制jar文件进入lib目录</p></li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801651498-6d33ab33-992b-4291-87ca-eb06e2f642e0.png" alt="img"></p><ul><li>将lib目录添加为当前项目的依赖,后续可以用maven统一解决</li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801657656-14e864af-7eb7-49c1-ab8c-9b885f6e432a.png" alt="img"></p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801666660-09dc4c6a-9cf6-4843-b705-a9816bb89e3e.png" alt="img"></p><ul><li>环境级别推荐选择module 级别,降低对其他项目的影响,name可以空着不写</li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801673970-1ae4bc70-0f6e-4292-888b-0639b97a4b84.png" alt="img"></p><ul><li>查看当前项目有那些环境依赖</li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801705225-44865db1-8f52-442c-ad53-cd9bee37ccbf.png" alt="img"><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801711160-ca0a0b34-5d97-4ac1-bc2f-6083a83ce13d.png" alt="img"></p><ul><li>在此位置,可以通过-号解除依赖</li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801726264-d8ffd6fa-5c64-4cd4-bb8e-2429ae866e5b.png" alt="img"></p><h3 id="2-6-3-IDEA部署-运行web项目"><a href="#2-6-3-IDEA部署-运行web项目" class="headerlink" title="2.6.3 IDEA部署-运行web项目"></a>2.6.3 IDEA部署-运行web项目</h3><p>检查idea是否识别modules为web项目并存在将项目构建成发布结构的配置</p><ul><li>就是检查工程目录下,web目录有没有特殊的识别标记</li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801740368-96fb697e-49f6-4d18-a4af-fd67c4132f8e.png" alt="img"></p><ul><li>以及artifacts下,有没有对应 _war_exploded,如果没有,就点击+号添加</li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801745327-f882551a-a823-4dba-815e-4798b89d3536.png" alt="img"></p><p>点击向下箭头,出现 Edit Configurations选项</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801750382-56c5a26b-781c-45ed-9530-da3e9a72c04b.png" alt="img"></p><p>出现运行配置界面</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801756060-86acf119-21ce-4c3c-8977-217adfb7ef40.png" alt="img"></p><p>点击+号,添加本地tomcat服务器</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801761347-710731a5-65f0-4a18-9023-cb800934ff15.png" alt="img"></p><p>因为IDEA 只关联了一个Tomcat,红色部分就只有一个Tomcat可选</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801767082-2098e90f-272a-4def-a83a-74e4becaa479.png" alt="img"></p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706885812671-345c96ee-c674-4619-895b-c46b1c6bc792.png" alt="img"></p><p>选择Deployment,通过+添加要部署到Tomcat中的artifact</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801773840-21f8f29b-8e36-4322-8bac-3034194825c3.png" alt="img"></p><p>applicationContext中是默认的项目上下文路径,也就是url中需要输入的路径,这里可以自己定义,可以和工程名称不一样,也可以不写,但是要保留&#x2F;,我们这里暂时就用默认的</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801780971-29ddd8b2-7d70-451e-8377-a309a3f52d67.png" alt="img"></p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706885842415-82c2c7da-e084-4c01-9e00-34258a13ba46.png" alt="img"></p><p>点击apply 应用后,回到Server部分. After Launch是配置启动成功后,是否默认自动打开浏览器并输入URL中的地址,HTTP port是Http连接器目前占用的端口号</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801788825-e551fa2f-9582-481e-846e-01e698478fe9.png" alt="img"></p><p>点击OK后,启动项目,访问测试</p><ul><li><p>绿色箭头是正常运行模式</p></li><li><p>“小虫子”是debug运行模式</p></li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801811726-52d5d2af-baa2-454c-819e-a8f322f70988.png" alt="img"></p><ul><li>点击后,查看日志状态是否有异常</li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801819226-889ccb0a-853e-4cde-bf26-4b0dbc1f5339.png" alt="img"></p><ul><li>浏览器自动打开并自动访问了index.html欢迎页</li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801825378-1e82ffaf-25c7-47c0-aa52-561459484358.png" alt="img"></p><p>工程结构和可以发布的项目结构之间的目录对应关系</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801831368-3c913d52-12c1-4a52-a259-42f55c1bad79.png" alt="img"></p><p>IDEA部署并运行项目的原理</p><ul><li><p>idea并没有直接进将编译好的项目放入tomcat的webapps中</p></li><li><p>idea根据关联的tomcat,创建了一个tomcat副本,将项目部署到了这个副本中</p></li><li><p>idea的tomcat副本在C:\用户\当前用户\AppData\Local\JetBrains\IntelliJIdea2022.2\tomcat\中</p></li><li><p>idea的tomcat副本并不是一个完整的tomcat,副本里只是准备了和当前项目相关的配置文件而已</p></li><li><p>idea启动tomcat时,是让本地tomcat程序按照tomcat副本里的配置文件运行</p></li><li><p>idea的tomcat副本部署项目的模式是通过conf&#x2F;Catalina&#x2F;localhost&#x2F;*.xml配置文件的形式实现项目部署的</p></li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801861270-cc1d624c-fbbd-41a2-9008-e5f884c64ccf.png" alt="img"></p><h1 id="三-HTTP协议"><a href="#三-HTTP协议" class="headerlink" title="三 HTTP协议"></a>三 HTTP协议</h1><h2 id="3-1-HTTP简介"><a href="#3-1-HTTP简介" class="headerlink" title="3.1 HTTP简介"></a>3.1 HTTP简介</h2><p><strong>HTTP 超文本传输协议</strong> (HTTP-Hyper Text transfer protocol)，是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过十几年的使用与发展，得到不断地完善和扩展。<strong>它是一种详细规定了浏览器和万维网服务器之间互相通信的规则</strong>，通过因特网传送万维网文档的数据传送协议。客户端与服务端通信时传输的内容我们称之为<strong>报文</strong>。<strong>HTTP协议就是规定报文的格式。</strong>HTTP就是一个通信规则，这个规则规定了客户端发送给服务器的报文格式，也规定了服务器发送给客户端的报文格式。实际我们要学习的就是这两种报文<strong>。客户端发送给服务器的称为”请求报文</strong>“，**服务器发送给客户端的称为”响应报文”**。</p><h3 id="3-1-1-发展历程"><a href="#3-1-1-发展历程" class="headerlink" title="3.1.1 发展历程"></a>3.1.1 发展历程</h3><p>HTTP&#x2F;0.9</p><ul><li>蒂姆伯纳斯李是一位英国计算机科学家，也是万维网的发明者。他在 1989 年创建了单行 HTTP 协议。它只是返回一个网页。这个协议在 1991 年被命名为 HTTP&#x2F;0.9。</li></ul><p>HTTP&#x2F;1.0</p><ul><li><p>1996 年，HTTP&#x2F;1.0 发布。该规范是显著扩大，并且支持三种请求方法：GET，Head，和POST。</p></li><li><p>HTTP&#x2F;1.0 相对于 HTTP&#x2F;0.9 的改进如下： </p></li><li><ul><li>每个请求都附加了 HTTP 版本。</li></ul></li><li><ul><li>在响应开始时发送状态代码。</li></ul></li><li><ul><li>请求和响应都包含 HTTP 报文头。</li></ul></li><li><ul><li>内容类型能够传输 HTML 文件以外的文档。</li></ul></li><li><p>但是，HTTP&#x2F;1.0 不是官方标准。</p></li></ul><p>HTTP&#x2F;1.1</p><ul><li><p>HTTP 的第一个标准化版本 HTTP&#x2F;1.1 ( RFC 2068 ) 于 1997 年初发布，支持七种请求方法：OPTIONS，GET，HEAD，POST，PUT，DELETE，和TRACE </p></li><li><p>HTTP&#x2F;1.1 是 HTTP 1.0 的增强： </p></li><li><ul><li>虚拟主机允许从单个 IP 地址提供多个域。</li></ul></li><li><ul><li>持久连接和流水线连接允许 Web 浏览器通过单个持久连接发送多个请求。</li></ul></li><li><ul><li>缓存支持节省了带宽并使响应速度更快。</li></ul></li><li><p>HTTP&#x2F;1.1 在接下来的 15 年左右将非常稳定。 </p></li><li><p>在此期间，出现了 HTTPS（安全超文本传输协议）。它是使用 SSL&#x2F;TLS 进行安全加密通信的 HTTP 的安全版本。</p></li></ul><p>HTTP&#x2F;2</p><ul><li><p>由IETF在2015年发布。HTTP&#x2F;2旨在提高Web性能，减少延迟，增加安全性，使Web应用更加快速、高效和可靠。</p></li><li><p>多路复用：HTTP&#x2F;2 允许同时发送多个请求和响应，而不是像 HTTP&#x2F;1.1 一样只能一个一个地处理。这样可以减少延迟，提高效率，提高网络吞吐量。</p></li><li><p>二进制传输：HTTP&#x2F;2 使用二进制协议，与 HTTP&#x2F;1.1 使用的文本协议不同。二进制协议可以更快地解析，更有效地传输数据，减少了传输过程中的开销和延迟。</p></li><li><p>头部压缩：HTTP&#x2F;2 使用 HPACK 算法对 HTTP 头部进行压缩，减少了头部传输的数据量，从而减少了网络延迟。</p></li><li><p>服务器推送：HTTP&#x2F;2 支持服务器推送，允许服务器在客户端请求之前推送资源，以提高性能。</p></li><li><p>改进的安全性：HTTP&#x2F;2 默认使用 TLS（Transport Layer Security）加密传输数据，提高了安全性。</p></li><li><p>兼容 HTTP&#x2F;1.1：HTTP&#x2F;2 可以与 HTTP&#x2F;1.1 共存，服务器可以同时支持 HTTP&#x2F;1.1 和 HTTP&#x2F;2。如果客户端不支持 HTTP&#x2F;2，服务器可以回退到 HTTP&#x2F;1.1。</p></li></ul><p>HTTP&#x2F;3</p><ul><li><p>于 2021 年 5 月 27 日发布 , HTTP&#x2F;3 是一种新的、快速、可靠且安全的协议，适用于所有形式的设备。 HTTP&#x2F;3 没有使用 TCP，而是使用谷歌在 2012 年开发的新协议 QUIC </p></li><li><p>HTTP&#x2F;3 是继 HTTP&#x2F;1.1 和 HTTP&#x2F;2之后的第三次重大修订。 </p></li><li><p>HTTP&#x2F;3 带来了革命性的变化，以提高 Web 性能和安全性。设置 HTTP&#x2F;3 网站需要服务器和浏览器支持。 </p></li><li><p>目前，谷歌云、Cloudflare和Fastly支持 HTTP&#x2F;3。Chrome、Firefox、Edge、Opera 和一些移动浏览器支持 HTTP&#x2F;3。</p></li></ul><h3 id="3-1-2-HTTP协议的会话方式"><a href="#3-1-2-HTTP协议的会话方式" class="headerlink" title="3.1.2 HTTP协议的会话方式"></a>3.1.2 HTTP协议的会话方式</h3><p>浏览器与服务器之间的通信过程要经历四个步骤</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801905597-a6628e64-26f1-436a-87e8-8ddfbe52402a.png" alt="img"></p><ul><li><p>浏览器与WEB服务器的连接过程是短暂的，每次连接只处理一个请求和响应。对每一个页面的访问，浏览器与WEB服务器都要建立一次单独的连接。</p></li><li><p>浏览器到WEB服务器之间的所有通讯都是完全独立分开的请求和响应对。</p></li></ul><h3 id="3-1-3-HTTP1-0和HTTP1-1的区别"><a href="#3-1-3-HTTP1-0和HTTP1-1的区别" class="headerlink" title="3.1.3 HTTP1.0和HTTP1.1的区别"></a>3.1.3 HTTP1.0和HTTP1.1的区别</h3><p>在HTTP1.0版本中，浏览器请求一个带有图片的网页，会由于下载图片而与服务器之间开启一个新的连接；但在HTTP1.1版本中，允许浏览器在拿到当前请求对应的全部资源后再断开连接，提高了效率。</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801915499-abdaefd2-dc46-478c-8265-66a085b3a69c.png" alt="img"></p><h3 id="3-1-4-在浏览器中通过F12工具抓取请求响应报文包"><a href="#3-1-4-在浏览器中通过F12工具抓取请求响应报文包" class="headerlink" title="3.1.4 在浏览器中通过F12工具抓取请求响应报文包"></a>3.1.4 在浏览器中通过F12工具抓取请求响应报文包</h3><p>几乎所有的PC端浏览器都支持了F12开发者工具,只不过不同的浏览器工具显示的窗口有差异</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801923782-faa5ac20-2396-4537-b230-a7fbcfb3da3.png" alt="img"></p><h2 id="3-2-请求和响应报文"><a href="#3-2-请求和响应报文" class="headerlink" title="3.2 请求和响应报文"></a>3.2 请求和响应报文</h2><h3 id="3-2-1-报文的格式"><a href="#3-2-1-报文的格式" class="headerlink" title="3.2.1 报文的格式"></a>3.2.1 报文的格式</h3><p>主体上分为报文首部和报文主体,中间空行隔开</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801940921-fe76f0ec-cb57-48b0-b10e-f1f94750f881.png" alt="img"></p><p>报文部首可以继续细分为  “行” 和 “头”</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801946384-a882c7b9-af82-439d-ad71-1d0e6ef37b0d.png" alt="img"></p><h3 id="3-2-2-请求报文"><a href="#3-2-2-请求报文" class="headerlink" title="3.2.2 请求报文"></a>3.2.2 请求报文</h3><p>客户端发给服务端的报文</p><ul><li><p>请求报文格式 </p></li><li><ul><li>请求首行（<strong>请求行</strong>）；   GET&#x2F;POST  资源路径?参数  HTTP&#x2F;1.1</li></ul></li><li><ul><li>请求头信息（<strong>请求头</strong>）；</li></ul></li><li><ul><li>空行；</li></ul></li><li><ul><li>请求体；POST请求才有请求体</li></ul></li></ul><p>浏览器 f12 网络下查看请求数据包</p><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706801959440-797b831f-5551-491c-9008-e93e25619a49.png" alt="img"></p><p>form表单发送GET请求特点</p><p>1、由于请求参数在请求首行中已经携带了，所以没有请求体，也没有请求空行<br>2、请求参数拼接在url地址中，地址栏可见[url?name1&#x3D;value1&amp;name2&#x3D;value2]，不安全<br>3、由于参数在地址栏中携带，所以由大小限制[地址栏数据大小一般限制为4k]，只能携带纯文本<br>4、get请求参数只能上传文本数据<br>5、没有请求体。所以封装和解析都快，效率高， 浏览器默认提交的请求都是get请求比如：地址栏输入回车,超链接,表单默认的提交方式</p><p>查看GET请求行,请求头,请求体</p><ul><li><p>请求行组成部分 </p></li><li><ul><li>请求方式  GET</li></ul></li><li><ul><li>访问服务器的资源路径?参数1&#x3D;值1&amp;参数2&#x3D;值2 … …</li></ul></li><li><ul><li>协议及版本 HTTP&#x2F;1.1</li></ul></li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/05_web_tomcat/login_success.html?username=admin&amp;password=123213</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure><ul><li>请求头</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">-主机虚拟地址</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8080   </span><br><span class="line">-长连接</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive </span><br><span class="line">-请求协议的自动升级[http的请求，服务器却是https的，浏览器自动会将请求协议升级为https的]</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1  </span><br><span class="line">- 用户系统信息</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36</span><br><span class="line">- 浏览器支持的文件类型</span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">- 当前页面的上一个页面的路径[当前页面通过哪个页面跳转过来的]：   可以通过此路径跳转回上一个页面， 广告计费，防止盗链</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://localhost:8080/05_web_tomcat/login.html</span><br><span class="line">- 浏览器支持的压缩格式</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line">- 浏览器支持的语言</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br></pre></td></tr></table></figure><ul><li><p>请求空行 </p></li><li><p>请求体 </p></li><li><ul><li>GET请求数据不放在请求体</li></ul></li></ul><p>form表单发送post请求特点</p><p>1、POST请求有请求体，而GET请求没有请求体。<br>2、post请求数据在请求体中携带，请求体数据大小没有限制，可以用来上传所有内容[文件、文本]<br>3、只能使用post请求上传文件<br>4、post请求报文多了和请求体相关的配置[请求头]<br>5、地址栏参数不可见，相对安全<br>6、post效率比get低</p><ul><li>POST请求要求将form标签的method的属性设置为post</li></ul><p>查看post的请求行 请求头 请求体</p><ul><li><p>请求行组成部分 </p></li><li><ul><li>请求方式 POST</li></ul></li><li><ul><li>访问服务器的资源路径?参数1&#x3D;值1&amp;参数2&#x3D;值2 … …</li></ul></li><li><ul><li>协议及版本 HTTP&#x2F;1.1</li></ul></li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/05_web_tomcat/login_success.html</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure><ul><li>请求头</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8080</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>31     -请求体内容的长度</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0  -无缓存</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://localhost:8080</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1  -协议的自动升级</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded   -请求体内容类型[服务器根据类型解析请求体参数]</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36</span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://localhost:8080/05_web_tomcat/login.html</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line">Cookie:JSESSIONID-</span><br></pre></td></tr></table></figure><ul><li><p>请求空行 </p></li><li><p>请求体:浏览器提交给服务器的数据</p></li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">username=admin&amp;password=1232131</span><br></pre></td></tr></table></figure><h3 id="3-2-3-响应报文"><a href="#3-2-3-响应报文" class="headerlink" title="3.2.3 响应报文"></a>3.2.3 响应报文</h3><p>响应报文格式</p><ul><li><p>响应首行（<strong>响应行</strong>）； 协议&#x2F;版本  状态码   状态码描述</p></li><li><p>响应头信息（<strong>响应头</strong>）；</p></li><li><p>空行；</p></li><li><p>响应体；</p></li></ul><p><img src="/../image/XML%E3%80%81Tomcat%E3%80%81HTTP/1706802017029-6edbdfdd-b77f-4133-9426-1e59c7e4a8e8.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34041098/1706802025537-e6bc2e69-38ee-4a18-b8a5-40dacb1e03dc.png" alt="img"></p><ul><li><p>响应行组成部分 </p></li><li><ul><li>协议及版本 HTTP&#x2F;1.1</li></ul></li><li><ul><li>响应状态码 200</li></ul></li><li><ul><li>状态描述  OK  (缺省)</li></ul></li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line">说明：响应协议为HTTP1.1，响应状态码为200，表示请求成功；</span><br></pre></td></tr></table></figure><ul><li>响应头</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1   服务器的版本信息</span><br><span class="line"><span class="attribute">Accept-Ranges</span><span class="punctuation">: </span>bytes</span><br><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>W/&quot;157-1534126125811&quot;</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Mon, 13 Aug 2018 02:08:45 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html    响应体数据的类型[浏览器根据类型解析响应体数据]</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>157   响应体内容的字节数</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 13 Aug 2018 02:47:57 GMT  响应的时间，这可能会有8小时的时区差</span><br></pre></td></tr></table></figure><ul><li>响应体</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--需要浏览器解析使用的内容[如果响应的是html页面，最终响应体内容会被浏览器显示到页面中]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    恭喜你，登录成功了...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>响应状态码:响应码对浏览器来说很重要，它告诉浏览器响应的结果。比较有代表性的响应码如下：</p><ul><li><p><strong>200：</strong> 请求成功，浏览器会把响应体内容（通常是html）显示在浏览器中；</p></li><li><p><strong>302：</strong> 重定向，当响应码为302时，表示服务器要求浏览器重新再发一个请求，服务器会发送一个响应头Location指定新请求的URL地址；</p></li><li><p><strong>304：</strong> 使用了本地缓存</p></li><li><p><strong>404：</strong> 请求的资源没有找到，说明客户端错误的请求了不存在的资源；</p></li><li><p><strong>405：</strong> 请求的方式不允许</p></li><li><p><strong>500：</strong> 请求资源找到了，但服务器内部出现了错误；</p></li></ul><p>更多的响应状态码</p><table><thead><tr><th>状态码</th><th>状态码英文描述</th><th>中文含义</th></tr></thead><tbody><tr><td>1**</td><td></td><td></td></tr><tr><td>100</td><td>Continue</td><td>继续。客户端应继续其请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td>2**</td><td></td><td></td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr><tr><td>3**</td><td></td><td></td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td>4**</td><td></td><td></td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td></tr><tr><td>417</td><td>Expectation Failed</td><td>服务器无法满足Expect的请求头信息</td></tr><tr><td>5**</td><td></td><td></td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td>Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML、CSS、JavaScript</title>
      <link href="/2024/01/26/HTML,CSS,JavaScript/"/>
      <url>/2024/01/26/HTML,CSS,JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB概述"><a href="#WEB概述" class="headerlink" title="WEB概述"></a>WEB概述</h1><h2 id="1-1-JAVAWEB简介"><a href="#1-1-JAVAWEB简介" class="headerlink" title="1.1 JAVAWEB简介"></a>1.1 JAVAWEB简介</h2><p>用Java技术来解决相关web互联网领域的技术栈.使用JAVAEE技术体系开发企业级互联网项目. 项目规模和架构模式与JAVASE阶段有着很大的差别. 在互联网项目下,首先需要明白客户端和服务器的概念</p><p>客户端 :与用户进行交互，用于接收用户的输入(操作)、展示服务器端的数据以及向服务器传递数据</p><ul><li><p>手机APP</p></li><li><p>微信小程序</p></li><li><p>PC端程序</p></li><li><p>PC浏览器</p></li><li><p>其他设备</p></li></ul><p>服务端:与客户端进行交互，接收客户端的数据、处理具体的业务逻辑、传递给客户端其需要的数据</p><ul><li>“服务器”是一个非常宽泛的概念，<strong>从硬件而言:</strong> 服务器是计算机的一种，它比普通计算机运行更快、负载更高、价格更贵。服务器在网络中为其它客户机（如PC机、智能手机、ATM等终端甚至是火车系统等大型设备）提供计算或者应用服务。<strong>从软件而言:</strong> 服务器其实就是安装在计算机上的一个软件，根据其作用的不同又可以分为各种不同的服务器，例如应用服务器、数据库服务器、Redis服务器、DNS服务器、ftp服务器等等</li></ul><p><strong>综上所述:</strong> 用我们自己的话来总结的话，服务器其实就是一台(或者一个集群)安装了服务器软件的高性能计算机</p><h2 id="1-2-JAVAWEB技术栈"><a href="#1-2-JAVAWEB技术栈" class="headerlink" title="1.2 JAVAWEB技术栈"></a>1.2 JAVAWEB技术栈</h2><p>前端部分</p><p>HTML CSS  JavaScript ES6 Nodejs npm vite vue3 router pinia  axios  element-plus …</p><p>后端部分</p><p>HTTP xml Tomcat  Servlet  Request  Response  Cookie  Sesssion  Filter Listener MySQL JDBC  Druid  Jackson lombok jwt …</p><p>图解</p><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/web%E5%9B%BE%E8%A7%A3.png" alt="img"></p><h2 id="1-3-JAVAWEB交互模式"><a href="#1-3-JAVAWEB交互模式" class="headerlink" title="1.3  JAVAWEB交互模式"></a>1.3  JAVAWEB交互模式</h2><p>请求</p><p>客户端向服务端传递数据的主要方式之一,客户端主动向服务端发送请求,可以携带数据,交给服务端处理. 请求只能是客户端向服务端</p><p>响应</p><p>服务端向客户端传递数据的主要方式之一,在接收请求后开始对数据进行处理,将结果反馈给客户端使用.响应只能是服务端向客户端</p><h2 id="1-4-JAVAWEB的CS和BS模式"><a href="#1-4-JAVAWEB的CS和BS模式" class="headerlink" title="1.4 JAVAWEB的CS和BS模式"></a>1.4 JAVAWEB的CS和BS模式</h2><p>根据客户端的不同,我们可以将JAVA的互联网项目运行模式分为CS模式和BS模式</p><p>CS模式  Client-Server模式  客户端-服务端模式, 该模式特点如下</p><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/cs%E5%92%8Cbs.png" alt="img"></p><p>1 程序分两部分,一部分是客户端需要安装的程序,一部分是要部署在服务器上的程序</p><p>2 用户需要在硬件设备或者操作系统中,下载安装特定的客户端程序才可以使用</p><p>3 程序运行的压力由客户端和服务端共同承担</p><p>4 可以借助客户端运算资源,对数据继续处理,一般可以有较好的画质和展现效果</p><p>5 程序更新时,往往需要同时更新客户端和服务端两部分</p><p>6 跨平台性能一般,不同的平台未必都有对应的客户端程序</p><p>7 开发成本较高,要为不同的客户端开发不同客户端程序</p><p>BS模式 Browser-Server模式</p><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/bs%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.png" alt="img"></p><p>1 程序就一部分,只要部署在服务器上即可</p><p>2 无论用户使用什么设备和操作系统,只要有一个安装任意一款浏览器即可</p><p>3 程序运行的压力主要由服务端承担</p><p>4 客户端承担的计算压力小,可以对数据进行简单的继续处理,但是不像CS模式那些可以获得较好的画质和展现效果</p><p>5 程序更新时,只需要同时服务端部分</p><p>6 跨平台性能优秀,只要有一个浏览器,到处都可以使用</p><p>7 开发成本略低,不必为不同的客户端开发不同客户端程序</p><p>模式选择</p><ul><li>对于我们JAVA程序员来说,我们开发的是服务端代码,所有无论前端是何种类型的服务端,我们只要按照接口文档要求开发后端功能即可,尤其是在当前前后端分离模式开发为主的时代背景下,我们可以在几乎不接触前端的状态下完成开发</li></ul><h2 id="1-5-JAVAWEB实现前后端分离"><a href="#1-5-JAVAWEB实现前后端分离" class="headerlink" title="1.5 JAVAWEB实现前后端分离"></a>1.5 JAVAWEB实现前后端分离</h2><p>非前后端分离</p><ul><li>1 开发不分离: 程序员既要编写后端代码,又要去修改甚至编写前端代码,程序员的工作压力较大</li><li>2 部署不分离: 使用了后端动态页面技术(JSP,Thymeleaf等),前端代码不能脱离后端服务器环境,必须部署在一起</li></ul><p>前后端分离</p><ul><li>1 开发分离:后端程序员只要按照接口文档去编写后端代码,无需编写或者关系前端代码,前后端程序员压力都降低</li><li>2 部署分离:前端使用前端的页面动态技术,通过VUE等框架,工程化项目,前端项目可以部署到独立的服务器上</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%A1%86%E6%9E%B6.png" alt="img"></p><h1 id="HTML入门"><a href="#HTML入门" class="headerlink" title="HTML入门"></a>HTML入门</h1><h2 id="1-1-HTML-CSS-JavaScript的作用"><a href="#1-1-HTML-CSS-JavaScript的作用" class="headerlink" title="1.1 HTML&amp;CSS&amp;JavaScript的作用"></a>1.1 HTML&amp;CSS&amp;JavaScript的作用</h2><p>HTML 主要用于网页主体结构的搭建</p><p><img src="/images/1681115424967.png" alt="img"><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/html%E6%BC%94%E7%A4%BA.png" alt="img"></p><p>CSS 主要用于页面元素美化</p><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/css%E6%BC%94%E7%A4%BA.png" alt="img"></p><p>JavaScript 主要用于页面元素的动态处理</p><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/js%E6%BC%94%E7%A4%BA.gif" alt="img"></p><h2 id="1-2-什么是HTML"><a href="#1-2-什么是HTML" class="headerlink" title="1.2 什么是HTML"></a>1.2 什么是HTML</h2><p>HTML是Hyper Text Markup Language的缩写。意思是超文本标记语言。它的作用是搭建网页结构，在网页上展示内容</p><p>HTML5 是 <strong>HyperText Markup Language 5 的缩写，HTML5</strong> 技术结合了 HTML4.01 的<a href="https://baike.baidu.com/item/%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86/5199682?fromModule=lemma_inlink">相关标准</a>并革新，符合现代网络发展要求，在 2008 年正式发布。HTML5 由不同的技术构成，其在互联网中得到了非常广泛的应用，提供更多增强<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8/2196523?fromModule=lemma_inlink">网络应用</a>的标准机。与传统的技术相比，HTML5 的语法特征更加明显，并且结合了 <a href="https://baike.baidu.com/item/SVG/63178?fromModule=lemma_inlink">SVG</a> 的内容。这些内容在网页中使用可以更加便捷地处理多媒体内容，而且 HTML5中还结合了其他元素，对原有的功能进行调整和修改，进行<a href="https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E5%8C%96%E5%B7%A5%E4%BD%9C/9777788?fromModule=lemma_inlink">标准化工作</a>。HTML5 在 2012 年已形成了稳定的版本。2014年10月28日，W3C发布了HTML5的最终版。</p><h2 id="1-3-什么是超文本"><a href="#1-3-什么是超文本" class="headerlink" title="1.3 什么是超文本"></a>1.3 什么是超文本</h2><p>HTML文件本质上是文本文件，而普通的文本文件只能显示字符。但是HTML技术则通过HTML标签把其他网页、图片、音频、视频等各种多媒体资源引入到当前网页中，让网页有了非常丰富的呈现方式，这就是超文本的含义——本身是文本，但是呈现出来的最终效果超越了文本。</p><h2 id="1-4-什么是标记语言"><a href="#1-4-什么是标记语言" class="headerlink" title="1.4 什么是标记语言"></a>1.4 什么是标记语言</h2><p>说HTML是一种『标记语言』是因为它不是像Java这样的『编程语言』，因为它是由一系列『标签』组成的，没有常量、变量、流程控制、异常处理、IO等等这些功能。HTML很简单，每个标签都有它固定的含义和确定的页面显示效果。</p><h3 id="双标签"><a href="#双标签" class="headerlink" title="双标签"></a>双标签</h3><p>:标签是通过一组尖括号+标签名的方式来定义的：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML is a very popular fore-end technology.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个例子中使用了一个p标签来定义一个段落，<p>叫<strong>开始标签</strong>，</p>叫<strong>结束标签</strong>。开始标签和结束标签一起构成了一个完整的标签。开始标签和结束标签之间的部分叫<strong>文本标签体</strong>，也简称：<strong>标签体</strong>。</p><h3 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.xxx.com&quot;</span>&gt;</span>show detail<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>href&#x3D;”网址” 就是属性，href是属性名，”网址”是属性值</p><h2 id="1-5-HTML基础结构"><a href="#1-5-HTML基础结构" class="headerlink" title="1.5 HTML基础结构"></a>1.5 HTML基础结构</h2><h3 id="1-、文档声明"><a href="#1-、文档声明" class="headerlink" title="1 、文档声明"></a>1 、文档声明</h3><ul><li>HTML文件中第一行的内容，用来告诉浏览器当前HTML文档的基本信息，其中最重要的就是当前HTML文档遵循的语法标准。这里我们只需要知道HTML有4和5这两个大的版本</li><li>HTML4版本的文档类型声明是：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>HTML5版本的文档类型声明是：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>现在主流的技术选型都是使用HTML5，之前的版本基本不用了。</li></ul><h3 id="2、根标签"><a href="#2、根标签" class="headerlink" title="2、根标签"></a>2、根标签</h3><ul><li>html标签是整个文档的根标签，所有其他标签都必须放在html标签里面。</li></ul><h3 id="3、头部元素"><a href="#3、头部元素" class="headerlink" title="3、头部元素"></a>3、头部元素</h3><ul><li>head标签用于定义文档的头部，其他头部元素都放在head标签里。头部元素包括title标签、script标签、style标签、link标签、meta标签等等</li></ul><h3 id="4、主体元素"><a href="#4、主体元素" class="headerlink" title="4、主体元素"></a>4、主体元素</h3><ul><li>body标签定义网页的主体内容，在浏览器窗口内显示的内容都定义到body标签内</li></ul><h3 id="5、注释"><a href="#5、注释" class="headerlink" title="5、注释"></a>5、注释</h3><ul><li>HTML注释的写法是</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释内容 --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/html%E6%A0%BC%E5%BC%8F.png" alt="img"></p><h2 id="1-6-HTML的入门程序"><a href="#1-6-HTML的入门程序" class="headerlink" title="1.6 HTML的入门程序"></a>1.6 HTML的入门程序</h2><p>第一步 准备一个纯文本文件,拓展名为html</p><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/html%E6%96%B0%E5%BB%BA%E6%BC%94%E7%A4%BA.gif" alt="img"></p><p>第二步  使用记事本打开网页,在网页内开发代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、文件的根标签，其他标签都要在&lt;html&gt; &lt;/html&gt;标签中间</span></span><br><span class="line"><span class="comment">2、html跟标签有两个一级标签</span></span><br><span class="line"><span class="comment">&lt;head&gt;&lt;/head&gt;头标签定义那些不直接展示在页面主体上，但是有很重要的内容</span></span><br><span class="line"><span class="comment">1、字符集&lt;meta charset=&quot;utf-8&quot;/&gt;告诉浏览器用什么字符集对文件解码</span></span><br><span class="line"><span class="comment">2、css引入</span></span><br><span class="line"><span class="comment">3、js引入</span></span><br><span class="line"><span class="comment">4... ...</span></span><br><span class="line"><span class="comment">&lt;body&gt;&lt;/body&gt;体标签</span></span><br><span class="line"><span class="comment">1、定义要展示主体的标签</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>杭州亚运会|精彩亚运会，他们共同期待<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>第三步 使用浏览器打开文件,查看显示的内容<img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9F%A5%E7%9C%8Bhtml.png" alt="img"></p><h2 id="1-7-HTML概念词汇解释"><a href="#1-7-HTML概念词汇解释" class="headerlink" title="1.7 HTML概念词汇解释"></a>1.7 HTML概念词汇解释</h2><h3 id="标签-tag"><a href="#标签-tag" class="headerlink" title="标签 tag"></a>标签 tag</h3><ul><li>代码中的一个 &lt;&gt; 叫做一个标签,有些标签成对出现,称之为双标签,有些标签单独出现,称之为单标签</li></ul><h3 id="属性-attribute"><a href="#属性-attribute" class="headerlink" title="属性 attribute"></a>属性 attribute</h3><ul><li>一般在开始标签中,用于定义标签的一些特征</li></ul><h3 id="文本-text"><a href="#文本-text" class="headerlink" title="文本 text"></a>文本 text</h3><ul><li>双标签中间的文字,包含空格换行等结构</li></ul><h3 id="元素-element"><a href="#元素-element" class="headerlink" title="元素 element"></a>元素 element</h3><ul><li>经过浏览器解析后,每一个完整的标签(标签+属性+文本)可以称之为一个元素</li></ul><h2 id="1-8-HTML的语法规则"><a href="#1-8-HTML的语法规则" class="headerlink" title="1.8 HTML的语法规则"></a>1.8 HTML的语法规则</h2><ul><li>1 根标签有且只能有一个 </li><li>2 无论是双标签还是单标签都需要正确关闭 </li><li>3 标签可以嵌套但不能交叉嵌套 </li><li>4 注释语法为 <!-- --> ,注意不能嵌套 </li><li>5 属性必须有值，值必须加引号,H5中属性名和值相同时可以省略属性值 </li><li>6 HTML中不严格区分字符串使用单双引号 </li><li>7 HTML标签不严格区分大小写,但是不能大小写混用 </li><li>8 HTML中不允许自定义标签名,强行自定义则无效</li></ul><h2 id="1-9-开发工具VsCode的安装和使用"><a href="#1-9-开发工具VsCode的安装和使用" class="headerlink" title="1.9 开发工具VsCode的安装和使用"></a>1.9 开发工具VsCode的安装和使用</h2><ul><li>前端工程师“Front-End-Developer”源自于美国。大约从2005年开始正式的前端工程师角色被行业所认可，到了2010年，互联网开始全面进入移动时代，前端开发的工作越来越重要。 </li><li>最初所有的开发工作都是由后端工程师完成的，随着业务越来越繁杂，工作量变大，于是我们将项目中的可视化部分和一部分交互功能的开发工作剥离出来，形成了前端开发。由于互联网行业的急速发展，导致了在不同的国家，有着截然不同的分工体制。 </li><li>在日本和一些人口比较稀疏的国家，例如加拿大、澳大利亚等，流行“Full-Stack Engineer”，也就是我们通常所说的全栈工程师。通俗点说就是一个人除了完成前端开发和后端开发工作以外，有的公司从产品设计到项目开发再到后期运维可能都是同一个人，甚至可能还要负责UI、配动画，也可以是扫地、擦窗、写文档、维修桌椅等等。 </li><li>而在美国等互联网环境比较发达的国家项目开发的分工协作更为明确，整个项目开发分为前端、中间层和后端三个开发阶段，这三个阶段分别由三个或者更多的人来协同完成。国内的大部分互联网公司只有前端工程师和后端工程师，中间层的工作有的由前端来完成，有的由后端来完成。 </li><li>PRD（产品原型-产品经理） - PSD（视觉设计-UI工程师） - HTML&#x2F;CSS&#x2F;JavaScript（PC&#x2F;移动端网页，实现网页端的视觉展示和交互-前端工程师） </li><li>前端工程师比较推崇的一款开发工具就是visual  studio code,下载地址为:<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/vscode.png" alt="img"></p><p>1 安装过程</p><p>安装过程比较简单,一路next,注意安装路径不要有中文,空格和特殊符号即可</p><p>2 安装插件</p><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/vscoed%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6.png" alt="img"></p><ul><li>Auto Rename Tag 自动修改标签对插件</li><li>Chinese Language Pack  汉化包</li><li>HTML CSS Support  HTML CSS 支持</li><li>Intellij IDEA Keybindings IDEA快捷键支持</li><li>Live Server 实时加载功能的小型服务器</li><li>open in  browser 通过浏览器打开当前文件的插件</li><li>Prettier-Code formatter 代码美化格式化插件</li><li>Vetur  VScode中的Vue工具插件</li><li>vscode-icons  文件显示图标插件</li><li>Vue 3 snipptes 生成VUE模板插件</li><li>Vue language Features Vue3语言特征插件</li></ul><p>3 准备工作空间</p><ul><li><code>直接用vscode打开某个目录即可</code>直接将某个目录作为项目代码存放的根目录</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/vscode%E6%96%B0%E5%BB%BA.png" alt="img"></p><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/vscode%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="img"></p><p>4 在工作空间下创建目录和文件</p><ul><li>点击带有”+”号的按钮即可创建文件或者目录</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/vscode%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%AE%E5%BD%95.png" alt="img"></p><ul><li>在html中,输入”  !  “ 并回车即可快速出现html的基本结构</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/vscode%E5%88%9B%E5%BB%BAhtml.png" alt="img"></p><p>5 通过live Server 小型服务器运行项目</p><ul><li>点击右下角Go Live , 或者在html编辑视图上右击 open with live Server  ,会自动启动小型服务器,并自动打开浏览器访问当前资源</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%88%9B%E5%BB%BA%E5%AE%8C%E6%88%90.png" alt="img"><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%BC%80%E5%90%AF%E6%9C%8D%E5%8A%A1.png" alt="img"></p><ul><li>Live Server 实时加载功能</li></ul><p>![img](..&#x2F;image&#x2F;HTML、CSS、JavaScript&#x2F;live server实时加载.gif)</p><ul><li>Live Server使用完毕后,要记得关闭</li></ul><p>![img](..&#x2F;image&#x2F;HTML、CSS、JavaScript&#x2F;关闭live server.png)</p><p>6 其他常见设置</p><ul><li>设置字体:   齿轮&gt;search&gt;搜索   “字体大小”</li><li>设置字体大小可以用滚轮控制:  齿轮&gt;设置&gt;搜索 “Mouse Wheel Zoom”</li><li>设置左侧树缩进: 齿轮&gt;设置&gt;搜索 “树缩进”</li><li>设置文件夹折叠:  齿轮&gt;设置&gt;搜索 “compact” 取消第一个勾选</li><li>设置编码自动保存: 齿轮&gt; 设置&gt; 搜索 “Auto Save” ,选择为”afterDelay”</li></ul><h2 id="1-10-在线帮助文档"><a href="#1-10-在线帮助文档" class="headerlink" title="1.10 在线帮助文档"></a>1.10 在线帮助文档</h2><p><a href="http://www.w3school.com.cn/">http://www.w3school.com.cn</a></p><h1 id="HTML常见标签"><a href="#HTML常见标签" class="headerlink" title="HTML常见标签"></a>HTML常见标签</h1><h2 id="2-1-标题标签"><a href="#2-1-标题标签" class="headerlink" title="2.1 标题标签"></a>2.1 标题标签</h2><p>标题标签一般用于在页面上定义一些标题性的内容,如新闻标题,文章标题等,有h1到h6六级标题</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/html%E6%A0%87%E9%A2%98%E6%BC%94%E7%A4%BA.png" alt="img"></p><h2 id="2-2-段落标签"><a href="#2-2-段落标签" class="headerlink" title="2.2 段落标签"></a>2.2 段落标签</h2><p>段落标签一般用于定义一些在页面上要显示的大段文字,多个段落标签之间实现自动分段的效果</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        记者从工信部了解到，近年来我国算力产业规模快速增长，年增长率近30%，算力规模排名全球第二。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        工信部统计显示，截至去年底，我国算力总规模达到180百亿亿次浮点运算/秒，存力总规模超过1000EB（1万亿GB）。</span><br><span class="line">        国家枢纽节点间的网络单向时延降低到20毫秒以内，算力核心产业规模达到1.8万亿元。中国信息通信研究院测算，</span><br><span class="line">        算力每投入1元，将带动3至4元的GDP经济增长。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> </span><br><span class="line">        近年来，我国算力基础设施发展成效显著，梯次优化的算力供给体系初步构建，算力基础设施的综合能力显著提升。</span><br><span class="line">        当前，算力正朝智能敏捷、绿色低碳、安全可靠方向发展。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%AE%B5%E8%90%BD%E6%95%88%E6%9E%9C.png" alt="img"></p><h2 id="2-3-换行标签"><a href="#2-3-换行标签" class="headerlink" title="2.3 换行标签"></a>2.3 换行标签</h2><p>单纯实现换行的标签是br,如果想添加分隔线,可以使用hr标签</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        工信部统计显示，截至去年底，我国算力总规模达到180百亿亿次浮点运算/秒，存力总规模超过1000EB（1万亿GB）。</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        国家枢纽节点间的网络单向时延降低到20毫秒以内，算力核心产业规模达到1.8万亿元。</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        中国信息通信研究院测算，算力每投入1元，将带动3至4元的GDP经济增长。</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%8D%A2%E8%A1%8C%E6%95%88%E6%9E%9C.png" alt="img"></p><h2 id="2-4-列表标签"><a href="#2-4-列表标签" class="headerlink" title="2.4 列表标签"></a>2.4 列表标签</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>分条列项展示数据的标签, 其每一项前面的符号带有顺序特征</p><ul><li>列表标签 ol</li><li>列表项标签 li</li><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JAVA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>大数据<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%88%97%E8%A1%A8%E6%95%88%E6%9E%9C.png" alt="img"></p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>分条列项展示数据的标签, 其每一项前面的符号不带有顺序特征</p><ul><li>列表标签 ul</li><li>列表项标签 li</li><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JAVASE<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JAVAEE<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>数据库<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8%E6%95%88%E6%9E%9C.png" alt="img"></p><h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h3><p>列表和列表之前可以签到,实现某一项内容详细展示</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        JAVA</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>JAVASE<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>JAVAEE<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>数据库<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>大数据<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E6%95%88%E6%9E%9C.png" alt="img"></p><h2 id="2-5-超链接标签"><a href="#2-5-超链接标签" class="headerlink" title="2.5 超链接标签"></a>2.5 超链接标签</h2><p>点击后带有链接跳转的标签 ,也叫作a标签</p><ul><li><p>href属性用于定义连接 </p></li><li><ul><li>href中可以使用绝对路径,以&#x2F;开头,始终以一个固定路径作为基准路径作为出发点</li><li>href中也可以使用相对路径,不以&#x2F;开头,以当前文件所在路径为出发点</li><li>href中也可以定义完整的URL</li></ul></li><li><p>target用于定义打开的方式 </p></li><li><ul><li>_blank 在新窗口中打开目标资源</li><li>_self  在当前窗口中打开目标资源</li></ul></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        href属性用于定义连接</span></span><br><span class="line"><span class="comment">            href中可以使用绝对路径,以/开头,始终以一个路径作为基准路径作为出发点</span></span><br><span class="line"><span class="comment">            无论当前资源在哪，使用固定的位置作为出发点去找目标资源</span></span><br><span class="line"><span class="comment">            href中也可以使用相对路径,不以/开头,以当前文件所在路径为出发点找目标资源</span></span><br><span class="line"><span class="comment">            ./ 表示当前资源的所在路径可以省略不写</span></span><br><span class="line"><span class="comment">            ../ 表示当前资源的上一层路径</span></span><br><span class="line"><span class="comment">            href中也可以定义完整的URL</span></span><br><span class="line"><span class="comment">        target用于定义打开的方式</span></span><br><span class="line"><span class="comment">            _blank 在新窗口中打开目标资源</span></span><br><span class="line"><span class="comment">            _self  在当前窗口中打开目标资源</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 相对路径 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;01firstPage.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>相对路径本地资源连接<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 绝对路径 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/HTML/AA/03有序和无序列表.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>绝对路径本地资源连接<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>外部资源链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E8%B6%85%E9%93%BE%E6%8E%A5.png" alt="img"></p><h2 id="2-6-多媒体标签"><a href="#2-6-多媒体标签" class="headerlink" title="2.6 多媒体标签"></a>2.6 多媒体标签</h2><h3 id="img-重点-图片标签"><a href="#img-重点-图片标签" class="headerlink" title="img(重点) 图片标签"></a>img(重点) 图片标签</h3><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">src</span></span><br><span class="line"><span class="comment">用于定义图片的连接</span></span><br><span class="line"><span class="comment">    1 url</span></span><br><span class="line"><span class="comment">    2 相对</span></span><br><span class="line"><span class="comment">    3 绝对</span></span><br><span class="line"><span class="comment">title</span></span><br><span class="line"><span class="comment">用于定义鼠标悬停时显示的文字</span></span><br><span class="line"><span class="comment">alt</span></span><br><span class="line"><span class="comment">用于定义图片加载失败时显示的提示文字</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/logo.png&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">title</span>=<span class="string">&quot;尚硅谷&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;尚硅谷logo&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/HTML/img/logo.png&quot;</span>  <span class="attr">title</span>=<span class="string">&quot;尚硅谷&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;尚硅谷logo&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><h3 id="audio-声音"><a href="#audio-声音" class="headerlink" title="audio  声音"></a><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%A4%9A%E5%AA%92%E4%BD%93.png" alt="img">audio  声音</h3><p>用于在页面上引入一段声音</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> src</span></span><br><span class="line"><span class="comment">     用于定义目标声音资源</span></span><br><span class="line"><span class="comment"> autoplay</span></span><br><span class="line"><span class="comment">     用于控制打开页面时是否自动播放</span></span><br><span class="line"><span class="comment"> controls</span></span><br><span class="line"><span class="comment">     用于控制是否展示控制面板</span></span><br><span class="line"><span class="comment"> loop</span></span><br><span class="line"><span class="comment">     用于控制是否进行循环播放</span></span><br><span class="line"><span class="comment"> --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;img/music.mp3&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><h3 id="video-视频"><a href="#video-视频" class="headerlink" title="video 视频"></a><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%A3%B0%E9%9F%B3.png" alt="img">video 视频</h3><p>用于在页面上引入一段视频</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    src</span></span><br><span class="line"><span class="comment">        用于定义目标视频资源</span></span><br><span class="line"><span class="comment">    autoplay</span></span><br><span class="line"><span class="comment">        用于控制打开页面时是否自动播放</span></span><br><span class="line"><span class="comment">    controls</span></span><br><span class="line"><span class="comment">        用于控制是否展示控制面板</span></span><br><span class="line"><span class="comment">    loop</span></span><br><span class="line"><span class="comment">        用于控制是否进行循环播放</span></span><br><span class="line"><span class="comment">    --&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;img/movie.mp4&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E8%A7%86%E9%A2%91.png" alt="img"></p><h2 id="2-7-表格标签-重点"><a href="#2-7-表格标签-重点" class="headerlink" title="2.7 表格标签(重点)"></a>2.7 表格标签(重点)</h2><h3 id="常规表格"><a href="#常规表格" class="headerlink" title="常规表格"></a>常规表格</h3><ul><li><p>table标签 代表表格 </p></li><li><p>thead标签 代表表头 可以省略不写 </p></li><li><p>tbody标签 代表表体 可以省略不写 </p></li><li><p>tfoot标签 代表表尾  可以省略不写 </p></li><li><p>tr标签 代表一行 </p></li><li><p>td标签 代表行内的一格 </p></li><li><p>th标签 自带加粗和居中效果的td </p></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        table  整张表格</span></span><br><span class="line"><span class="comment">            thead 表头</span></span><br><span class="line"><span class="comment">            tbody 表体</span></span><br><span class="line"><span class="comment">            tfoot 表尾</span></span><br><span class="line"><span class="comment">                tr 表格中的一行</span></span><br><span class="line"><span class="comment">                    td 行中的一个单元格</span></span><br><span class="line"><span class="comment">                    th 自带加粗居中效果的td</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- style 样式  text-align 文本对齐方式 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>员工技能竞赛评分表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;margin: 0px auto;width: 300px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>排名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>分数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>张小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>李小黑<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>黄小虎<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>69<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>thead 和tfoot可以不写，如果没有需求的话，tbody也可以不加，如果不加tbody浏览器会把所有表格都放到tbody里</p><ul><li>展示效果</li></ul><h3 id="单元格上下跨行"><a href="#单元格上下跨行" class="headerlink" title="单元格上下跨行"></a><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E8%A1%A8%E6%A0%BC.png" alt="img">单元格上下跨行</h3><ul><li>通过td的rowspan属性实现上下跨行 </li><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>员工技能竞赛评分表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>  <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px; margin: 0px auto;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>排名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>分数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>备注<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">            前三名升职加薪</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李小东<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>王小虎<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>98<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><h3 id="单元格左右跨行"><a href="#单元格左右跨行" class="headerlink" title="单元格左右跨行"></a><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E8%A1%A8%E6%A0%BC%E4%B8%8A%E4%B8%8B%E8%B7%A8%E8%A1%8C%E6%95%88%E6%9E%9C.png" alt="img">单元格左右跨行</h3><ul><li>通过td的colspan属性实现左右的跨列 </li><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>员工技能竞赛评分表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>  <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px; margin: 0px auto;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>排名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>分数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>备注<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">            前三名升职加薪</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李小东<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>王小虎<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>98<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>总人数<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>平均分<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>及格率<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>80%<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E8%A1%A8%E6%A0%BC%E5%B7%A6%E5%8F%B3%E8%B7%A8%E8%A1%8C%E6%95%88%E6%9E%9C.png" alt="img"></p><h2 id="2-8-表单标签-重点"><a href="#2-8-表单标签-重点" class="headerlink" title="2.8 表单标签(重点)"></a>2.8 表单标签(重点)</h2><p>表单标签,可以实现让用户在界面上输入各种信息并提交的一种标签. 是向服务端发送数据主要的方式之一</p><ul><li><p>form标签,表单标签,其内部用于定义可以让用户输入信息的表单项标签 </p></li><li><ul><li>action, form标签的属性之一,用于定义信息提交的服务器的地址</li><li>method, form标签的属性之一,用于定义信息的提交方式</li></ul></li><li><ul><li><ul><li>get   get方式, 数据会缀到url后,以?作为参数开始的标识,多个参数用&amp;隔开</li><li>post  post方式,数据会通过请求体发送,不会在缀到url后</li></ul></li></ul></li><li><p>input标签,主要的表单项标签,可以用于定义表单项 </p></li><li><ul><li>name, input标签的属性之一,用于定义提交的参数名</li><li>value属性，该属性用于明确提交时的实参</li><li>type, input标签的属性之一,用于定义表单项类型</li></ul></li><li><ul><li><ul><li>text  文本框</li><li>password 密码框</li><li>submit 提交按钮</li><li>reset   重置按钮</li><li>radio 单选框 多个选项选其一</li><li>checkbox 复选框 多个选项选多个</li><li>file  文件上传框</li></ul></li></ul></li><li><p>textArea 文本域 多行文本框</p></li><li><p>select 下拉框</p></li><li><ul><li>option 选项</li></ul></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=&lt;&gt;, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        form </span></span><br><span class="line"><span class="comment">            action 定义数据的提交地址</span></span><br><span class="line"><span class="comment">                1 url</span></span><br><span class="line"><span class="comment">                2 相对路径</span></span><br><span class="line"><span class="comment">                3 绝对路径</span></span><br><span class="line"><span class="comment">            method 定义数据的提交方式</span></span><br><span class="line"><span class="comment">                get </span></span><br><span class="line"><span class="comment">                    1 参数以键值对的形式在url后提交 </span></span><br><span class="line"><span class="comment">                    2 数据在地址栏，不安全</span></span><br><span class="line"><span class="comment">                    3 地址栏长度有限制，提交数据量不大</span></span><br><span class="line"><span class="comment">                    4 地址栏只能说字符，不能是文件</span></span><br><span class="line"><span class="comment">                    5 相比post，效率高一些</span></span><br><span class="line"><span class="comment">                post</span></span><br><span class="line"><span class="comment">                    1 参数默认不放在url后</span></span><br><span class="line"><span class="comment">                    2 数据不会直接暴露在地址栏上，相对安全</span></span><br><span class="line"><span class="comment">                    3 数据是单独打包通过请求体发送，提交的数据量比较大</span></span><br><span class="line"><span class="comment">                    4 请求体中，可以是字符，也可以是字节数据，可以提交文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        表单项标签</span></span><br><span class="line"><span class="comment">        表单项标签一定要定义name属性，该属性用于明确提交时的参数名</span></span><br><span class="line"><span class="comment">        表单项好需要定义value属性，该属性用于明确提交时的实参</span></span><br><span class="line"><span class="comment">        input</span></span><br><span class="line"><span class="comment">            type 输入信息的类型</span></span><br><span class="line"><span class="comment">                text 单行普通文本框</span></span><br><span class="line"><span class="comment">                password 密码框</span></span><br><span class="line"><span class="comment">                submit 提交按钮</span></span><br><span class="line"><span class="comment">                reset 重置按钮</span></span><br><span class="line"><span class="comment">                radio 单选框 多个选项选其一</span></span><br><span class="line"><span class="comment">                        多个单选框使用相同的name属性，则会有互斥效果</span></span><br><span class="line"><span class="comment">                        checked 默认勾选</span></span><br><span class="line"><span class="comment">                checkbox 复选框 多个选项选多个</span></span><br><span class="line"><span class="comment">                hidden 隐藏域 不显示在页面上，提交时会携带</span></span><br><span class="line"><span class="comment">        textArea 文本域 多行文本框</span></span><br><span class="line"><span class="comment">        select 下拉框</span></span><br><span class="line"><span class="comment">            option 选项</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;08welcome.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加表单标签，用户输入信息的标题 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里不写value是因为value值就是输入框的值，如果这里写了value页面输入框就会有值 --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 希望用户提交一些特点的信息，但是考虑安全问题，或者是用户操作问题，不希望该数据发生改变 </span></span><br><span class="line"><span class="comment">            readonly 只读 表单提交的时候可以携带</span></span><br><span class="line"><span class="comment">            disabled 不可以 提交时不携带</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;456&quot;</span> <span class="attr">readonly</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;456&quot;</span> <span class="attr">disabled</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        性别: </span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;check&quot;</span>&gt;</span> 男</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span> 女</span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        爱好:</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span>&gt;</span> 篮球</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span> 足球</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span> 羽毛球</span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        个人简介:</span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">name</span>=<span class="string">&quot;intro&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px; height: 100px;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        籍贯:</span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;pro&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>冀<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--  selected 默认--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">selected</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--文件上传  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E8%A1%A8%E5%8D%95%E6%95%88%E6%9E%9C.png" alt="img"></p><h2 id="2-9-常见表单项标签-重点"><a href="#2-9-常见表单项标签-重点" class="headerlink" title="2.9 常见表单项标签(重点)"></a>2.9 常见表单项标签(重点)</h2><h3 id="单行文本框"><a href="#单行文本框" class="headerlink" title="单行文本框"></a>单行文本框</h3><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">个性签名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;signal&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><h3 id="密码框"><a href="#密码框" class="headerlink" title="密码框"></a><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%8D%95%E8%A1%8C%E6%96%87%E6%9C%AC%E6%A1%86.png" alt="img">密码框</h3><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;secret&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><h3 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%8D%95%E8%A1%8C%E5%AF%86%E7%A0%81%E6%A1%86.png" alt="img">单选框</h3><p>radio 单选框</p><p>多个单选框使用相同的name属性，则会有互斥效果</p><p> checked属性  默认勾选  如果属性名和属性值相同可以不写值</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">你的性别是：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;spring&quot;</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;summer&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span>女</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%8D%95%E9%80%89%E6%A1%86.png" alt="img"></p><ul><li><p>说明 </p></li><li><ul><li>name属性相同的radio为一组，组内互斥</li><li>当用户选择了一个radio并提交表单，这个radio的name属性和value属性组成一个键值对发送给服务器</li><li>设置checked&#x3D;”checked”属性设置默认被选中的radio</li><li>如果属性名和属性值一样的话，可以省略属性值，只写checked即可</li></ul></li></ul><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><p> checkbox 复选框 多个选项选多个</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">你喜欢的球队是：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Brazil&quot;</span>/&gt;</span>巴西</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;German&quot;</span> <span class="attr">checked</span>/&gt;</span>德国</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;France&quot;</span>/&gt;</span>法国</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;China&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span>中国</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Italian&quot;</span>/&gt;</span>意大利</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%A4%8D%E9%80%89%E6%A1%86.png" alt="img"></p><ul><li><p>说明 </p></li><li><ul><li>设置checked&#x3D;”checked”属性设置默认被选中的checkbox</li></ul></li></ul><h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">籍贯:</span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;pro&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>冀<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  selected 默认--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">selected</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E4%B8%8B%E6%8B%89%E6%A1%86.png" alt="img"></p><ul><li><p>说明 </p></li><li><ul><li>下拉列表用到了两种标签，其中select标签用来定义下拉列表，而option标签设置列表项。</li><li>name属性在select标签中设置,value属性在option标签中设置。</li><li>option标签的标签体是显示出来给用户看的，提交到服务器的是value属性的值。</li><li>通过在option标签中设置selected&#x3D;”selected”属性实现默认选中的效果。</li></ul></li></ul><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>普通按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>或<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>或<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置按钮&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>或<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%8C%89%E9%92%AE.png" alt="img"></p><ul><li><p>说明 </p></li><li><ul><li>普通按钮: 点击后无效果，需要通过JavaScript绑定单击响应函数</li><li>重置按钮: 点击后将表单内的所有表单项都恢复为默认值</li><li>提交按钮: 点击后提交表单</li></ul></li></ul><h3 id="隐藏域"><a href="#隐藏域" class="headerlink" title="隐藏域"></a>隐藏域</h3><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 希望用户提交一些特点的信息，但是考虑安全问题，或者是用户操作问题，不希望该数据发生改变 </span></span><br><span class="line"><span class="comment">          readonly 只读 表单提交的时候可以携带</span></span><br><span class="line"><span class="comment">          disabled 不可以 提交时不携带</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;456&quot;</span> <span class="attr">readonly</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;456&quot;</span> <span class="attr">disabled</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>说明 </p></li><li><ul><li>通过表单隐藏域设置的表单项不会显示到页面上，用户看不到。但是提交表单时会一起被提交。用来设置一些需要和表单一起提交但是不希望用户看到的数据，例如：用户id等等。</li></ul></li></ul><h3 id="多行文本框"><a href="#多行文本框" class="headerlink" title="多行文本框"></a>多行文本框</h3><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">个人简介:</span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">name</span>=<span class="string">&quot;intro&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px; height: 100px;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%A1%86.png" alt="img"></p><ul><li><p>说明 </p></li><li><ul><li>textarea没有value属性，如果要设置默认值需要写在开始和结束标签之间。</li></ul></li></ul><h3 id="文件标签"><a href="#文件标签" class="headerlink" title="文件标签"></a>文件标签</h3><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">头像:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%96%87%E4%BB%B6%E6%A0%87%E7%AD%BE.png" alt="img"></p><ul><li><p>说明 </p></li><li><ul><li>不同浏览器显示的样式有微小差异</li></ul></li></ul><h2 id="2-10-布局相关标签"><a href="#2-10-布局相关标签" class="headerlink" title="2.10 布局相关标签"></a>2.10 布局相关标签</h2><h3 id="div标签"><a href="#div标签" class="headerlink" title="div标签"></a>div标签</h3><p>俗称”块”,主要用于划分页面结构,做页面布局</p><h3 id="span标签"><a href="#span标签" class="headerlink" title="span标签"></a>span标签</h3><p> 俗称”层”,主要用于划分元素范围,配合CSS做页面元素样式的修饰</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    css 设置样式的</span></span><br><span class="line"><span class="comment">        通过元素的style属性进行设置</span></span><br><span class="line"><span class="comment">        style = &quot;样式名 ： 样式值；样式名：样式值；......&quot;</span></span><br><span class="line"><span class="comment">   块元素 自己独占一行的元素，块元素的css样式的宽 ，高等等往往都是生效的</span></span><br><span class="line"><span class="comment">        div</span></span><br><span class="line"><span class="comment">    行内元素</span></span><br><span class="line"><span class="comment">        span 不回自己独占一行，行内css样式的宽，高等等 很多都是不生效的</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 500px; height: 400px;background-color: cadetblue;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px; height: 100px;background-color: beige;margin: 10px auto;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: blueviolet;&quot;</span>&gt;</span>页面开头部分<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px; height: 100px;background-color: blanchedalmond;margin: 10px auto;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: blueviolet;&quot;</span>&gt;</span>页面中间部分<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px; height: 100px;background-color: burlywood;margin: 10px auto;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: blueviolet;&quot;</span>&gt;</span>页面结尾部分<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>展示效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E6%95%88%E6%9E%9C.png" alt="img"></p><h2 id="2-11-特殊字符"><a href="#2-11-特殊字符" class="headerlink" title="2.11 特殊字符"></a>2.11 特殊字符</h2><p>对于html代码来说，某些符号是有特殊含义的字符,需要通过转移字符来表示</p><p><img src="/images/1681200435834.png" alt="img"><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%AD%97%E7%AC%A6%E5%AE%9E%E4%BD%93.png" alt="img"><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7.png" alt="img"><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%95%B0%E5%AD%A6%E5%AE%9E%E4%BD%93.png" alt="img"><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%85%B6%E4%BB%96%E5%AE%9E%E4%BD%93.png" alt="img"></p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;lt;</span>span<span class="symbol">&amp;gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span>a href=&quot;http://www.atguigu.com&quot;<span class="symbol">&amp;gt;</span>尚<span class="symbol">&amp;nbsp;</span>硅<span class="symbol">&amp;nbsp;</span>谷<span class="symbol">&amp;lt;</span>/a<span class="symbol">&amp;gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;amp;</span>amp;</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%AE%9E%E4%BD%93%E6%95%88%E6%9E%9C.png" alt="img"></p><h1 id="CSS的使用"><a href="#CSS的使用" class="headerlink" title="CSS的使用"></a>CSS的使用</h1><p>CSS  层叠样式表(英文全称：(Cascading Style Sheets)  能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力 ,简单来说,美化页面</p><h2 id="3-1-CSS引入方式"><a href="#3-1-CSS引入方式" class="headerlink" title="3.1 CSS引入方式"></a>3.1 CSS引入方式</h2><h3 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h3><p>通过元素开始标签的style属性引入, </p><p>样式语法为    样式名:样式值; 样式名:样式值;</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">       引入方式</span></span><br><span class="line"><span class="comment">       方式1 行内式</span></span><br><span class="line"><span class="comment">           通过元素的style属性引入样式</span></span><br><span class="line"><span class="comment">           语法： style=&quot;样式名：样式值&quot;；样式名：样式值；......</span></span><br><span class="line"><span class="comment">           缺点：1 代码复用度低，不利于维护。</span></span><br><span class="line"><span class="comment">                2 css样式代码和html代码交织在一起，影响阅读，影响阅读，影响文件大小，影响性能</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">style</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">           display: block;</span></span></span><br><span class="line"><span class="string"><span class="tag">           width: 60px; </span></span></span><br><span class="line"><span class="string"><span class="tag">           height: 40px; </span></span></span><br><span class="line"><span class="string"><span class="tag">           background-color: rgb(140, 235, 100); </span></span></span><br><span class="line"><span class="string"><span class="tag">           color: white;</span></span></span><br><span class="line"><span class="string"><span class="tag">           border: 3px solid green;</span></span></span><br><span class="line"><span class="string"><span class="tag">           font-size: 22px;</span></span></span><br><span class="line"><span class="string"><span class="tag">           font-family: &#x27;隶书&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="tag">           line-height: 30px;</span></span></span><br><span class="line"><span class="string"><span class="tag">           border-radius: 5px;</span></span></span><br><span class="line"><span class="string"><span class="tag">   &quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E8%A1%8C%E5%86%85%E5%BC%8F.png" alt="img"></p><ul><li><p>缺点 </p></li><li><ul><li>html代码和css样式代码交织在一起,增加阅读难度和维护成本</li><li>css样式代码仅对当前元素有效,代码重复量高,复用度低</li></ul></li></ul><h3 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h3><p> 通过head标签中的style标签定义本页面的公共样式</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 元素选择器，。通过标签名确定样式的作用元素*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">55</span>, <span class="number">128</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;隶书&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        引入方式</span></span><br><span class="line"><span class="comment">        方式1 行内式</span></span><br><span class="line"><span class="comment">            通过元素的style属性引入样式</span></span><br><span class="line"><span class="comment">            语法： style=&quot;样式名：样式值&quot;；样式名：样式值；......</span></span><br><span class="line"><span class="comment">            缺点：1代码复用度低，不利于维护。</span></span><br><span class="line"><span class="comment">                  2 css样式代码和html代码交织在一起，影响阅读，影响阅读，影响文件大小，影响性能</span></span><br><span class="line"><span class="comment">        方式2 内嵌式</span></span><br><span class="line"><span class="comment">            通过head标签中的style标签定义本页面的公共样式</span></span><br><span class="line"><span class="comment">            通过选择器确定样式的作用元素</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%86%85%E5%B5%8C%E5%BC%8F.png" alt="img"></p><ul><li><p>说明 </p></li><li><ul><li>内嵌式样式需要在head标签中,通过一对style标签定义CSS样式</li><li>CSS样式的作用范围控制要依赖选择器</li><li>CSS的样式代码中注释的方式为  &#x2F;  &#x2F;</li><li>内嵌式虽然对样式代码做了抽取,但是CSS代码仍然在html文件中</li><li>内嵌样式仅仅能作用于当前文件,代码复用度还是不够,不利于网站风格统一</li></ul></li></ul><h3 id="连接式-外部样式表"><a href="#连接式-外部样式表" class="headerlink" title="连接式&#x2F;外部样式表"></a>连接式&#x2F;外部样式表</h3><ul><li>可以在项目单独创建css样式文件,专门用于存放CSS样式代码</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%A4%96%E9%83%A8%E6%A0%B7%E5%BC%8F%E3%80%81.png" alt="img"></p><ul><li>在head标签中,通过link标签引入外部CSS样式即可</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/buttons.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮1&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮2&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮3&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮4&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>说明 </p></li><li><ul><li>CSS样式代码从html文件中剥离,利于代码的维护</li><li>CSS样式文件可以被多个不同的html引入,利于网站风格统一</li></ul></li></ul><h2 id="3-2-CSS选择器"><a href="#3-2-CSS选择器" class="headerlink" title="3.2 CSS选择器"></a>3.2 CSS选择器</h2><h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">         <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      1 元素选择器 根据标签的名字确定样式的作用元素</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        语法 标签名&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        缺点 某些同名的元素不希望使用某些样式，某些不同名的元素也使用该样式，都无法协调</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      2 id选择器</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">140</span>, <span class="number">235</span>, <span class="number">100</span>); </span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&#x27;隶书&#x27;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮1&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮2&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮3&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮4&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="img"></p><ul><li><p>说明 </p></li><li><ul><li>根据标签名确定样式的作用范围</li><li>语法为  元素名 {}</li><li>样式只能作用到同名标签上,其他标签不可用</li><li>相同的标签未必需要相同的样式,会造成样式的作用范围太大</li></ul></li></ul><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            2 id选择器 根据标签的id值确定样式的作用元素</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            一般每个元素都有id属性，但是在一个页面中，id的值不应该是相同的</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            语法 #id值&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#btn1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">140</span>, <span class="number">235</span>, <span class="number">100</span>); </span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&#x27;隶书&#x27;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮1&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮2&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮3&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮4&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn5&quot;</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/id%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="img"></p><ul><li><p>说明 </p></li><li><ul><li>根据元素id属性的值确定样式的作用范围</li><li>语法为  #id值 {}</li><li>id属性的值在页面上具有唯一性,所有id选择器也只能影响一个元素的样式</li><li>因为id属性值不够灵活,所以使用该选择器的情况较少</li></ul></li></ul><h3 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h3><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">           <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       class选择器 根据元素的class属性值确定样式的作用元素</span></span></span><br><span class="line"><span class="comment"><span class="language-css">                元素的class属性值可以重复  而且一个元素的class属性可以有多个值</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            语法：.class属性值&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            缺点</span></span></span><br><span class="line"><span class="comment"><span class="language-css">                */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.shapeClass</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.colorClass</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">140</span>, <span class="number">235</span>, <span class="number">100</span>); </span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.fontClass</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&#x27;隶书&#x27;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">class</span> =<span class="string">&quot;shapeClass colorClass fontClass&quot;</span><span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮1&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">class</span> =<span class="string">&quot;shapeClass colorClass&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮2&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">class</span> =<span class="string">&quot;colorClass fontClass&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮3&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">class</span> =<span class="string">&quot;fontClass&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮4&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;shapeClass colorClass fontClass&quot;</span> &gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/class%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="img"></p><ul><li><p>说明 </p></li><li><ul><li>根据元素class属性的值确定样式的作用范围</li><li>语法为  .class值 {}</li><li>class属性值可以有一个,也可以有多个,多个不同的标签也可以是使用相同的class值</li><li>多个选择器的样式可以在同一个元素上进行叠加</li><li>因为class选择器非常灵活,所以在CSS中,使用该选择器的情况较多</li></ul></li></ul><h2 id="3-4-CSS浮动"><a href="#3-4-CSS浮动" class="headerlink" title="3.4 CSS浮动"></a>3.4 CSS浮动</h2><p>CSS 的 Float（浮动）使元素脱离文档流，按照指定的方向（左或右发生移动），直到它的外边缘碰到包含框或另一个浮动框的边框为止。</p><ul><li>浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷。</li><li>文档流是是文档中可显示对象在排列时所占用的位置&#x2F;空间，而脱离文档流就是在页面中不占位置了。</li></ul><h3 id="浮动原理"><a href="#浮动原理" class="headerlink" title="浮动原理"></a>浮动原理</h3><ul><li>当把框 1 向右浮动时，它脱离文档流并且向右移动，直到它的右边缘碰到包含框的右边缘</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%B5%AE%E5%8A%A8%E5%8E%9F%E7%90%86.png" alt="img"></p><ul><li>当框 1 向左浮动时，它脱离文档流并且向左移动，直到它的左边缘碰到包含框的左边缘。因为它不再处于文档流中，所以它不占据空间，实际上覆盖住了框 2，使框 2 从视图中消失。如果把所有三个框都向左移动，那么框 1 向左浮动直到碰到包含框，另外两个框向左浮动直到碰到前一个浮动框。</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%B5%AE%E5%8A%A8%E5%8E%9F%E7%90%861.png" alt="img"></p><ul><li>如果包含框太窄，无法容纳水平排列的三个浮动元素，那么其它浮动块向下移动，直到有足够的空间。如果浮动元素的高度不同，那么当它们向下移动时可能被其它浮动元素“卡住”</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%B5%AE%E5%8A%A8%E5%8E%9F%E7%90%862.png" alt="img"></p><p>浮动的样式名:float</p><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%B5%AE%E5%8A%A8%E6%A0%B7%E5%BC%8F.png" alt="img"></p><p>通过代码感受浮动的效果</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outerDiv</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">230</span>, <span class="number">224</span>, <span class="number">224</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.innerDiv</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: greenyellow;</span></span><br><span class="line"><span class="language-css">       <span class="comment">/*  float: right; */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.d2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">230</span>, <span class="number">124</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.d3</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">26</span>, <span class="number">165</span>, <span class="number">208</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outerDiv&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d1&quot;</span>&gt;</span>框1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d2&quot;</span>&gt;</span>框2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d3&quot;</span>&gt;</span>框3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%B5%AE%E5%8A%A8%E6%95%88%E6%9E%9C.png" alt="img"></p><p>注意：如果只有框1个是左的话，其他没变，框2会被盖住但是文字不回被挡住会被挤出去，挤到了框3的位置</p><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%B5%AE%E5%8A%A8%E6%B3%A8%E6%84%8F.png" alt="img"></p><h2 id="3-5-CSS定位"><a href="#3-5-CSS定位" class="headerlink" title="3.5 CSS定位"></a>3.5 CSS定位</h2><h3 id="position-属性"><a href="#position-属性" class="headerlink" title="position 属性"></a>position 属性</h3><p>指定了元素的定位类型。</p><ul><li>这个属性定义建立元素布局所用的定位机制。任何元素都可以定位，不过绝对或固定元素会生成一个块级框，而不论该元素本身是什么类型。相对定位元素会相对于它在正常流中的默认位置偏移。 </li><li>元素可以使用的顶部，底部，左侧和右侧属性定位。然而，这些属性无法工作，除非是先设定position属性。他们也有不同的工作方式，这取决于定位方法。</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/position%E5%B1%9E%E6%80%A7.png" alt="img"></p><h3 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h3><ul><li><p>说明 </p></li><li><ul><li>不设置的时候的默认值就是static，静态定位，没有定位，元素出现在该出现的位置，块级元素垂直排列，行内元素水平排列</li></ul></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.innerDiv</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">166</span>, <span class="number">247</span>, <span class="number">46</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: static;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">230</span>, <span class="number">124</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">26</span>, <span class="number">165</span>, <span class="number">208</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d1&quot;</span>&gt;</span>框1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d2&quot;</span>&gt;</span>框2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d3&quot;</span>&gt;</span>框3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E9%9D%99%E6%80%81%E5%AE%9A%E4%BD%8D.png" alt="img"></p><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><ul><li><p>说明 </p></li><li><ul><li>absolute ,通过 top left right bottom 指定元素在页面上的固定位置</li><li>定位后元素会让出原来位置,其他元素可以占用</li></ul></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.innerDiv</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">166</span>, <span class="number">247</span>, <span class="number">46</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">230</span>, <span class="number">124</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">26</span>, <span class="number">165</span>, <span class="number">208</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d1&quot;</span>&gt;</span>框1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d2&quot;</span>&gt;</span>框2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d3&quot;</span>&gt;</span>框3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D.png" alt="img"></h3><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><ul><li><p>说明 </p></li><li><ul><li>relative 相对于自己原来的位置进行地位</li><li>定位后保留原来的站位,其他元素不会移动到该位置</li></ul></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.innerDiv</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">166</span>, <span class="number">247</span>, <span class="number">46</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">230</span>, <span class="number">124</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">26</span>, <span class="number">165</span>, <span class="number">208</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d1&quot;</span>&gt;</span>框1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d2&quot;</span>&gt;</span>框2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d3&quot;</span>&gt;</span>框3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D.png" alt="img"></p><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><ul><li><p>说明 </p></li><li><ul><li>fixed 失踪在浏览器窗口固定位置,不会随着页面的上下移动而移动</li><li>元素定位后会让出原来的位置,其他元素可以占用</li></ul></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.innerDiv</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">166</span>, <span class="number">247</span>, <span class="number">46</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">230</span>, <span class="number">124</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">26</span>, <span class="number">165</span>, <span class="number">208</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d1&quot;</span>&gt;</span>框1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d2&quot;</span>&gt;</span>框2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d3&quot;</span>&gt;</span>框3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        br*100+tab</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D.gif" alt="img"></p><h2 id="3-6-CSS盒子模型"><a href="#3-6-CSS盒子模型" class="headerlink" title="3.6 CSS盒子模型"></a>3.6 CSS盒子模型</h2><p>所有HTML元素可以看作盒子，在CSS中，”box model”这一术语是用来设计和布局时使用。</p><ul><li><p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距（margin），边框（border），填充（padding），和实际内容（content）<img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png" alt="img"></p></li><li><p>说明： </p></li><li><ul><li>Margin(外边距) - 清除边框外的区域，外边距是透明的。</li><li>Border(边框) - 围绕在内边距和内容外的边框。</li><li>Padding(内边距) - 清除内容周围的区域，内边距是透明的。</li><li>Content(内容) - 盒子的内容，显示文本和图像。</li></ul></li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%B1%9E%E6%80%A7.png" alt="img"></p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outerDiv</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">230</span>, <span class="number">224</span>, <span class="number">224</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.innerDiv</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* margin-top: 10px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        margin-right: 20px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        margin-bottom: 30px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        margin-left: 40px; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">       </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: greenyellow;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* padding-top: 10px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        padding-right: 20px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        padding-bottom: 30px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        padding-left: 40px; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.d2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">230</span>, <span class="number">124</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.d3</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">26</span>, <span class="number">165</span>, <span class="number">208</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outerDiv&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d1&quot;</span>&gt;</span>框1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d2&quot;</span>&gt;</span>框2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d3&quot;</span>&gt;</span>框3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E6%95%88%E6%9E%9C.png" alt="img"></p><ul><li>在浏览器上,通过F12工具查看盒子模型状态</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9F%A5%E7%9C%8B.png" alt="img"></p><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="JS简介"><a href="#JS简介" class="headerlink" title="JS简介"></a>JS简介</h2><h3 id="JS起源"><a href="#JS起源" class="headerlink" title="JS起源"></a>JS起源<img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/js%E8%B5%B7%E6%BA%90.png" alt="img"></h3><p>Javascript是一种由Netscape(网景)的LiveScript发展而来的原型化继承的面向对象的动态类型的区分大小写的<code>客户端脚本语言</code>，主要目的是为了解决服务器端语言，遗留的速度问题，为客户提供更流畅的浏览效果。当时服务端需要对数据进行验证，由于网络速度相当缓慢,只有28.8kbps，验证步骤浪费的时间太多。于是Netscape的浏览器Navigator加入了Javascript，提供了数据验证的基本功能。ECMA-262 是正式的 JavaScript 标准。这个标准基于 JavaScript (Netscape) 和 JScript (Microsoft)。ECMA-262 的开发始于 1996 年，在 1997 年 7 月，ECMA 会员大会采纳了它的首个版本。这个标准由 ECMA 组织发展和维护。JavaScript 的正式名称是 “ECMAScript”。JavaScript的组成包含ECMAScript、DOM、BOM。JS是一种运行于浏览器端上的小脚本语句,可以实现网页如文本内容动,数据动态变化和动画特效等,JS有 如下特点</p><ul><li><p>脚本语言 </p></li><li><ul><li>JavaScript是一种解释型的脚本语言。不同于C、C++、Java等语言先编译后执行,JavaScript不会产生编译出来的字节码文件，而是在程序的运行过程中对源文件逐行进行解释。</li></ul></li><li><p>基于对象 </p></li><li><ul><li>JavaScript是一种基于对象的脚本语言，它不仅可以创建对象，也能使用现有的对象。但是面向对象的三大特性：『封装』、『继承』、『多态』中，JavaScript能够实现封装，可以模拟继承，不支持多态，所以它不是一门面向对象的编程语言。</li></ul></li><li><p>弱类型 </p></li><li><ul><li>JavaScript中也有明确的数据类型，但是声明一个变量后它可以接收任何类型的数据，并且会在程序执行过程中根据上下文自动转换类型。</li></ul></li><li><p>事件驱动 </p></li><li><ul><li>JavaScript是一种采用事件驱动的脚本语言，它不需要经过Web服务器就可以对用户的输入做出响应。</li></ul></li><li><p>跨平台性 </p></li><li><ul><li>JavaScript脚本语言不依赖于操作系统，仅需要浏览器的支持。因此一个JavaScript脚本在编写后可以带到任意机器上使用，前提是机器上的浏览器支持JavaScript脚本语言。目前JavaScript已被大多数的浏览器所支持。</li></ul></li></ul><h2 id="JS-组成部分"><a href="#JS-组成部分" class="headerlink" title="JS 组成部分"></a>JS 组成部分</h2><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/js%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86.png" alt="img"></p><p>ECMA 及版本变化</p><ul><li>是一种由欧洲计算机制造商协会（ECMA）通过ECMA-262标准化的脚本程序语言,ECMAScript描述了语法、类型、语句、关键字、保留字、运算符和对象。它就是定义了脚本语言的所有属性、方法和对象。 </li><li>ECMA-262第1版本质上跟网景的JavaScript 1.1相同，删除了浏览器特定代码和少量细微的修改.ECMA-262要求支持Unicode标准（以支持多语言）且对象要与平台无关 </li><li>ECMA-262第2版只是做了一些编校工作，主要是为了严格符合ISO&#x2F;IEC-16262的要求，并没有增减或改变任何特性。 </li><li>ECMA-262第3版第一次真正对ECMAScript进行更新，更新了字符串处理、错误定义和数值输出，增加了对正则表达式、新的控制语句、try&#x2F;catch异常处理的支持。 </li><li>ECMA-262第4版是对这门语言的一次彻底修订。开发者开始修订ECMAScript以满足全球Web开发日益增长的需求。 第4版包括强类型变量、新语句和数据结构、真正的类和经典的继承，以及操作数据的新手段。 </li><li>ECMA-262第5版是ECMA-262第3版的小幅改进，于2009年12月3日正式发布。第5版致力于厘清第3版存在的歧义，也增加了新功能。新功能包括原生的解析和序列化JSON数据的JSON对象、方便继承和高级属性定义的方法、新的增强ECMAScript引擎解释和执行代码能力的严格模式。 </li><li>ECMA-262第6版俗称ES6、ES2015或ES Harmony（和谐版），于2015年6月发布。<code>**这一版包含了大概这个规范有史以来最重要的一批增强特性。**</code>ES6正式支持了类、模块、迭代器、生成器、箭头函数、期约、反射、代理和众多新的数据类型。但是并不是所有的浏览器都全面支持了ES6,很多情况下我们需要将ES6的语法通过工具转换成5以后运行 </li><li>ECMA-262第7版也称为ES7或ES2016，于2016年6月发布。这次修订只包含少量语法层面的增强，如Array.prototype.includes和指数操作符。 </li><li>ECMA-262第8版也称为ES8、ES2017，完成于2017年6月。这一版主要增加了异步函数（async&#x2F;await）、SharedArrayBuffer及Atomics API、Object.values()&#x2F;Object.entries()&#x2F;Object.getOwnProperty- Descriptors()和字符串填充方法，另外明确支持对象字面量最后的逗号。 </li><li>ECMA-262第9版也称为ES9、ES2018，发布于2018年6月。这次修订包括异步迭代、剩余和扩展属性、一组新的正则表达式特性、Promise finally()以及模板字面量修订。 </li><li>ECMA-262第10版也称为ES10、ES2019，发布于2019年6月。这次修订增加了Array.prototype.flat()&#x2F;flatMap()、String.prototype.trimStart()&#x2F;trimEnd()、Object.fromEntries()方法以及Symbol.prototype.description属性，明确定义了Function.prototype.toString()的返回值并固定了Array.prototype.sort()的顺序。另外，这次修订解决了与JSON字符串兼容的问题，并定义了catch子句的可选绑定。 </li><li>ECMA-262第11版，也成为ES11、ES2020，发布于2020年6月。这次修订增加了String 的 matchAll 方法、动态导入语句 import()、import.meta、export * as ns from ‘module’、Promise.allSettled、GlobalThis、Nullish coalescing Operator、Optional Chaining以及一种新的数据类型BigInt，在此之后JavaScript正式迎来第8位数据类型。</li></ul><p>BOM编程</p><ul><li><p>BOM是Browser Object Model的简写，即浏览器对象模型。 </p></li><li><p>BOM有一系列对象组成，是访问、控制、修改浏览器的属性和方法 </p></li><li><p>BOM没有统一的标准(每种客户端都可以自定标准)。 </p></li><li><p>BOM编程是将浏览器窗口的各个组成部分抽象成各个对象,通过各个对象的API操作组件行为的一种编程 </p></li><li><p>BOM编程的对象结构如下 </p></li><li><ul><li>window 顶级对象,代表整个浏览器窗口</li></ul></li><li><ul><li><ul><li>location对象     window对象的属性之一,代表浏览器的地址栏</li><li>history对象      window对象的属性之一,代表浏览器的访问历史</li><li>screen对象      window对象的属性之一,代表屏幕</li><li>navigator对象    window对象的属性之一,代表浏览器软件本身</li><li>document对象   window对象的属性之一,代表浏览器窗口目前解析的html文档</li></ul></li></ul></li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/bom%E7%BC%96%E7%A8%8B.png" alt="img"></p><p>DOM编程</p><ul><li>简单来说:DOM编程就是使用document对象的API完成对网页HTML文档进行动态修改,以实现网页数据和样式动态变化效果的编程.</li><li>document对象代表整个html文档，可用来访问页面中的所有元素，是最复杂的一个dom对象，可以说是学习好dom编程的关键所在。</li><li>根据HTML代码结构特点,document对象本身是一种树形结构的文档对象。</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84.png" alt="img"></p><ul><li>上面的代码生成的树如下</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E7%94%9F%E6%88%90%E7%9A%84%E6%A0%91.png" alt="img"></p><ul><li>DOM编程其实就是用window对象的document属性的相关API完成对页面元素的控制的编程</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="img"></p><h2 id="JS的引入方式"><a href="#JS的引入方式" class="headerlink" title="JS的引入方式"></a>JS的引入方式</h2><h3 id="内部脚本方式引入"><a href="#内部脚本方式引入" class="headerlink" title="内部脚本方式引入"></a>内部脚本方式引入</h3><ul><li><p>说明 </p></li><li><ul><li>在页面中,通过一对script标签引入JS代码</li><li>script代码放置位置具备一定的随意性,一般放在head标签中居多</li></ul></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">150px</span>; </span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">40px</span>; </span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">245</span>, <span class="number">241</span>, <span class="number">129</span>); </span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">238</span>, <span class="number">31</span>, <span class="number">31</span>);</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="built_in">rgb</span>(<span class="number">238</span>, <span class="number">23</span>, <span class="number">66</span>);</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-family</span>: <span class="string">&#x27;隶书&#x27;</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        引入方式</span></span><br><span class="line"><span class="comment">        1 内嵌式 在head中通过一对script标签定义脚本代码</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1 js如何声明函数？ function 类名()&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2 函数如何和单击按钮绑定起来？ onclick=&quot;类名()&quot; </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            3 如何弹窗提示</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">suprise</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//弹窗提示</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;我是惊喜&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;suprise()&quot;</span>&gt;</span>点我有惊喜<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><h3 id="外部脚本方式引入"><a href="#外部脚本方式引入" class="headerlink" title="外部脚本方式引入"></a><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%86%85%E9%83%A8%E8%84%9A%E6%9C%AC%E5%BC%95%E5%85%A5.gif" alt="img">外部脚本方式引入</h3><ul><li><p>说明 </p></li><li><ul><li>内部脚本仅能在当前页面上使用,代码复用度不高</li><li>可以将脚本放在独立的js文件中,通过script标签引入外部脚本文件</li><li>一对script标签要么用于定义内部脚本,要么用于引入外部js文件,不能混用</li><li>一个html文档中,可以有多个script标签</li></ul></li><li><p>抽取脚本代码到独立的js文件中</p></li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%A4%96%E9%83%A8%E8%84%9A%E6%9C%AC.png" alt="img"></p><ul><li>在html文件中,通过script标签引入外部脚本文件</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">150px</span>; </span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">40px</span>; </span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">245</span>, <span class="number">241</span>, <span class="number">129</span>); </span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">238</span>, <span class="number">31</span>, <span class="number">31</span>);</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="built_in">rgb</span>(<span class="number">238</span>, <span class="number">23</span>, <span class="number">66</span>);</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-family</span>: <span class="string">&#x27;隶书&#x27;</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        引入方式</span></span><br><span class="line"><span class="comment">        1 内嵌式 在head中通过一对script标签定义脚本代码</span></span><br><span class="line"><span class="comment">        2 引入外部脚本文件 在head中通过一对script标签引入外部js文件</span></span><br><span class="line"><span class="comment">      注意：</span></span><br><span class="line"><span class="comment">            1 一对html可以有多个script标签</span></span><br><span class="line"><span class="comment">            2 一对script标签不能在引入外部js文件的同时定义内部脚本</span></span><br><span class="line"><span class="comment">            3 script必须是双标签</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  </span><br><span class="line">        </span><br><span class="line">            <span class="comment">&lt;!-- 1 js如何声明函数？ function 类名()&#123;&#125;</span></span><br><span class="line"><span class="comment">            2 函数如何和单击按钮绑定起来？ onclick=&quot;类名()&quot; </span></span><br><span class="line"><span class="comment">            3 如何弹窗提示 --&gt;</span></span><br><span class="line">       </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;JS/button.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;suprise()&quot;</span>&gt;</span>点我有惊喜<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JS的数据类型和运算符"><a href="#JS的数据类型和运算符" class="headerlink" title="JS的数据类型和运算符"></a>JS的数据类型和运算符</h2><h3 id="JS的数据类型"><a href="#JS的数据类型" class="headerlink" title="JS的数据类型"></a>JS的数据类型</h3><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><ul><li>数值类型统一为 number,不区分整数和浮点数字符串类型</li></ul><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><ul><li>字符串类型为 string 和JAVA中的String相似,JS中不严格区分单双引号,都可以用于表示字符串</li></ul><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><ul><li>布尔类型为boolean 和Java中的boolean相似,但是在JS的if语句中,非空字符串会被转换为’真’,非零数字也会被认为是’真’</li></ul><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ul><li>引用数据类型对象是Object类型, 各种对象和数组在JS中都是Object类型</li></ul><h4 id="function类型"><a href="#function类型" class="headerlink" title="function类型"></a>function类型</h4><ul><li>JS中的各种函数属于function数据类型</li></ul><h4 id="命名未赋值"><a href="#命名未赋值" class="headerlink" title="命名未赋值"></a>命名未赋值</h4><ul><li>js为弱类型语言,统一使用 var 声明对象和变量,在赋值时才确定真正的数据类型,变量如果只声明没有赋值的话,数据类型为undefined</li></ul><h4 id="赋予NULL值"><a href="#赋予NULL值" class="headerlink" title="赋予NULL值"></a>赋予NULL值</h4><ul><li>在JS中,如果给一个变量赋值为null,其数据类型是Object, 可以通过typeof关键字判断数据类型</li></ul><h3 id="JS的变量"><a href="#JS的变量" class="headerlink" title="JS的变量"></a>JS的变量</h3><p>JS中的变量具有如下特征</p><ul><li>1 弱类型变量,可以统一声明成var</li><li>2 var声明的变量可以再次声明</li><li>3 变量可以使用不同的数据类型多次赋值</li><li>4 JS的语句可以以; 结尾,也可以不用;结尾</li><li>5 变量标识符严格区分大小写</li><li>6 标识符的命名规则参照JAVA</li><li>7 如果使用了 一个没有声明的变量,那么运行时会报uncaught ReferenceError: *** is not defined  at index.html:行号:列号</li><li>8 如果一个变量只声明,没赋值,那么值是undefined</li></ul><h3 id="JS的运算符"><a href="#JS的运算符" class="headerlink" title="JS的运算符"></a>JS的运算符</h3><p>算数运算符  + - * &#x2F;  %</p><ul><li><p>其中需要注意的是 &#x2F; 和 % </p></li><li><ul><li>&#x2F; 在除0时,结果是Infinity ,而不是报错</li><li>%在模0时,结果是NaN,意思为 not a number ,而不是报错</li></ul></li></ul><p>复合算数运算符 ++ –  +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D;</p><ul><li><p>符合算数运算符基本和JAVA一致,同样需要注意 &#x2F;&#x3D;和%&#x3D; </p></li><li><ul><li>在&#x2F;&#x3D;0时,结果是Infinity ,而不是报错</li><li>在%&#x3D;0时,结果是NaN,意思为 not a number ,而不是报错</li></ul></li></ul><p>关系运算符  &gt;  &lt;  &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D; &#x3D;&#x3D;&#x3D; !&#x3D;</p><ul><li><p>需要注意的是 &#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 差别 </p></li><li><ul><li>&#x3D;&#x3D; 符号,如果两端的数据类型不一致,会尝试将两端的数据转换成number,再对比number大小</li></ul></li><li><ul><li><ul><li>‘123’  这种字符串可以转换成数字</li><li>true会被转换成1 false会被转换成0</li></ul></li></ul></li><li><ul><li>&#x3D;&#x3D;&#x3D;  符号,如果两端数据类型不一致,直接返回false,数据类型一致在比较是否相同</li></ul></li></ul><p>逻辑运算符  || &amp;&amp;</p><ul><li>几乎和JAVA中的一样,需要注意的是,这里直接就是短路的逻辑运算符,单个的 |  和 &amp;  以及 ^ 是位运算符</li></ul><p>条件运算符  条件? 值1  : 值2</p><ul><li>几乎和JAVA中的一样</li></ul><p>位运算符  |  &amp;  ^  &lt;&lt;  &gt;&gt;  &gt;&gt;&gt;</p><ul><li>和 java中的类似(了解)</li></ul><h2 id="JS的流程控制和函数"><a href="#JS的流程控制和函数" class="headerlink" title="JS的流程控制和函数"></a>JS的流程控制和函数</h2><h3 id="JS分支结构"><a href="#JS分支结构" class="headerlink" title="JS分支结构"></a>JS分支结构</h3><p>if结构</p><ul><li><p>这里的if结构几乎和JAVA中的一样,需要注意的是 </p></li><li><ul><li>if()中的非空字符串会被认为是true</li><li>if()中的非零数字会被认为是true</li></ul></li><li><p>代码</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            if</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            switch</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="comment">//    根据月份输出季节</span></span><br><span class="line">    <span class="comment">// prompt返回的结果就是用户在窗口输入的值，以string类型返回的</span></span><br><span class="line">    <span class="keyword">var</span> monthstr = <span class="title function_">prompt</span>(<span class="string">&quot;请输入月份&quot;</span>);</span><br><span class="line">    <span class="comment">// 字符串转换整数</span></span><br><span class="line">    <span class="keyword">var</span> month = <span class="title class_">Number</span>.<span class="built_in">parseInt</span>(monthstr)</span><br><span class="line">    <span class="keyword">if</span>(month == <span class="number">12</span> || month ==<span class="number">1</span> || month == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;秋&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(month&gt;=<span class="number">3</span> &amp;&amp; month &lt;=<span class="number">5</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;春&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(month&gt;=<span class="number">6</span> &amp;&amp; month &lt;=<span class="number">8</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;夏&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(month&gt;=<span class="number">9</span> &amp;&amp; month &lt;=<span class="number">11</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;秋&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%88%86%E6%94%AF%E6%95%88%E6%9E%9C.png" alt="img"></p><p>switch结构</p><ul><li>几乎和JAVA的语法一致 </li><li>代码</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> monthStr=<span class="title function_">prompt</span>(<span class="string">&quot;请输入月份&quot;</span>,<span class="string">&quot;例如:10 &quot;</span>);</span><br><span class="line"><span class="keyword">var</span> month= <span class="title class_">Number</span>.<span class="built_in">parseInt</span>(monthStr)</span><br><span class="line"><span class="keyword">switch</span>(month)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;春季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;夏季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;秋季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;冬季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;月份有误&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/switch%E6%95%88%E6%9E%9C.gif" alt="img"></p><h3 id="JS循环结构"><a href="#JS循环结构" class="headerlink" title="JS循环结构"></a>JS循环结构</h3><p>while结构</p><ul><li>几乎和JAVA一致 </li><li>代码</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 打印99 乘法表 */</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">9</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= i)&#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+i*j+<span class="string">&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>);</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;hr/&gt;&quot;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%BE%AA%E7%8E%AF%E6%95%88%E6%9E%9C.png" alt="img"></p><p>for循环</p><ul><li>几乎和JAVA一致 </li><li>代码</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 打印99 乘法表 */</span></span><br><span class="line"><span class="keyword">for</span>(  <span class="keyword">var</span> i = <span class="number">1</span>;i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span>;j &lt;= i;j++)&#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+i*j+<span class="string">&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;hr/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/for%E5%BE%AA%E7%8E%AF.png" alt="img"></p><p>foreach循环</p><ul><li><p>迭代数组时,和java不一样 </p></li><li><ul><li>括号中的临时变量表示的是元素的索引,不是元素的值,</li><li>()中也不在使用: 分隔,而是使用 in 关键字</li></ul></li><li><p>代码</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cities =[<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;上海&quot;</span>,<span class="string">&quot;深圳&quot;</span>,<span class="string">&quot;武汉&quot;</span>,<span class="string">&quot;西安&quot;</span>,<span class="string">&quot;成都&quot;</span>]</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;ul&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> index <span class="keyword">in</span>  cities)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;li&gt;&quot;</span>+cities[index]+<span class="string">&quot;&lt;/li&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;/ul&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/foreatch.png" alt="img"></p><h2 id="JS函数声明"><a href="#JS函数声明" class="headerlink" title="JS函数声明"></a>JS函数声明</h2><p>JS中的方法,多称为函数,函数的声明语法和JAVA中有较大区别</p><ul><li><p>函数说明 </p></li><li><ul><li>函数没有权限控制符</li><li>不用声明函数的返回值类型,需要返回在函数体中直接return即可,也无需void关键字</li><li>参数列表中,无需数据类型</li><li>调用函数时,实参和形参的个数可以不一致，在方法内部可以通过arguments获得调用时的实参</li><li>声明函数时需要用function关键字</li><li>J函数没有异常列表</li></ul></li><li><p>代码</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">语法1 </span></span><br><span class="line"><span class="comment">    function 函数名 (参数列表)&#123;函数体&#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result =<span class="title function_">sum</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">语法2</span></span><br><span class="line"><span class="comment">    var 函数名 = function (参数列表)&#123;函数体&#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// 调用函数接收结果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">getsum</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title function_">getsum</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = <span class="title function_">add</span>(sum)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure><ul><li>调用测试</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E.png" alt="img"></p><h2 id="JS的对象和JSON"><a href="#JS的对象和JSON" class="headerlink" title="JS的对象和JSON"></a>JS的对象和JSON</h2><h3 id="JS声明对象的语法"><a href="#JS声明对象的语法" class="headerlink" title="JS声明对象的语法"></a>JS声明对象的语法</h3><p>语法1 通过new Object()直接创建对象</p><ul><li>代码</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person =<span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="comment">// 给对象添加属性并赋值</span></span><br><span class="line">person.<span class="property">name</span>=<span class="string">&quot;张小明&quot;</span>;</span><br><span class="line">person.<span class="property">age</span>=<span class="number">10</span>;</span><br><span class="line">person.<span class="property">foods</span>=[<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;橘子&quot;</span>,<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;葡萄&quot;</span>];</span><br><span class="line"><span class="comment">// 给对象添加功能函数</span></span><br><span class="line">person.<span class="property">eat</span>= <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&quot;岁的&quot;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;喜欢吃:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">foods</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">foods</span>[i])</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得对象属性值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>)</span><br><span class="line"><span class="comment">//调用对象方法</span></span><br><span class="line">person.<span class="title function_">eat</span>();</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/new%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1.png" alt="img"></p><p>语法2 通过 {}形式创建对象</p><ul><li>语法为  var person &#x3D;{“属性名”:”属性值”,”属性名”,”属性值”,”函数名”:函数}</li><li>代码</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person =&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;张小明&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;foods&quot;</span>:[<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;橘子&quot;</span>,<span class="string">&quot;葡萄&quot;</span>],</span><br><span class="line">    <span class="string">&quot;eat&quot;</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&quot;岁的&quot;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;喜欢吃:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">foods</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">foods</span>[i])</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得对象属性值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>)</span><br><span class="line"><span class="comment">//调用对象方法</span></span><br><span class="line">person.<span class="title function_">eat</span>();</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%A4%A7%E6%8B%AC%E5%8F%B7%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1.png" alt="img"></p><h3 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h3><p>JSON（JavaScript Object Notation, JS对象简谱）是一种轻量级的数据交换格式。它基于ECMAScript（European Computer Manufacturers Association, 欧洲计算机协会的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率 简单来说,JSON 就是一种字符串格式,这种格式无论是在前端还是在后端,都可以很容易的转换成对象,所以常用于前后端数据传递</p><ul><li><p>说明 </p></li><li><ul><li>JSON的语法<br>   var obj&#x3D;”{‘属性名’:’属性值’,’属性名’:{‘属性名’:’属性值’},’属性名’:[‘值1’,’值1’,’值3’]}” </li><li>属性名必须用””包裹，属性值 字符串必须用””包裹好数字可以不用</li><li>JSON字符串一般用于传递数据,所以字符串中的函数就显得没有意义,在此不做研究 </li><li>通过JSON.parse()方法可以将一个JSON串转换成对象 </li><li>通过JSON.stringify()方法可以将一个对象转换成一个JSON格式的字符串</li></ul></li><li><p>代码</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义一个JSON串 */</span></span><br><span class="line"><span class="keyword">var</span> personStr =<span class="string">&#x27;&#123;&quot;name&quot;:&quot;张小明&quot;,&quot;age&quot;:20,&quot;girlFriend&quot;:&#123;&quot;name&quot;:&quot;铁铃&quot;,&quot;age&quot;:23&#125;,&quot;foods&quot;:[&quot;苹果&quot;,&quot;香蕉&quot;,&quot;橘子&quot;,&quot;葡萄&quot;],&quot;pets&quot;:[&#123;&quot;petName&quot;:&quot;大黄&quot;,&quot;petType&quot;:&quot;dog&quot;&#125;,&#123;&quot;petName&quot;:&quot;小花&quot;,&quot;petType&quot;:&quot;cat&quot;&#125;]&#125;&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personStr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> personStr)</span><br><span class="line"><span class="comment">/* 将一个JSON串转换为对象 */</span></span><br><span class="line"><span class="keyword">var</span> person =<span class="title class_">JSON</span>.<span class="title function_">parse</span>(personStr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> person)</span><br><span class="line"><span class="comment">/* 获取对象属性值 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">girlFriend</span>.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">foods</span>[<span class="number">1</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">pets</span>[<span class="number">1</span>].<span class="property">petName</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">pets</span>[<span class="number">1</span>].<span class="property">petType</span>)</span><br><span class="line"><span class="comment">/* 定义一个对象 */</span></span><br><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张小明&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="string">&#x27;girlFriend&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;铁铃&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="number">23</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;foods&#x27;</span>:[<span class="string">&#x27;苹果&#x27;</span>,<span class="string">&#x27;香蕉&#x27;</span>,<span class="string">&#x27;橘子&#x27;</span>,<span class="string">&#x27;葡萄&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;pets&#x27;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;petName&#x27;</span>:<span class="string">&#x27;大黄&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;petType&#x27;</span>:<span class="string">&#x27;dog&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;petName&#x27;</span>:<span class="string">&#x27;小花&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;petType&#x27;</span>:<span class="string">&#x27;cat&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取对象属性值 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">girlFriend</span>.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">foods</span>[<span class="number">1</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">pets</span>[<span class="number">1</span>].<span class="property">petName</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">pets</span>[<span class="number">1</span>].<span class="property">petType</span>)</span><br><span class="line"><span class="comment">/* 将对象转换成JSON字符串 */</span></span><br><span class="line"><span class="keyword">var</span> personStr =<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personStr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> personStr)</span><br><span class="line">package com.<span class="property">JS</span>.<span class="property">JSON</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.<span class="property">fasterxml</span>.<span class="property">jackson</span>.<span class="property">core</span>.<span class="property">JsonProcessingException</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">fasterxml</span>.<span class="property">jackson</span>.<span class="property">databind</span>.<span class="property">ObjectMapper</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">junit</span>.<span class="property">Test</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">ArrayList</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">HashMap</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">List</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">Map</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    @<span class="title class_">Test</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">test1</span>() throws <span class="title class_">JsonProcessingException</span> &#123;</span><br><span class="line">        <span class="comment">//实例化Person对象 将person对象转换成JSON串</span></span><br><span class="line">        <span class="title class_">Dog</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;小黑&quot;</span>);</span><br><span class="line">        <span class="title class_">Person</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">10</span>, dog);</span><br><span class="line">        <span class="comment">//将Person对象转化成一个字符串 Gson Jackson Fastjson</span></span><br><span class="line">        <span class="title class_">ObjectMapper</span> objectMapper = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="title class_">String</span> string = objectMapper.<span class="title function_">writeValueAsString</span>(person);</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(string);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="title class_">Test</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">testJson</span>() throws <span class="title class_">JsonProcessingException</span> &#123;</span><br><span class="line">        <span class="title class_">String</span> personStr = <span class="string">&quot;&#123;\&quot;namne\&quot;:\&quot;张三\&quot;,\&quot;age\&quot;:10,\&quot;dog\&quot;:&#123;\&quot;name\&quot;:\&quot;小黑\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">        <span class="title class_">ObjectMapper</span> objectMapper = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="title class_">Person</span> person = objectMapper.<span class="title function_">readValue</span>(personStr, <span class="title class_">Person</span>.<span class="property">class</span>);</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(person);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="title class_">Test</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">testMapToJson</span>() throws <span class="title class_">JsonProcessingException</span> &#123;</span><br><span class="line">        <span class="title class_">Map</span> data = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        data.<span class="title function_">put</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        data.<span class="title function_">put</span>(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="title class_">ObjectMapper</span> objectMapper = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">       <span class="title class_">String</span> s= objectMapper.<span class="title function_">writeValueAsString</span>(data);</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Test</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">listToJson</span>() throws <span class="title class_">JsonProcessingException</span> &#123;</span><br><span class="line">        <span class="title class_">List</span> data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        data.<span class="title function_">add</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        data.<span class="title function_">add</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="title class_">String</span> [] array=&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">        <span class="title class_">ObjectMapper</span> objectMapper = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="title class_">String</span> s= objectMapper.<span class="title function_">writeValueAsString</span>(array);</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>前后端传递数据</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE.png" alt="img"></p><h2 id="JS常用类库"><a href="#JS常用类库" class="headerlink" title="JS常用类库"></a>JS常用类库</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>创建数组的四种方式</p><ul><li>new Array()                          创建空数组</li><li>new Array(5)                         创建数组时给定长度</li><li>new Array(ele1,ele2,ele3,… … ,elen);      创建数组时指定元素值</li><li>[ele1,ele2,ele3,… … ,elen];              相当于第三种语法的简写</li></ul><p>数组的常见API</p><ul><li>在JS中,数组属于Object类型,其长度是可以变化的,更像JAVA中的集合</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/jsref-concat-array.html">concat()</a></td><td>连接两个或更多的数组，并返回结果。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-copywithin.html">copyWithin()</a></td><td>从数组的指定位置拷贝元素到数组的另一个指定位置中。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-entries.html">entries()</a></td><td>返回数组的可迭代对象。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-every.html">every()</a></td><td>检测数值元素的每个元素是否都符合条件。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-fill.html">fill()</a></td><td>使用一个固定值来填充数组。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-filter.html">filter()</a></td><td>检测数值元素，并返回符合条件所有元素的数组。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-find.html">find()</a></td><td>返回符合传入测试（函数）条件的数组元素。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-findindex.html">findIndex()</a></td><td>返回符合传入测试（函数）条件的数组元素索引。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-foreach.html">forEach()</a></td><td>数组每个元素都执行一次回调函数。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-from.html">from()</a></td><td>通过给定的对象中创建一个数组。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-includes.html">includes()</a></td><td>判断一个数组是否包含一个指定的值。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-indexof-array.html">indexOf()</a></td><td>搜索数组中的元素，并返回它所在的位置。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-isarray.html">isArray()</a></td><td>判断对象是否为数组。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-join.html">join()</a></td><td>把数组的所有元素放入一个字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-keys.html">keys()</a></td><td>返回数组的可迭代对象，包含原始数组的键(key)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-lastindexof-array.html">lastIndexOf()</a></td><td>搜索数组中的元素，并返回它最后出现的位置。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-map.html">map()</a></td><td>通过指定函数处理数组的每个元素，并返回处理后的数组。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-pop.html">pop()</a></td><td>删除数组的最后一个元素并返回删除的元素。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-push.html">push()</a></td><td>向数组的末尾添加一个或更多元素，并返回新的长度。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-reduce.html">reduce()</a></td><td>将数组元素计算为一个值（从左到右）。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-reduceright.html">reduceRight()</a></td><td>将数组元素计算为一个值（从右到左）。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-reverse.html">reverse()</a></td><td>反转数组的元素顺序。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-shift.html">shift()</a></td><td>删除并返回数组的第一个元素。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-slice-array.html">slice()</a></td><td>选取数组的一部分，并返回一个新数组。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-some.html">some()</a></td><td>检测数组元素中是否有元素符合指定条件。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-sort.html">sort()</a></td><td>对数组的元素进行排序。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-splice.html">splice()</a></td><td>从数组中添加或删除元素。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-tostring-array.html">toString()</a></td><td>把数组转换为字符串，并返回结果。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-unshift.html">unshift()</a></td><td>向数组的开头添加一个或更多元素，并返回新的长度。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-valueof-array.html">valueOf()</a></td><td>返回数组对象的原始值。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-of-array.html">Array.of()</a></td><td>将一组值转换为数组。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-at-array.html">Array.at()</a></td><td>用于接收一个整数值并返回该索引对应的元素，允许正数和负数。负整数从数组中的最后一个元素开始倒数。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-flat-array.html">Array.flat()</a></td><td>创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-flatmap-array.html">Array.flatMap()</a></td><td>使用映射函数映射每个元素，然后将结果压缩成一个新数组。</td></tr></tbody></table><h3 id="Boolean对象"><a href="#Boolean对象" class="headerlink" title="Boolean对象"></a>Boolean对象</h3><p>boolean对象的方法比较简单</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/jsref-tostring-boolean.html">toString()</a></td><td>把布尔值转换为字符串，并返回结果。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-valueof-boolean.html">valueOf()</a></td><td>返回 Boolean 对象的原始值。</td></tr></tbody></table><h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><p>和JAVA中的Date类比较类似</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/jsref-getdate.html">getDate()</a></td><td>从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-getday.html">getDay()</a></td><td>从 Date 对象返回一周中的某一天 (0 ~ 6)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-getfullyear.html">getFullYear()</a></td><td>从 Date 对象以四位数字返回年份。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-gethours.html">getHours()</a></td><td>返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-getmilliseconds.html">getMilliseconds()</a></td><td>返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-getminutes.html">getMinutes()</a></td><td>返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-getmonth.html">getMonth()</a></td><td>从 Date 对象返回月份 (0 ~ 11)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-getseconds.html">getSeconds()</a></td><td>返回 Date 对象的秒数 (0 ~ 59)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-gettime.html">getTime()</a></td><td>返回 1970 年 1 月 1 日至今的毫秒数。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-gettimezoneoffset.html">getTimezoneOffset()</a></td><td>返回本地时间与格林威治标准时间 (GMT) 的分钟差。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-getutcdate.html">getUTCDate()</a></td><td>根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-getutcday.html">getUTCDay()</a></td><td>根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-getutcfullyear.html">getUTCFullYear()</a></td><td>根据世界时从 Date 对象返回四位数的年份。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-getutchours.html">getUTCHours()</a></td><td>根据世界时返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-getutcmilliseconds.html">getUTCMilliseconds()</a></td><td>根据世界时返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-getutcminutes.html">getUTCMinutes()</a></td><td>根据世界时返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-getutcmonth.html">getUTCMonth()</a></td><td>根据世界时从 Date 对象返回月份 (0 ~ 11)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-getutcseconds.html">getUTCSeconds()</a></td><td>根据世界时返回 Date 对象的秒钟 (0 ~ 59)。</td></tr><tr><td>getYear()</td><td>已废弃。 请使用 getFullYear() 方法代替。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-parse.html">parse()</a></td><td>返回1970年1月1日午夜到指定日期（字符串）的毫秒数。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-setdate.html">setDate()</a></td><td>设置 Date 对象中月的某一天 (1 ~ 31)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-setfullyear.html">setFullYear()</a></td><td>设置 Date 对象中的年份（四位数字）。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-sethours.html">setHours()</a></td><td>设置 Date 对象中的小时 (0 ~ 23)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-setmilliseconds.html">setMilliseconds()</a></td><td>设置 Date 对象中的毫秒 (0 ~ 999)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-setminutes.html">setMinutes()</a></td><td>设置 Date 对象中的分钟 (0 ~ 59)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-setmonth.html">setMonth()</a></td><td>设置 Date 对象中月份 (0 ~ 11)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-setseconds.html">setSeconds()</a></td><td>设置 Date 对象中的秒钟 (0 ~ 59)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-settime.html">setTime()</a></td><td>setTime() 方法以毫秒设置 Date 对象。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-setutcdate.html">setUTCDate()</a></td><td>根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-setutcfullyear.html">setUTCFullYear()</a></td><td>根据世界时设置 Date 对象中的年份（四位数字）。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-setutchours.html">setUTCHours()</a></td><td>根据世界时设置 Date 对象中的小时 (0 ~ 23)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-setutcmilliseconds.html">setUTCMilliseconds()</a></td><td>根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-setutcminutes.html">setUTCMinutes()</a></td><td>根据世界时设置 Date 对象中的分钟 (0 ~ 59)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-setutcmonth.html">setUTCMonth()</a></td><td>根据世界时设置 Date 对象中的月份 (0 ~ 11)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-setutcseconds.html">setUTCSeconds()</a></td><td>setUTCSeconds() 方法用于根据世界时 (UTC) 设置指定时间的秒字段。</td></tr><tr><td>setYear()</td><td>已废弃。请使用 setFullYear() 方法代替。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-todatestring.html">toDateString()</a></td><td>把 Date 对象的日期部分转换为字符串。</td></tr><tr><td>toGMTString()</td><td>已废弃。请使用 toUTCString() 方法代替。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-toisostring.html">toISOString()</a></td><td>使用 ISO 标准返回字符串的日期格式。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-tojson.html">toJSON()</a></td><td>以 JSON 数据格式返回日期字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-tolocaledatestring.html">toLocaleDateString()</a></td><td>根据本地时间格式，把 Date 对象的日期部分转换为字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-tolocaletimestring.html">toLocaleTimeString()</a></td><td>根据本地时间格式，把 Date 对象的时间部分转换为字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-tolocalestring.html">toLocaleString()</a></td><td>根据本地时间格式，把 Date 对象转换为字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-tostring-date.html">toString()</a></td><td>把 Date 对象转换为字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-totimestring.html">toTimeString()</a></td><td>把 Date 对象的时间部分转换为字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-toutcstring.html">toUTCString()</a></td><td>根据世界时，把 Date 对象转换为字符串。实例：<code>var today = new Date(); var UTCstring = today.toUTCString();</code></td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-utc.html">UTC()</a></td><td>根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-valueof-date.html">valueOf()</a></td><td>返回 Date 对象的原始值。</td></tr></tbody></table><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>和JAVA中的Math类比较类似</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/jsref-abs.html">abs(x)</a></td><td>返回 x 的绝对值。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-acos.html">acos(x)</a></td><td>返回 x 的反余弦值。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-asin.html">asin(x)</a></td><td>返回 x 的反正弦值。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-atan.html">atan(x)</a></td><td>以介于 -PI&#x2F;2 与 PI&#x2F;2 弧度之间的数值来返回 x 的反正切值。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-atan2.html">atan2(y,x)</a></td><td>返回从 x 轴到点 (x,y) 的角度（介于 -PI&#x2F;2 与 PI&#x2F;2 弧度之间）。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-ceil.html">ceil(x)</a></td><td>对数进行上舍入。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-cos.html">cos(x)</a></td><td>返回数的余弦。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-exp.html">exp(x)</a></td><td>返回 Ex 的指数。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-floor.html">floor(x)</a></td><td>对 x 进行下舍入。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-log.html">log(x)</a></td><td>返回数的自然对数（底为e）。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-max.html">max(x,y,z,…,n)</a></td><td>返回 x,y,z,…,n 中的最高值。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-min.html">min(x,y,z,…,n)</a></td><td>返回 x,y,z,…,n中的最低值。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-pow.html">pow(x,y)</a></td><td>返回 x 的 y 次幂。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-random.html">random()</a></td><td>返回 0 ~ 1 之间的随机数。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-round.html">round(x)</a></td><td>四舍五入。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-sin.html">sin(x)</a></td><td>返回数的正弦。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-sqrt.html">sqrt(x)</a></td><td>返回数的平方根。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-tan.html">tan(x)</a></td><td>返回角的正切。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-tanh.html">tanh(x)</a></td><td>返回一个数的双曲正切函数值。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-trunc.html">trunc(x)</a></td><td>将数字的小数部分去掉，只保留整数部分。</td></tr></tbody></table><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>Number中准备了一些基础的数据处理函数</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/jsref-isfinite-number.html">isFinite</a></td><td>检测指定参数是否为无穷大。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-isinteger-number.html">isInteger</a></td><td>检测指定参数是否为整数。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-isnan-number.html">isNaN</a></td><td>检测指定参数是否为 NaN。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-issafeInteger-number.html">isSafeInteger</a></td><td>检测指定参数是否为安全整数。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-toexponential.html">toExponential(x)</a></td><td>把对象的值转换为指数计数法。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-tofixed.html">toFixed(x)</a></td><td>把数字转换为字符串，结果的小数点后有指定位数的数字。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-tolocalestring-number.html">toLocaleString(locales, options)</a></td><td>返回数字在特定语言环境下的表示字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-toprecision.html">toPrecision(x)</a></td><td>把数字格式化为指定的长度。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-tostring-number.html">toString()</a></td><td>把数字转换为字符串，使用指定的基数。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-valueof-number.html">valueOf()</a></td><td>返回一个 Number 对象的基本数字值。</td></tr></tbody></table><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>和JAVA中的String类似</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/jsref-charat.html">charAt()</a></td><td>返回在指定位置的字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-charcodeat.html">charCodeAt()</a></td><td>返回在指定的位置的字符的 Unicode 编码。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-concat-string.html">concat()</a></td><td>连接两个或更多字符串，并返回新的字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-endswith.html">endsWith()</a></td><td>判断当前字符串是否是以指定的子字符串结尾的（区分大小写）。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-fromcharcode.html">fromCharCode()</a></td><td>将 Unicode 编码转为字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-indexof.html">indexOf()</a></td><td>返回某个指定的字符串值在字符串中首次出现的位置。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-string-includes.html">includes()</a></td><td>查找字符串中是否包含指定的子字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-lastindexof.html">lastIndexOf()</a></td><td>从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-match.html">match()</a></td><td>查找找到一个或多个正则表达式的匹配。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-repeat.html">repeat()</a></td><td>复制字符串指定次数，并将它们连接在一起返回。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-replace.html">replace()</a></td><td>在字符串中查找匹配的子串，并替换与正则表达式匹配的子串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-replaceall.html">replaceAll()</a></td><td>在字符串中查找匹配的子串，并替换与正则表达式匹配的所有子串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-search.html">search()</a></td><td>查找与正则表达式相匹配的值。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-slice-string.html">slice()</a></td><td>提取字符串的片断，并在新的字符串中返回被提取的部分。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-split.html">split()</a></td><td>把字符串分割为字符串数组。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-startswith.html">startsWith()</a></td><td>查看字符串是否以指定的子字符串开头。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-substr.html">substr()</a></td><td>从起始索引号提取字符串中指定数目的字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-substring.html">substring()</a></td><td>提取字符串中两个指定的索引号之间的字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-tolowercase.html">toLowerCase()</a></td><td>把字符串转换为小写。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-touppercase.html">toUpperCase()</a></td><td>把字符串转换为大写。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-trim.html">trim()</a></td><td>去除字符串两边的空白。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-tolocalelowercase.html">toLocaleLowerCase()</a></td><td>根据本地主机的语言环境把字符串转换为小写。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-tolocaleuppercase.html">toLocaleUpperCase()</a></td><td>根据本地主机的语言环境把字符串转换为大写。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-valueof-string.html">valueOf()</a></td><td>返回某个字符串对象的原始值。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-tostring.html">toString()</a></td><td>返回一个字符串。</td></tr></tbody></table><h2 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h2><h3 id="什么是事件"><a href="#什么是事件" class="headerlink" title="什么是事件"></a>什么是事件</h3><p>HTML 事件可以是浏览器行为，也可以是用户行为。 当这些一些行为发生时,可以自动触发对应的JS函数的运行,我们称之为事件发生.JS的事件驱动指的就是行为触发代码运行的这种特点</p><h3 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h3><p>鼠标事件</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/event-onclick.html">onclick</a></td><td>当用户点击某个对象时调用的事件句柄。</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-oncontextmenu.html">oncontextmenu</a></td><td>在用户点击鼠标右键打开上下文菜单时触发</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-ondblclick.html">ondblclick</a></td><td>当用户双击某个对象时调用的事件句柄。</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onmousedown.html">onmousedown</a></td><td>鼠标按钮被按下。</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onmouseenter.html">onmouseenter</a></td><td>当鼠标指针移动到元素上时触发。</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onmouseleave.html">onmouseleave</a></td><td>当鼠标指针移出元素时触发</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onmousemove.html">onmousemove</a></td><td>鼠标被移动。</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onmouseover.html">onmouseover</a></td><td>鼠标移到某元素之上。</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onmouseout.html">onmouseout</a></td><td>鼠标从某元素移开。</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onmouseup.html">onmouseup</a></td><td>鼠标按键被松开。</td></tr></tbody></table><p>键盘事件</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/event-onkeydown.html">onkeydown</a></td><td>某个键盘按键被按下。</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onkeypress.html">onkeypress</a></td><td>某个键盘按键被按下并松开。</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onkeyup.html">onkeyup</a></td><td>某个键盘按键被松开。</td></tr></tbody></table><p>表单事件</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/event-onblur.html">onblur</a></td><td>元素失去焦点时触发</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onchange.html">onchange</a></td><td>该事件在表单元素的内容改变时触发( , , , 和</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onfocus.html">onfocus</a></td><td>元素获取焦点时触发</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onfocusin.html">onfocusin</a></td><td>元素即将获取焦点时触发</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onfocusout.html">onfocusout</a></td><td>元素即将失去焦点时触发</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-oninput.html">oninput</a></td><td>元素获取用户输入时触发</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onreset.html">onreset</a></td><td>表单重置时触发</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onsearch.html">onsearch</a></td><td>用户向搜索域输入文本时触发 ( &lt;input&#x3D;”search”&gt;)</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onselect.html">onselect</a></td><td>用户选取文本时触发 (  和</td></tr><tr><td><a href="https://www.runoob.com/jsref/event-onsubmit.html">onsubmit</a></td><td>表单提交时触发</td></tr></tbody></table><h3 id="事件的绑定-1"><a href="#事件的绑定-1" class="headerlink" title="事件的绑定"></a>事件的绑定</h3><p>通过属性绑定</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">testDown1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;down1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">testDown2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;down2&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">testFocus</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获得焦点&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">testBlur</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失去焦点&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">testChange</span>(<span class="params">input</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内容改变&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">testMouseOver</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标悬停&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">function</span> <span class="title function_">testMouseLeave</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标离开&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">testMouseMove</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标移动&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">onkeydown</span>=<span class="string">&quot;testDown1(),testDown2()&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">onfocus</span>=<span class="string">&quot;testFocus()&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">onblur</span>=<span class="string">&quot;testBlur()&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">onchange</span>=<span class="string">&quot;testChange(this)&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">onmouseover</span>=<span class="string">&quot;testMouseOver()&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">onmouseleave</span>=<span class="string">&quot;testMouseLeave()&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">onmousemove</span>=<span class="string">&quot;testMouseMove()&quot;</span> </span></span><br><span class="line"><span class="tag">         /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(&quot;单击了1&quot;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;单击了1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(&quot;单击了2&quot;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;单击了2&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fun3</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;双击&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">testSubmit</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            表单提交时有机会阻止表单的提交</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            event.preventDefault()//阻止组件的默认行为</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            弹窗的三种方式</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            alert()信息提示框</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            prompt()信息输入框</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            confirm()信息确认框</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            */</span></span></span><br><span class="line"><span class="language-javascript">             <span class="comment">//在这里我们有机会阻止表单提交</span></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//  event.preventDefault()//阻止组件的默认行为</span></span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">var</span> flag = <span class="title function_">confirm</span>(<span class="string">&quot;确定要提交表单吗？&quot;</span>) </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!flag)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//在这里我们有机会阻止表单提交</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//event.preventDefault()//阻止组件的默认行为</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       1 事件的绑定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1 通过元素的属性绑定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2 通过DOM编程动态绑定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        注意事项：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1 一个事件可以同时绑定多个函数</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2 一个元素可以同时绑定多个事件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2 常见的事件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1 鼠标事件 onclick单击事件 ondblclick双击事件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2 键盘事件 onkeydown    onkeyup</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            3 表单事件 onfocus     onblur  onchange </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;01JS引入方式.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return testSubmit() &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--onclick单击事件 ondblclick双击事件   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun1(),fun2()&quot;</span> <span class="attr">ondblclick</span>=<span class="string">&quot;fun3()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>说明 </p></li><li><ul><li>通过事件属性绑定函数,在行为发生时会自动执行函数 </li><li>一个事件可以同时绑定多个函数 </li><li>一个元素可以同时绑定多个事件 </li><li>方法中可以传入 this对象,代表当前元素</li></ul></li></ul><p>通过DOM编程绑定</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">testSubmit</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            表单提交时有机会阻止表单的提交</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            event.preventDefault()//阻止组件的默认行为</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            弹窗的三种方式</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            alert()信息提示框</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            prompt()信息输入框</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            confirm()信息确认框</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            */</span></span></span><br><span class="line"><span class="language-javascript">             <span class="comment">//在这里我们有机会阻止表单提交</span></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//  event.preventDefault()//阻止组件的默认行为</span></span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">var</span> flag = <span class="title function_">confirm</span>(<span class="string">&quot;确定要提交表单吗？&quot;</span>) </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!flag)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//在这里我们有机会阻止表单提交</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//event.preventDefault()//阻止组件的默认行为</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       1 事件的绑定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1 通过元素的属性绑定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2 通过DOM编程动态绑定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        注意事项：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1 一个事件可以同时绑定多个函数</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2 一个元素可以同时绑定多个事件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2 常见的事件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1 鼠标事件 onclick单击事件 ondblclick双击事件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2 键盘事件 onkeydown    onkeyup</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            3 表单事件 onfocus     onblur  onchange </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            4 页面加载事件 onload 页面加载完毕事件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">read</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//通过dom获得要处理的元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//绑定一个单击事件</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;按钮单击了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;read()&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> &gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 页面加载完毕事件,浏览器加载完整个文档行为</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> in1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;in1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 通过DOM编程绑定事件</span></span></span><br><span class="line"><span class="language-javascript">                in1.<span class="property">onchange</span>=testChange</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">testChange</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内容改变&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;in1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件的触发"><a href="#事件的触发" class="headerlink" title="事件的触发"></a>事件的触发</h3><p>行为触发</p><ul><li>发生行为时触发,演示:略</li></ul><p>DOM编程触发</p><ul><li>通过DOM编程,用代码触发,执行某些代码相当于发生了某些行为 </li><li>代码</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 页面加载完毕事件,浏览器加载完整个文档行为</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> in1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;in1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过DOM编程绑定事件</span></span></span><br><span class="line"><span class="language-javascript">            in1.<span class="property">onchange</span>=testChange</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btn1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            btn1.<span class="property">onclick</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;按钮点击了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 调用事件方法触发事件</span></span></span><br><span class="line"><span class="language-javascript">                in1.<span class="title function_">onchange</span>()</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">testChange</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内容改变&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;in1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="BOM编程"><a href="#BOM编程" class="headerlink" title="BOM编程"></a>BOM编程</h2><h3 id="什么是BOM"><a href="#什么是BOM" class="headerlink" title="什么是BOM"></a>什么是BOM</h3><ul><li><p>BOM是Browser Object Model的简写，即浏览器对象模型。 </p></li><li><p>BOM由一系列对象组成，是访问、控制、修改浏览器的属性和方法(通过window对象及属性的一系列方法 控制浏览器行为的一种编程) </p></li><li><p>BOM没有统一的标准(每种客户端都可以自定标准)。 </p></li><li><p>BOM编程是将浏览器窗口的各个组成部分抽象成各个对象,通过各个对象的API操作组件行为的一种编程 </p></li><li><p>BOM编程的对象结构如下 </p></li><li><ul><li>window 顶级对象,代表整个浏览器窗口</li></ul></li><li><ul><li><ul><li>location对象         window对象的属性之一,代表浏览器的地址栏</li><li>history对象          window对象的属性之一,代表浏览器的访问历史</li><li>screen对象           window对象的属性之一,代表屏幕</li><li>navigator对象        window对象的属性之一,代表浏览器软件本身</li><li>document对象        window对象的属性之一,代表浏览器窗口目前解析的html文档</li><li>console对象          window对象的属性之一,代表浏览器开发者工具的控制台</li><li>localStorage对象      window对象的属性之一,代表浏览器的本地数据持久化存储</li><li>sessionStorage对象    window对象的属性之一,代表浏览器的本地数据会话级存储</li></ul></li></ul></li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/BOM%E7%BC%96%E7%A8%8B.JPG" alt="img"></p><h2 id="window对象的常见属性-了解"><a href="#window对象的常见属性-了解" class="headerlink" title="window对象的常见属性(了解)"></a>window对象的常见属性(了解)</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/prop-win-closed.html">closed</a></td><td>返回窗口是否已被关闭。</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-defaultstatus.html">defaultStatus</a></td><td>设置或返回窗口状态栏中的默认文本。</td></tr><tr><td><a href="https://www.runoob.com/jsref/dom-obj-document.html">document</a></td><td>对 Document 对象的只读引用。(请参阅<a href="https://www.runoob.com/jsref/dom-obj-document.html">对象</a>)</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-frames.html">frames</a></td><td>返回窗口中所有命名的框架。该集合是 Window 对象的数组，每个 Window 对象在窗口中含有一个框架。</td></tr><tr><td><a href="https://www.runoob.com/jsref/obj-history.html">history</a></td><td>对 History 对象的只读引用。请参数 <a href="https://www.runoob.com/jsref/obj-history.html">History 对象</a>。</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-innerheight.html">innerHeight</a></td><td>返回窗口的文档显示区的高度。</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-innerheight.html">innerWidth</a></td><td>返回窗口的文档显示区的宽度。</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-localstorage.html">localStorage</a></td><td>在浏览器中存储 key&#x2F;value 对。没有过期时间。</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-length.html">length</a></td><td>设置或返回窗口中的框架数量。</td></tr><tr><td><a href="https://www.runoob.com/jsref/obj-location.html">location</a></td><td>用于窗口或框架的 Location 对象。请参阅 <a href="https://www.runoob.com/jsref/obj-location.html">Location 对象</a>。</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-name.html">name</a></td><td>设置或返回窗口的名称。</td></tr><tr><td><a href="https://www.runoob.com/jsref/obj-navigator.html">navigator</a></td><td>对 Navigator 对象的只读引用。请参数 <a href="https://www.runoob.com/jsref/obj-navigator.html">Navigator 对象</a>。</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-opener.html">opener</a></td><td>返回对创建此窗口的窗口的引用。</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-outerheight.html">outerHeight</a></td><td>返回窗口的外部高度，包含工具条与滚动条。</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-outerheight.html">outerWidth</a></td><td>返回窗口的外部宽度，包含工具条与滚动条。</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-pagexoffset.html">pageXOffset</a></td><td>设置或返回当前页面相对于窗口显示区左上角的 X 位置。</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-pagexoffset.html">pageYOffset</a></td><td>设置或返回当前页面相对于窗口显示区左上角的 Y 位置。</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-parent.html">parent</a></td><td>返回父窗口。</td></tr><tr><td><a href="https://www.runoob.com/jsref/obj-screen.html">screen</a></td><td>对 Screen 对象的只读引用。请参数 <a href="https://www.runoob.com/jsref/obj-screen.html">Screen 对象</a>。</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-screenleft.html">screenLeft</a></td><td>返回相对于屏幕窗口的x坐标</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-screenleft.html">screenTop</a></td><td>返回相对于屏幕窗口的y坐标</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-screenx.html">screenX</a></td><td>返回相对于屏幕窗口的x坐标</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-sessionstorage.html">sessionStorage</a></td><td>在浏览器中存储 key&#x2F;value 对。 在关闭窗口或标签页之后将会删除这些数据。</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-screenx.html">screenY</a></td><td>返回相对于屏幕窗口的y坐标</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-self.html">self</a></td><td>返回对当前窗口的引用。等价于 Window 属性。</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-status.html">status</a></td><td>设置窗口状态栏的文本。</td></tr><tr><td><a href="https://www.runoob.com/jsref/prop-win-top.html">top</a></td><td>返回最顶层的父窗口。</td></tr></tbody></table><h2 id="window对象的常见方法-了解"><a href="#window对象的常见方法-了解" class="headerlink" title="window对象的常见方法(了解)"></a>window对象的常见方法(了解)</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/met-win-alert.html">alert()</a></td><td>显示带有一段消息和一个确认按钮的警告框。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-atob.html">atob()</a></td><td>解码一个 base-64 编码的字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-btoa.html">btoa()</a></td><td>创建一个 base-64 编码的字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-blur.html">blur()</a></td><td>把键盘焦点从顶层窗口移开。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-clearinterval.html">clearInterval()</a></td><td>取消由 setInterval() 设置的 timeout。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-cleartimeout.html">clearTimeout()</a></td><td>取消由 setTimeout() 方法设置的 timeout。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-close.html">close()</a></td><td>关闭浏览器窗口。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-confirm.html">confirm()</a></td><td>显示带有一段消息以及确认按钮和取消按钮的对话框。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-createpopup.html">createPopup()</a></td><td>创建一个 pop-up 窗口。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-focus.html">focus()</a></td><td>把键盘焦点给予一个窗口。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-getselection.html">getSelection</a>()</td><td>返回一个 Selection 对象，表示用户选择的文本范围或光标的当前位置。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-getcomputedstyle.html">getComputedStyle()</a></td><td>获取指定元素的 CSS 样式。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-matchmedia.html">matchMedia()</a></td><td>该方法用来检查 media query 语句，它返回一个 MediaQueryList对象。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-moveby.html">moveBy()</a></td><td>可相对窗口的当前坐标把它移动指定的像素。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-moveto.html">moveTo()</a></td><td>把窗口的左上角移动到一个指定的坐标。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-open.html">open()</a></td><td>打开一个新的浏览器窗口或查找一个已命名的窗口。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-print.html">print()</a></td><td>打印当前窗口的内容。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-prompt.html">prompt()</a></td><td>显示可提示用户输入的对话框。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-resizeby.html">resizeBy()</a></td><td>按照指定的像素调整窗口的大小。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-resizeto.html">resizeTo()</a></td><td>把窗口的大小调整到指定的宽度和高度。</td></tr><tr><td>scroll()</td><td>已废弃。 该方法已经使用了 <a href="https://www.runoob.com/jsref/met-win-scrollto.html">scrollTo()</a> 方法来替代。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-scrollby.html">scrollBy()</a></td><td>按照指定的像素值来滚动内容。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-scrollto.html">scrollTo()</a></td><td>把内容滚动到指定的坐标。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-setinterval.html">setInterval()</a></td><td>按照指定的周期（以毫秒计）来调用函数或计算表达式。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-settimeout.html">setTimeout()</a></td><td>在指定的毫秒数后调用函数或计算表达式。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-stop.html">stop()</a></td><td>停止页面载入。</td></tr><tr><td><a href="https://www.runoob.com/jsref/met-win-postmessage.html">postMessage()</a></td><td>安全地实现跨源通信。</td></tr></tbody></table><h2 id="通过BOM编程控制浏览器行为演示"><a href="#通过BOM编程控制浏览器行为演示" class="headerlink" title="通过BOM编程控制浏览器行为演示"></a>通过BOM编程控制浏览器行为演示</h2><p>三种弹窗方式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- window可以省略不写   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">testAlert</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//普通信息提示框</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;提示信息&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">testConfirm</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//确认框</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> con =<span class="title function_">confirm</span>(<span class="string">&quot;确定要删除吗?&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(con)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;点击了确定&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;点击了取消&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">testPrompt</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//信息输入对话框</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> res =<span class="title function_">prompt</span>(<span class="string">&quot;请输入昵称&quot;</span>,<span class="string">&quot;例如:张三&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;您输入的是:&quot;</span>+res)</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提示框&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;testAlert()&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认框&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;testConfirm()&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;对话框&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;testPrompt()&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面跳转</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">goAtguigu</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> flag =<span class="title function_">confirm</span>(<span class="string">&quot;即将跳转到尚硅谷官网,本页信息即将丢失,确定吗?&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(flag)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 通过BOM编程地址栏url切换</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;跳转到尚硅谷&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;goAtguigu()&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="通过BOM编程实现会话级和持久级数据存储"><a href="#通过BOM编程实现会话级和持久级数据存储" class="headerlink" title="通过BOM编程实现会话级和持久级数据存储"></a>通过BOM编程实现会话级和持久级数据存储</h2><ul><li>会话级数据 : 内存型数据,是浏览器在内存上临时存储的数据,浏览器关闭后,数据失去,通过window的sessionStorge属性实现</li><li>持久级数据 : 磁盘型数据,是浏览器在磁盘上持久存储的数据,浏览器关闭后,数据仍在,通过window的localStorge实现</li><li>可以用于将来存储一些服务端响应回来的数据,比如:token令牌,或者一些其他功能数据,根据数据的业务范围我们可以选择数据存储的会话&#x2F;持久 级别</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">saveItem</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 让浏览器存储一些会话级数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;sessionMsg&quot;</span>,<span class="string">&quot;sessionValue&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 让浏览器存储一些持久级数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;localMsg&quot;</span>,<span class="string">&quot;localValue&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;haha&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">removeItem</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 删除数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">sessionStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;sessionMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;localMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">readItem</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;read&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 读取数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;session:&quot;</span>+<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;sessionMsg&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;local:&quot;</span>+<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;localMsg&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveItem()&quot;</span>&gt;</span>存储数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;removeItem()&quot;</span>&gt;</span>删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readItem()&quot;</span>&gt;</span>读取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试,存储数据后,再读取数据,然后关闭浏览器,获取数据,发现sessionStorge的数据没有了,localStorge的数据还在</li><li>通过removeItem可以将这些数据直接删除</li><li>在F12开发者工具的应用程序栏,可以查看数据的状态</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE.png" alt="img"></p><h2 id="DOM编程"><a href="#DOM编程" class="headerlink" title="DOM编程"></a>DOM编程</h2><h3 id="什么是DOM编程"><a href="#什么是DOM编程" class="headerlink" title="什么是DOM编程"></a>什么是DOM编程</h3><p>简单来说:DOM(Document Object Model)编程就是使用document对象的API完成对网页HTML文档进行动态修改,以实现网页数据和样式动态变化效果的编程.</p><ul><li>document对象代表整个html文档，可用来访问页面中的所有元素，是最复杂的一个dom对象，可以说是学习好dom编程的关键所在。</li><li>根据HTML代码结构特点,document对象本身是一种树形结构的文档对象。</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/DOM%E7%BB%93%E6%9E%84.png" alt="img"></p><ul><li>上面的代码生成的树如下</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/DOM%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="img"></p><ul><li>DOM编程其实就是用window对象的document属性的相关API完成对页面元素的控制的编程</li></ul><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/DOM.png" alt="img"></p><ul><li><p>dom树中节点的类型 </p></li><li><ul><li>node  节点,所有结点的父类型</li></ul></li><li><ul><li><ul><li>element  元素节点,node的子类型之一,代表一个完整标签</li><li>attribute  属性节点,node的子类型之一,代表元素的属性</li><li>text      文本节点,node的子类型之一,代表双标签中间的文本</li></ul></li></ul></li></ul><h2 id="获取页面元素的几种方式"><a href="#获取页面元素的几种方式" class="headerlink" title="获取页面元素的几种方式"></a>获取页面元素的几种方式</h2><h3 id="在整个文档范围内查找元素结点"><a href="#在整个文档范围内查找元素结点" class="headerlink" title="在整个文档范围内查找元素结点"></a>在整个文档范围内查找元素结点</h3><table><thead><tr><th>功能</th><th>API</th><th>返回值</th></tr></thead><tbody><tr><td>根据id值查询</td><td>document.getElementById(“id值”)</td><td>一个具体的元素节</td></tr><tr><td>根据标签名查询</td><td>document.getElementsByTagName(“标签名”)</td><td>元素节点数组</td></tr><tr><td>根据name属性值查询</td><td>document.getElementsByName(“name值”)</td><td>元素节点数组</td></tr><tr><td>根据类名查询</td><td>document.getElementsByClassName(“类名”)</td><td>元素节点数组</td></tr></tbody></table><h3 id="在具体元素节点范围内查找子节点"><a href="#在具体元素节点范围内查找子节点" class="headerlink" title="在具体元素节点范围内查找子节点"></a>在具体元素节点范围内查找子节点</h3><table><thead><tr><th>功能</th><th>API</th><th>返回值</th></tr></thead><tbody><tr><td>查找子标签</td><td>element.children</td><td>返回子标签数组</td></tr><tr><td>查找第一个子标签</td><td>element.firstElementChild</td><td>标签对象</td></tr><tr><td>查找最后一个子标签</td><td>element.lastElementChild</td><td>节点对象</td></tr></tbody></table><h3 id="查找指定子元素节点的父节点"><a href="#查找指定子元素节点的父节点" class="headerlink" title="查找指定子元素节点的父节点"></a>查找指定子元素节点的父节点</h3><table><thead><tr><th>功能</th><th>API</th><th>返回值</th></tr></thead><tbody><tr><td>查找指定元素节点的父标签</td><td>element.parentElement</td><td>标签对象</td></tr></tbody></table><h3 id="查找指定元素节点的兄弟节点"><a href="#查找指定元素节点的兄弟节点" class="headerlink" title="查找指定元素节点的兄弟节点"></a>查找指定元素节点的兄弟节点</h3><table><thead><tr><th>功能</th><th>API</th><th>返回值</th></tr></thead><tbody><tr><td>查找前一个兄弟标签</td><td>node.previousElementSibling</td><td>标签对象</td></tr><tr><td>查找后一个兄弟标签</td><td>node.nextElementSibling</td><td>标签对象</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    1 获得document  dom树</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        window.document</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    2 从document中获取要操作的元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1. 直接获取</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var el1 =document.getElementById(&quot;username&quot;) // 根据元素的id值获取页面上唯一的一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByTagName(&quot;input&quot;) // 根据元素的标签名获取多个同名元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByName(&quot;aaa&quot;) // 根据元素的name属性值获得多个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByClassName(&quot;a&quot;) // 根据元素的class属性值获得多个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2. 间接获取</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var cs=div01.children // 通过父元素获取全部的子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var firstChild =div01.firstElementChild  // 通过父元素获取第一个子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var lastChild = div01.lastElementChild   // 通过父元素获取最后一个子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var parent = pinput.parentElement  // 通过子元素获取父元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var pElement = pinput.previousElementSibling // 获取前面的第一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var nElement = pinput.nextElementSibling // 获取后面的第一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    3 对元素进行操作</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1. 操作元素的属性</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2. 操作元素的样式</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        3. 操作元素的文本</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        4. 增删元素   </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1 获得document</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2 通过document获得元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> el1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>) <span class="comment">// 根据元素的id值获取页面上唯一的一个元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(el1)</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> els =<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;input&quot;</span>) <span class="comment">// 根据元素的标签名获取多个同名元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ;i&lt;els.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(els[i])</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">fun3</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> els =<span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;aaa&quot;</span>) <span class="comment">// 根据元素的name属性值获得多个元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(els)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt; els.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(els[i])</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">fun4</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> els =<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;a&quot;</span>) <span class="comment">// 根据元素的class属性值获得多个元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt; els.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(els[i])</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">fun5</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 先获取父元素</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> div01 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div01&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 获取所有子元素</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> cs=div01.<span class="property">children</span> <span class="comment">// 通过父元素获取全部的子元素</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt; cs.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(cs[i])</span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(div01.<span class="property">firstElementChild</span>)  <span class="comment">// 通过父元素获取第一个子元素</span></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(div01.<span class="property">lastElementChild</span>)   <span class="comment">// 通过父元素获取最后一个子元素</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">fun6</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取子元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pinput =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pinput.<span class="property">parentElement</span>) <span class="comment">// 通过子元素获取父元素</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">fun7</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取子元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pinput =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pinput.<span class="property">previousElementSibling</span>) <span class="comment">// 获取前面的第一个元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pinput.<span class="property">nextElementSibling</span>) <span class="comment">// 获取后面的第一个元素</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div01&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aaa&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aaa&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;通过父元素获取子元素&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun5()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn05&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;通过子元素获取父元素&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun6()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn06&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;通过当前元素获取兄弟元素&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun7()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn07&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;根据id获取指定元素&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun1()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;根据标签名获取多个元素&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun2()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;根据name属性值获取多个元素&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun3()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn03&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;根据class属性值获得多个元素&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun4()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn04&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="操作元素属性值"><a href="#操作元素属性值" class="headerlink" title="操作元素属性值"></a>操作元素属性值</h2><h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><table><thead><tr><th>需求</th><th>操作方式</th></tr></thead><tbody><tr><td>读取属性值</td><td>元素对象.属性名</td></tr><tr><td>修改属性值</td><td>元素对象.属性名&#x3D;新的属性值</td></tr></tbody></table><h3 id="内部文本操作"><a href="#内部文本操作" class="headerlink" title="内部文本操作"></a>内部文本操作</h3><table><thead><tr><th>需求</th><th>操作方式</th></tr></thead><tbody><tr><td>获取或者设置标签体的文本内容</td><td>element.innerText</td></tr><tr><td>获取或者设置标签体的内容</td><td>element.innerHTML</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    1 获得document  dom树</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        window.document</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    2 从document中获取要操作的元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1. 直接获取</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var el1 =document.getElementById(&quot;username&quot;) // 根据元素的id值获取页面上唯一的一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByTagName(&quot;input&quot;) // 根据元素的标签名获取多个同名元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByName(&quot;aaa&quot;) // 根据元素的name属性值获得多个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByClassName(&quot;a&quot;) // 根据元素的class属性值获得多个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2. 间接获取</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var cs=div01.children // 通过父元素获取全部的子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var firstChild =div01.firstElementChild  // 通过父元素获取第一个子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var lastChild = div01.lastElementChild   // 通过父元素获取最后一个子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var parent = pinput.parentElement  // 通过子元素获取父元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var pElement = pinput.previousElementSibling // 获取前面的第一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var nElement = pinput.nextElementSibling // 获取后面的第一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    3 对元素进行操作</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1. 操作元素的属性   元素名.属性名=&quot;&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2. 操作元素的样式   元素名.style.样式名=&quot;&quot;  样式名&quot;-&quot; 要进行驼峰转换</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        3. 操作元素的文本   元素名.innerText   只识别文本</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                           元素名.innerHTML   同时可以识别html代码 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        4. 增删元素   </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">changeAttribute</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> in1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;in1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 语法 元素.属性名=&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获得属性值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(in1.<span class="property">type</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(in1.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 修改属性值</span></span></span><br><span class="line"><span class="language-javascript">        in1.<span class="property">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="language-javascript">        in1.<span class="property">value</span>=<span class="string">&quot;嗨&quot;</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">changeStyle</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> in1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;in1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 语法  元素.style.样式名=&quot;&quot;   原始样式名中的&quot;-&quot;符号 要转换驼峰式  background-color &gt; backgroundColor</span></span></span><br><span class="line"><span class="language-javascript">        in1.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;green&quot;</span></span></span><br><span class="line"><span class="language-javascript">        in1.<span class="property">style</span>.<span class="property">borderRadius</span>=<span class="string">&quot;5px&quot;</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">changeText</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div01 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div01&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        语法  元素名.innerText   只识别文本</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">              元素名.innerHTML   同时可以识别html代码</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div01.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">        div01.<span class="property">innerHTML</span>=<span class="string">&quot;&lt;h1&gt;嗨&lt;/h1&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#in1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;in1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div01&quot;</span>&gt;</span></span><br><span class="line">        hello</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;changeAttribute()&quot;</span>&gt;</span>操作属性<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;changeStyle()&quot;</span>&gt;</span>操作样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;changeText()&quot;</span>&gt;</span>操作文本<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="增删元素"><a href="#增删元素" class="headerlink" title="增删元素"></a>增删元素</h2><h3 id="对页面的元素进行增删操作"><a href="#对页面的元素进行增删操作" class="headerlink" title="对页面的元素进行增删操作"></a>对页面的元素进行增删操作</h3><table><thead><tr><th>API</th><th>功能</th></tr></thead><tbody><tr><td>document.createElement(“标签名”)</td><td>创建元素节点并返回，但不会自动添加到文档中</td></tr><tr><td>document.createTextNode(“文本值”)</td><td>创建文本节点并返回，但不会自动添加到文档中</td></tr><tr><td>element.appendChild(ele)</td><td>将ele添加到element所有子节点后面</td></tr><tr><td>parentEle.insertBefore(newEle,targetEle)</td><td>将newEle插入到targetEle前面</td></tr><tr><td>parentEle.replaceChild(newEle, oldEle)</td><td>用新节点替换原有的旧子节点</td></tr><tr><td>element.remove()</td><td>删除某个标签</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    1 获得document  dom树</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        window.document</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    2 从document中获取要操作的元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1. 直接获取</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var el1 =document.getElementById(&quot;username&quot;) // 根据元素的id值获取页面上唯一的一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByTagName(&quot;input&quot;) // 根据元素的标签名获取多个同名元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByName(&quot;aaa&quot;) // 根据元素的name属性值获得多个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByClassName(&quot;a&quot;) // 根据元素的class属性值获得多个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2. 间接获取</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var cs=div01.children // 通过父元素获取全部的子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var firstChild =div01.firstElementChild  // 通过父元素获取第一个子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var lastChild = div01.lastElementChild   // 通过父元素获取最后一个子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var parent = pinput.parentElement  // 通过子元素获取父元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var pElement = pinput.previousElementSibling // 获取前面的第一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var nElement = pinput.nextElementSibling // 获取后面的第一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    3 对元素进行操作</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1. 操作元素的属性   元素名.属性名=&quot;&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2. 操作元素的样式   元素名.style.样式名=&quot;&quot;  样式名&quot;-&quot; 要进行驼峰转换</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        3. 操作元素的文本   元素名.innerText   只识别文本</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                           元素名.innerHTML   同时可以识别html代码 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        4. 增删元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var element =document.createElement(&quot;元素名&quot;) // 创建元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            父元素.appendChild(子元素)               // 在父元素中追加子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            父元素.insertBefore(新元素,参照元素)     // 在某个元素前增加元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            父元素.replaceChild(新元素,被替换的元素) // 用新的元素替换某个子子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            元素.remove()                            // 删除当前元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">addCs</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建一个新的元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> csli =<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>) <span class="comment">// &lt;li&gt;&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置子元素的属性和文本 &lt;li id=&quot;cs&quot;&gt;长沙&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">        csli.<span class="property">id</span>=<span class="string">&quot;cs&quot;</span></span></span><br><span class="line"><span class="language-javascript">        csli.<span class="property">innerText</span>=<span class="string">&quot;长沙&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将子元素放入父元素中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> cityul =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在父元素中追加子元素</span></span></span><br><span class="line"><span class="language-javascript">        cityul.<span class="title function_">appendChild</span>(csli)</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">addCsBeforeSz</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建一个新的元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> csli =<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>) <span class="comment">// &lt;li&gt;&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置子元素的属性和文本 &lt;li id=&quot;cs&quot;&gt;长沙&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">        csli.<span class="property">id</span>=<span class="string">&quot;cs&quot;</span></span></span><br><span class="line"><span class="language-javascript">        csli.<span class="property">innerText</span>=<span class="string">&quot;长沙&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将子元素放入父元素中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> cityul =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在父元素中追加子元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//cityul.insertBefore(新元素,参照元素)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> szli =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sz&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        cityul.<span class="title function_">insertBefore</span>(csli,szli)</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">replaceSz</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建一个新的元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> csli =<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>) <span class="comment">// &lt;li&gt;&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置子元素的属性和文本 &lt;li id=&quot;cs&quot;&gt;长沙&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">        csli.<span class="property">id</span>=<span class="string">&quot;cs&quot;</span></span></span><br><span class="line"><span class="language-javascript">        csli.<span class="property">innerText</span>=<span class="string">&quot;长沙&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将子元素放入父元素中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> cityul =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在父元素中追加子元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//cityul.replaceChild(新元素,被替换的元素)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> szli =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sz&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        cityul.<span class="title function_">replaceChild</span>(csli,szli)</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">removeSz</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> szli =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sz&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 哪个元素调用了remove该元素就会从dom树中移除</span></span></span><br><span class="line"><span class="language-javascript">        szli.<span class="title function_">remove</span>()</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">clearCity</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> cityul =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* var fc =cityul.firstChild</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        while(fc != null )&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            fc.remove()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            fc =cityul.firstChild</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125; */</span></span></span><br><span class="line"><span class="language-javascript">        cityul.<span class="property">innerHTML</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//cityul.remove()</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;sz&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;gz&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 目标1 在城市列表的最后添加一个子标签  &lt;li id=&quot;cs&quot;&gt;长沙&lt;/li&gt;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;addCs()&quot;</span>&gt;</span>增加长沙<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 目标2 在城市列表的深圳前添加一个子标签  &lt;li id=&quot;cs&quot;&gt;长沙&lt;/li&gt;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;addCsBeforeSz()&quot;</span>&gt;</span>在深圳前插入长沙<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 目标3  将城市列表的深圳替换为  &lt;li id=&quot;cs&quot;&gt;长沙&lt;/li&gt;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;replaceSz()&quot;</span>&gt;</span>替换深圳<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 目标4  将城市列表删除深圳  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;removeSz()&quot;</span>&gt;</span>删除深圳<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 目标5  清空城市列表  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;clearCity()&quot;</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h3><p>正则表达式是描述字符模式的对象。正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。</p><ul><li>语法</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> patt=<span class="keyword">new</span> <span class="title class_">RegExp</span>(pattern,modifiers);</span><br><span class="line">或者更简单的方式:</span><br><span class="line"><span class="keyword">var</span> patt=<span class="regexp">/pattern/m</span>odifiers;</span><br></pre></td></tr></table></figure><p>修饰符</p><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/js/jsref-regexp-i.html">i</a></td><td>执行对大小写不敏感的匹配。</td></tr><tr><td><a href="https://www.runoob.com/js/jsref-regexp-g.html">g</a></td><td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td></tr><tr><td>m</td><td>执行多行匹配。</td></tr></tbody></table><p>方括号</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>[<a href="https://www.runoob.com/jsref/jsref-regexp-charset.html">abc]</a></td><td>查找方括号之间的任何字符。</td></tr><tr><td>[<a href="https://www.runoob.com/jsref/jsref-regexp-charset-not.html">^abc]</a></td><td>查找任何不在方括号之间的字符。</td></tr><tr><td>[0-9]</td><td>查找任何从 0 至 9 的数字。</td></tr><tr><td>[a-z]</td><td>查找任何从小写 a 到小写 z 的字符。</td></tr><tr><td>[A-Z]</td><td>查找任何从大写 A 到大写 Z 的字符。</td></tr><tr><td>[A-z]</td><td>查找任何从大写 A 到小写 z 的字符。</td></tr><tr><td>[adgk]</td><td>查找给定集合内的任何字符。</td></tr><tr><td>[^adgk]</td><td>查找给定集合外的任何字符。</td></tr><tr><td>(red|blue|green)</td><td>查找任何指定的选项。</td></tr></tbody></table><p>元字符</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-dot.html">.</a></td><td>查找单个字符，除了换行和行结束符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-wordchar.html">\w</a></td><td>查找数字、字母及下划线。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-wordchar-non.html">\W</a></td><td>查找非单词字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-digit.html">\d</a></td><td>查找数字。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-digit-non.html">\D</a></td><td>查找非数字字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-whitespace.html">\s</a></td><td>查找空白字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-whitespace-non.html">\S</a></td><td>查找非空白字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-begin.html">\b</a></td><td>匹配单词边界。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-begin-not.html">\B</a></td><td>匹配非单词边界。</td></tr><tr><td>\0</td><td>查找 NULL 字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-newline.html">\n</a></td><td>查找换行符。</td></tr><tr><td>\f</td><td>查找换页符。</td></tr><tr><td>\r</td><td>查找回车符。</td></tr><tr><td>\t</td><td>查找制表符。</td></tr><tr><td>\v</td><td>查找垂直制表符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-octal.html">\xxx</a></td><td>查找以八进制数 xxx 规定的字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-hex.html">\xdd</a></td><td>查找以十六进制数 dd 规定的字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-unicode-hex.html">\uxxxx</a></td><td>查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><p>量词</p><table><thead><tr><th>量词</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-onemore.html">n+</a></td><td>匹配任何包含至少一个 n 的字符串。例如，&#x2F;a+&#x2F; 匹配 “candy” 中的 “a”，”caaaaaaandy” 中所有的 “a”。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-zeromore.html">n*</a></td><td>匹配任何包含零个或多个 n 的字符串。例如，&#x2F;bo*&#x2F; 匹配 “A ghost booooed” 中的 “boooo”，”A bird warbled” 中的 “b”，但是不匹配 “A goat grunted”。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-zeroone.html">n?</a></td><td>匹配任何包含零个或一个 n 的字符串。例如，&#x2F;e?le?&#x2F; 匹配 “angel” 中的 “el”，”angle” 中的 “le”。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-nx.html">n{X}</a></td><td>匹配包含 X 个 n 的序列的字符串。例如，&#x2F;a{2}&#x2F; 不匹配 “candy,” 中的 “a”，但是匹配 “caandy,” 中的两个 “a”，且匹配 “caaandy.” 中的前两个 “a”。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-nxcomma.html">n{X,}</a></td><td>X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。例如，&#x2F;a{2,}&#x2F; 不匹配 “candy” 中的 “a”，但是匹配 “caandy” 和 “caaaaaaandy.” 中所有的 “a”。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-nxy.html">n{X,Y}</a></td><td>X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。例如，&#x2F;a{1,3}&#x2F; 不匹配 “cndy”，匹配 “candy,” 中的 “a”，”caandy,” 中的两个 “a”，匹配 “caaaaaaandy” 中的前面三个 “a”。注意，当匹配 “caaaaaaandy” 时，即使原始字符串拥有更多的 “a”，匹配项也是 “aaa”。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-ndollar.html">n$</a></td><td>匹配任何结尾为 n 的字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-ncaret.html">^n</a></td><td>匹配任何开头为 n 的字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-nfollow.html">?&#x3D;n</a></td><td>匹配任何其后紧接指定字符串 n 的字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-nfollow-not.html">?!n</a></td><td>匹配任何其后没有紧接指定字符串 n 的字符串。</td></tr></tbody></table><p>RegExp对象方法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-compile.html">compile</a></td><td>在 1.5 版本中已废弃。 编译正则表达式。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-exec-regexp.html">exec</a></td><td>检索字符串中指定的值。返回找到的值，并确定其位置。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-test-regexp.html">test</a></td><td>检索字符串中指定的值。返回 true 或 false。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-regexp-tostring.html">toString</a></td><td>返回正则表达式的字符串。</td></tr></tbody></table><p>支持正则的String的方法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/js/jsref-search.html">search</a></td><td>检索与正则表达式相匹配的值。</td></tr><tr><td><a href="https://www.runoob.com/js/jsref-match.html">match</a></td><td>找到一个或多个正则表达式的匹配。</td></tr><tr><td><a href="https://www.runoob.com/js/jsref-replace.html">replace</a></td><td>替换与正则表达式匹配的子串。</td></tr><tr><td><a href="https://www.runoob.com/js/jsref-split.html">split</a></td><td>把字符串分割为字符串数组。</td></tr></tbody></table><h3 id="正则表达式体验"><a href="#正则表达式体验" class="headerlink" title="正则表达式体验"></a>正则表达式体验</h3><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p><strong>注意</strong>：这里是使用<strong>正则表达式对象</strong>来<strong>调用</strong>方法。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个最简单的正则表达式对象</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/o/</span>;</span><br><span class="line"><span class="comment">// 创建一个字符串对象作为目标字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="comment">// 调用正则表达式对象的test()方法验证目标字符串是否满足我们指定的这个模式，返回结果true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;/o/.test(&#x27;Hello World!&#x27;)=&quot;</span>+reg.<span class="title function_">test</span>(str));</span><br></pre></td></tr></table></figure><h4 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个最简单的正则表达式对象</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/o/</span>;</span><br><span class="line"><span class="comment">// 创建一个字符串对象作为目标字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="comment">// 在目标字符串中查找匹配的字符，返回匹配结果组成的数组</span></span><br><span class="line"><span class="keyword">var</span> resultArr = str.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="comment">// 数组长度为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr.length=&quot;</span>+resultArr.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组内容是o</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr[0]=&quot;</span>+resultArr[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p><strong>注意</strong>：这里是使用<strong>字符串对象</strong>来<strong>调用</strong>方法。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个最简单的正则表达式对象</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/o/</span>;</span><br><span class="line"><span class="comment">// 创建一个字符串对象作为目标字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">replace</span>(reg,<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line"><span class="comment">// 只有第一个o被替换了，说明我们这个正则表达式只能匹配第一个满足的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str.replace(reg)=&quot;</span>+newStr);<span class="comment">//Hell@ World!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原字符串并没有变化，只是返回了一个新字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str=&quot;</span>+str);<span class="comment">//str=Hello World!</span></span><br></pre></td></tr></table></figure><h4 id="全文查找"><a href="#全文查找" class="headerlink" title="全文查找"></a>全文查找</h4><p>如果不使用g对正则表达式对象进行修饰，则使用正则表达式进行查找时，仅返回第一个匹配；使用g后，返回所有匹配。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标字符串</span></span><br><span class="line"><span class="keyword">var</span> targetStr = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有使用全局匹配的正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[A-Z]/</span>;</span><br><span class="line"><span class="comment">// 获取全部匹配</span></span><br><span class="line"><span class="keyword">var</span> resultArr = targetStr.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="comment">// 数组长度为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr.length=&quot;</span>+resultArr.<span class="property">length</span>);</span><br><span class="line"><span class="comment">// 遍历数组，发现只能得到&#x27;H&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; resultArr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr[&quot;</span>+i+<span class="string">&quot;]=&quot;</span>+resultArr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标字符串</span></span><br><span class="line"><span class="keyword">var</span> targetStr = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用了全局匹配的正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[A-Z]/g</span>;</span><br><span class="line"><span class="comment">// 获取全部匹配</span></span><br><span class="line"><span class="keyword">var</span> resultArr = targetStr.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="comment">// 数组长度为2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr.length=&quot;</span>+resultArr.<span class="property">length</span>);</span><br><span class="line"><span class="comment">// 遍历数组，发现可以获取到“H”和“W”</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; resultArr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr[&quot;</span>+i+<span class="string">&quot;]=&quot;</span>+resultArr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="忽略大小写"><a href="#忽略大小写" class="headerlink" title="忽略大小写"></a>忽略大小写</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标字符串</span></span><br><span class="line"><span class="keyword">var</span> targetStr = <span class="string">&#x27;Hello WORLD!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有使用忽略大小写的正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/o/g</span>;</span><br><span class="line"><span class="comment">//获取全部匹配</span></span><br><span class="line"><span class="keyword">var</span> resultArr = targetStr.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="comment">//数组长度为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr.length=&quot;</span>+resultArr.<span class="property">length</span>);</span><br><span class="line"><span class="comment">//遍历数组，仅得到&#x27;o&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; resultArr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr[&quot;</span>+i+<span class="string">&quot;]=&quot;</span>+resultArr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标字符串</span></span><br><span class="line"><span class="keyword">var</span> targetStr = <span class="string">&#x27;Hello WORLD!&#x27;</span>;</span><br><span class="line"><span class="comment">//使用了忽略大小写的正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/o/gi</span>;</span><br><span class="line"><span class="comment">//获取全部匹配</span></span><br><span class="line"><span class="keyword">var</span> resultArr = targetStr.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="comment">//数组长度为2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr.length=&quot;</span>+resultArr.<span class="property">length</span>);</span><br><span class="line"><span class="comment">//遍历数组，得到&#x27;o&#x27;和&#x27;O&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; resultArr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr[&quot;</span>+i+<span class="string">&quot;]=&quot;</span>+resultArr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="元字符使用"><a href="#元字符使用" class="headerlink" title="元字符使用"></a>元字符使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str01 = <span class="string">&#x27;I love Java&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str02 = <span class="string">&#x27;Java love me&#x27;</span>;</span><br><span class="line"><span class="comment">// 匹配以Java开头</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^Java/g</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reg.test(str01)=&#x27;</span>+reg.<span class="title function_">test</span>(str01)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reg.test(str02)=&#x27;</span>+reg.<span class="title function_">test</span>(str02)); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> str01 = <span class="string">&#x27;I love Java&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str02 = <span class="string">&#x27;Java love me&#x27;</span>;</span><br><span class="line"><span class="comment">// 匹配以Java结尾</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/Java$/g</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reg.test(str01)=&#x27;</span>+reg.<span class="title function_">test</span>(str01)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reg.test(str02)=&#x27;</span>+reg.<span class="title function_">test</span>(str02)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="字符集合的使用"><a href="#字符集合的使用" class="headerlink" title="字符集合的使用"></a>字符集合的使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//n位数字的正则</span></span><br><span class="line"><span class="keyword">var</span> targetStr=<span class="string">&quot;123456789&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^[0-9]&#123;0,&#125;$/</span>;</span><br><span class="line"><span class="comment">//或者 ： var reg=/^\d*$/;</span></span><br><span class="line"><span class="keyword">var</span> b = reg.<span class="title function_">test</span>(targetStr);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//数字+字母+下划线，6-16位</span></span><br><span class="line"><span class="keyword">var</span> targetStr=<span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^[a-z0-9A-Z_]&#123;6,16&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> b = reg.<span class="title function_">test</span>(targetStr);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h3><table><thead><tr><th>需求</th><th>正则表达式</th></tr></thead><tbody><tr><td>用户名</td><td>&#x2F;^[a-zA-Z ][a-zA-Z-0-9]{5,9}$&#x2F;</td></tr><tr><td>密码</td><td>&#x2F;^[a-zA-Z0-9 _-@#&amp; *]{6,12}$&#x2F;</td></tr><tr><td>前后空格</td><td>&#x2F;^\s+|\s+$&#x2F;g</td></tr><tr><td>电子邮箱</td><td>&#x2F;^[a-zA-Z0-9 _.-]+@([a-zA-Z0-9-]+[.]{1})+[a-zA-Z]+$&#x2F;</td></tr></tbody></table><h2 id="案例开发-日程管理-第一期"><a href="#案例开发-日程管理-第一期" class="headerlink" title="案例开发-日程管理-第一期"></a>案例开发-日程管理-第一期</h2><h3 id="登录页及校验"><a href="#登录页及校验" class="headerlink" title="登录页及校验"></a>登录页及校验</h3><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E7%99%BB%E5%BD%95%E9%A1%B5%E5%8F%8A%E6%A0%A1%E9%AA%8C.png" alt="img"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ht</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ltr</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid  powderblue;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ipt</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#usernameMsg</span> , <span class="selector-id">#userPwdMsg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">230</span>, <span class="number">87</span>, <span class="number">51</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.buttonContainer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 检验用户名格式是否合法的函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkUsername</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义正则表示字符串的规则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span>  usernameReg= <span class="regexp">/^[a-zA-Z0-9]&#123;5,10&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获得用户在页面上输入的信息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> usernameInput =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;usernameInput&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> username = usernameInput.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获得格式提示的框</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> usernameMsg =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;usernameMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 格式有误时,返回false,在页面上提示</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!usernameReg.<span class="title function_">test</span>(username))&#123; </span></span><br><span class="line"><span class="language-javascript">                usernameMsg.<span class="property">innerText</span>=<span class="string">&quot;用户名格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 格式OK,返回true 在页面上提示OK</span></span></span><br><span class="line"><span class="language-javascript">            usernameMsg.<span class="property">innerText</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 检验密码格式是否合法的函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkUserPwd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义正则表示字符串的规则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span>  userPwdReg= <span class="regexp">/^[0-9]&#123;6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获得用户在页面上输入的信息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> userPwdInput =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userPwdInput&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> userPwd = userPwdInput.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获得格式提示的框</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> userPwdMsg =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userPwdMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 格式有误时,返回false,在页面上提示</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!userPwdReg.<span class="title function_">test</span>(userPwd))&#123; </span></span><br><span class="line"><span class="language-javascript">                userPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;密码必须是6位数字&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 格式OK,返回true 在页面上提示OK</span></span></span><br><span class="line"><span class="language-javascript">            userPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 表单在提交时,校验用户名和密码格式,格式OK才会提交</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkForm</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> flag1 =<span class="title function_">checkUsername</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> flag2 =<span class="title function_">checkUserPwd</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> flag1&amp;&amp;flag2</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>欢迎使用日程管理系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/user/login&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return checkForm()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入账号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;usernameInput&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;checkUsername()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;usernameMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userPwdInput&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;checkUserPwd()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;userPwdMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;buttonContainer&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;regist.html&quot;</span>&gt;</span>去注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注册页及校验"><a href="#注册页及校验" class="headerlink" title="注册页及校验"></a>注册页及校验</h3><p><img src="/../image/HTML%E3%80%81CSS%E3%80%81JavaScript/%E6%B3%A8%E5%86%8C%E9%A1%B5%E5%8F%8A%E6%A0%A1%E9%AA%8C.png" alt="img"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ht</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid cadetblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ltr</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid  powderblue;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ipt</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid powderblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.msg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: gold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.buttonContainer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkUsername</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> usernameReg = <span class="regexp">/^[a-zA-Z0-9]&#123;5,10&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> usernameInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;usernameInput&quot;</span>)  </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> username = usernameInput.<span class="property">value</span>  </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> usernameMsg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;usernameMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!usernameReg.<span class="title function_">test</span>(username))&#123;</span></span><br><span class="line"><span class="language-javascript">                usernameMsg.<span class="property">innerText</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125; </span></span><br><span class="line"><span class="language-javascript">            usernameMsg.<span class="property">innerText</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span> </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkUserPwd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> userPwdReg = <span class="regexp">/^\d&#123;6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> userPwdInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userPwdInput&quot;</span>)  </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> userPwd = userPwdInput.<span class="property">value</span>  </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> userPwdMsg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userPwdMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!userPwdReg.<span class="title function_">test</span>(userPwd))&#123;</span></span><br><span class="line"><span class="language-javascript">                userPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125; </span></span><br><span class="line"><span class="language-javascript">            userPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span> </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkReUserPwd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> userPwdReg = <span class="regexp">/^\d&#123;6&#125;$/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 再次输入的密码的格式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> reUserPwdInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;reUserPwdInput&quot;</span>)  </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> reUserPwd = reUserPwdInput.<span class="property">value</span> </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> reUserPwdMsg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;reUserPwdMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!userPwdReg.<span class="title function_">test</span>(reUserPwd))&#123;</span></span><br><span class="line"><span class="language-javascript">                reUserPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;格式有误&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125; </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获得上次密码,对比两次密码是否一致</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> userPwdInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userPwdInput&quot;</span>)  </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> userPwd = userPwdInput.<span class="property">value</span>  </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(reUserPwd != userPwd)&#123;</span></span><br><span class="line"><span class="language-javascript">                reUserPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;两次密码不一致&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125; </span></span><br><span class="line"><span class="language-javascript">            reUserPwdMsg.<span class="property">innerText</span>=<span class="string">&quot;OK&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span> </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkForm</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> flag1 = <span class="title function_">checkUsername</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> flag2 = <span class="title function_">checkUserPwd</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> flag3 = <span class="title function_">checkReUserPwd</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> flag1 &amp;&amp; flag2 &amp;&amp; flag3</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>欢迎使用日程管理系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;ht&quot;</span>&gt;</span>请注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/user/regist&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return checkForm()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入账号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">id</span>=<span class="string">&quot;usernameInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;checkUsername()&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;usernameMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userPwdInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;checkUserPwd()&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;userPwdMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reUserPwdInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;checkReUserPwd()&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;reUserPwdMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;buttonContainer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>  <span class="attr">href</span>=<span class="string">&quot;login.html&quot;</span>&gt;</span>去登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建手册</title>
      <link href="/2024/01/20/hexo%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/"/>
      <url>/2024/01/20/hexo%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装git"><a href="#一、安装git" class="headerlink" title="一、安装git"></a>一、安装git</h2><p>参考工具知识库git文档</p><h2 id="二、安装node"><a href="#二、安装node" class="headerlink" title="二、安装node"></a>二、安装node</h2><p>参考工具知识库nvm文档</p><h2 id="三、本地创建"><a href="#三、本地创建" class="headerlink" title="三、本地创建"></a>三、本地创建</h2><p>1、建立一个文件夹 Blog（可以自己取名字），进入文件夹标右键打开 Git Bush Here，输入npm命令安装Hexo：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>2、安装完成后，输入 hexo init 命令初始化博客：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">hexo install</span><br></pre></td></tr></table></figure><p>3、静态部署</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">hexo g  #静态部署</span><br><span class="line">hexo s  #启动</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:4000/">http://localhost:4000</a> 查看</p><h3 id="部署到GiThub"><a href="#部署到GiThub" class="headerlink" title="部署到GiThub"></a>部署到GiThub</h3><p>（1）打开根目录下的 _config.yml文件夹，在文件底部添加内容</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/xxx/xxx.github.io.git  #你的仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>（2）回到 Blog 文件夹中，打开 Git Bash，安装Git部署插件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>（3）继续输入命令</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br><span class="line">hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure><h2 id="四、安装butterfly主题"><a href="#四、安装butterfly主题" class="headerlink" title="四、安装butterfly主题"></a>四、安装butterfly主题</h2><p>1、在hexo项目根目录下执行操作clone主题</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">git clone -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>2、如果沒有 pug 以及 stylus 的渲染器，还需要下载，否则在项目运行时会报错：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>3、修改项目根目录下的_config.yml文件（称为站点配置文件），开启主题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">#theme: landscape</span><br><span class="line">theme: butterfly #切换皮肤</span><br></pre></td></tr></table></figure><p>4、升级建议</p><p>为了減少升级主题带来的不便，我们还需要做以下操作：<br>把主题文件夹中的 _config.yml 复制到 Hexo 根目录下，同重命名为 _config.butterfly.yml</p><p>Hexo会自动合并主题中的_config.yml和 _config.butterfly.yml里的配置，如果存在同名配置，会使用_config.butterfly.yml的配置，其优先度较高。</p><h2 id="五、设置网站个人资料"><a href="#五、设置网站个人资料" class="headerlink" title="五、设置网站个人资料"></a>五、设置网站个人资料</h2><p>修改根目录下的站点配置文件_config.yml</p><p>修改网站各种资料，例如标题、副标题和邮箱等个人资料</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: 荒岛 #标题</span><br><span class="line">subtitle: &#x27;&#x27;#副标题</span><br><span class="line">description: 归途也还可爱#个性签名</span><br><span class="line">keywords:</span><br><span class="line">author: 寻#作者</span><br><span class="line">language: zh-CN#语言</span><br><span class="line">timezone: Asia/Shanghai    #中国的时区</span><br></pre></td></tr></table></figure><h2 id="六、导航菜单"><a href="#六、导航菜单" class="headerlink" title="六、导航菜单"></a>六、导航菜单</h2><p>修改主题配置文件 _config.butterfly.yml</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  主页: / || fas fa-home</span><br><span class="line">  博文 || fa fa-graduation-cap:</span><br><span class="line">    分类: /categories/ || fa fa-archive</span><br><span class="line">    标签: /tags/ || fa fa-tags</span><br><span class="line">    归档: /archives/ || fa fa-folder-open</span><br><span class="line">  生活 || fas fa-list:</span><br><span class="line">    分享: /shuoshuo/ || fa fa-comments-o</span><br><span class="line">    相册: /photos/ || fa fa-camera-retro</span><br><span class="line">    音乐: /music/ || fa fa-music</span><br><span class="line">    影视: /movies/ || fas fa-video</span><br><span class="line">  友链: /links/ || fa fa-link</span><br><span class="line">  留言板: /comment/ || fa fa-paper-plane</span><br><span class="line">  #留言板: /messageboard/ || fa fa-paper-plane</span><br><span class="line">  关于笔者: /about/ || fas fa-heart  </span><br></pre></td></tr></table></figure><h2 id="七、代码块显示设置"><a href="#七、代码块显示设置" class="headerlink" title="七、代码块显示设置"></a>七、代码块显示设置</h2><h3 id="1、highlight-copy"><a href="#1、highlight-copy" class="headerlink" title="1、highlight_copy"></a>1、highlight_copy</h3><p>开启代码复制功能, 修改主题配置文件_config.butterfly.yml：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">highlight_copy: true</span><br></pre></td></tr></table></figure><h3 id="2、highlight-shrink"><a href="#2、highlight-shrink" class="headerlink" title="2、highlight_shrink"></a>2、highlight_shrink</h3><ul><li>true 全部代码框不展开，需点击 &gt; 打开</li><li>false 代码框展开，有 &gt; 点击按钮</li><li>none 不显示 &gt; 按钮<br>修改主题配置文件_config.butterfly.yml：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">highlight_shrink: false #代码框展开</span><br></pre></td></tr></table></figure><h3 id="3、code-word-wrap"><a href="#3、code-word-wrap" class="headerlink" title="3、code_word_wrap"></a>3、code_word_wrap</h3><p>在默认情况下，hexo-highlight 在编译的时候不会实现代码<a href="https://so.csdn.net/so/search?q=%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C&spm=1001.2101.3001.7020">自动换行</a>。如果你不希望在代码块的区域里有横向滚动条的话，可以_config.butterfly.yml开启代码换行：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">code_word_wrap: true</span><br></pre></td></tr></table></figure><h3 id="4、我的-config-butterfly-yml："><a href="#4、我的-config-butterfly-yml：" class="headerlink" title="4、我的_config.butterfly.yml："></a>4、我的_config.butterfly.yml：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># Code Blocks (代码块样式)</span><br><span class="line"># --------------------------------------</span><br><span class="line">highlight_theme: mac #  darker / pale night / light / ocean / mac / mac light / false</span><br><span class="line">highlight_copy: true # copy button 是否显示复制按钮</span><br><span class="line">highlight_lang: true # show the code language 展示代码块语言</span><br><span class="line">highlight_shrink: false # true: 打开文章默认折叠代码块内容 / false: 打开文章默认展开代码块内容</span><br><span class="line">highlight_height_limit: false # unit: px</span><br><span class="line">code_word_wrap: true #是否关闭滚动条</span><br></pre></td></tr></table></figure><p>站点配置文件_config.yml:将line_number的值改为false</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: false </span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br></pre></td></tr></table></figure><h2 id="八、本地搜索功能"><a href="#八、本地搜索功能" class="headerlink" title="八、本地搜索功能"></a>八、本地搜索功能</h2><h3 id="1、安装插件"><a href="#1、安装插件" class="headerlink" title="1、安装插件"></a>1、安装插件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h3 id="2、主题配置文件-config-butterfly-yml："><a href="#2、主题配置文件-config-butterfly-yml：" class="headerlink" title="2、主题配置文件 _config.butterfly.yml："></a>2、主题配置文件 _config.butterfly.yml：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: &quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot; # 如果没有查到内容相关内容显示</span><br></pre></td></tr></table></figure><p>3、效果图</p><p><img src="/../image/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/%E6%95%88%E6%9E%9C%E5%9B%BE.jpg" alt="img"></p><h2 id="九、图片显示功能"><a href="#九、图片显示功能" class="headerlink" title="九、图片显示功能"></a>九、图片显示功能</h2><p>绝对路径是图片在计算机中的绝对位置，相对路径是相对于当前文件的路径。</p><p>由于我们的博客是要部署在网站上，部署后会生成新的文件目录，所以我们选择使用相对路径的方式。</p><p>在hexo中使用<strong>文章资源文件夹</strong>需要在config.yaml文件中更改一下配置：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>当该配置被应用后，使用hexo new命令创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹。</p><p>由于项目会生成新的文件目录，同时会解析Markdown中的图片路径，会导致一个问题。</p><p>如在一个文件目录下，博客名为1.md，相应的存在一个1文件夹存放图片image.jpg。</p><p>在Typora编辑器中，普通的md文件使用！[](1&#x2F;image.jpg）能在编辑器中正常显示图片。</p><p>在hexo中，按理说应该是使用！[](image.jpg），但网页中却无法正常显示。</p><h3 id="图片插件"><a href="#图片插件" class="headerlink" title="图片插件"></a>图片插件</h3><p>插件<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>解决了这个问题。可以只用npm install hexo-renderer-marked命令直接安装，之后在config.yaml中更改配置如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure><p>之后就可以在使用！[](image.jpg）的方式愉快的插入图片了。</p><h3 id="我用的"><a href="#我用的" class="headerlink" title="我用的"></a>我用的</h3><p>上面只能在hexo网页显示，在编辑器就看不到图片了</p><p>在source文件夹中，创建一个image文件夹存放所有图片，在里面创建和文章同名文件夹，在typora中打开设置开启相对路径插入图片</p><p>然后就直接手拖图片到typora就好了</p><h2 id="十、创建模板"><a href="#十、创建模板" class="headerlink" title="十、创建模板"></a>十、创建模板</h2><p>所谓的layout模板就是schffolds文件夹下面的.<a href="https://so.csdn.net/so/search?q=md%E6%96%87%E4%BB%B6&spm=1001.2101.3001.7020">md文件</a>，在新建文章时Hexo 会把 scaffolds 文件夹内相对应的文件添加到新文件的头部，Hexo 有三种默认模板：post、page 和 draft，区别是创建文章后会被保存到不同的路径；</p><p><img src="/../image/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/%E6%A8%A1%E6%9D%BF%E8%AF%B4%E6%98%8E.jpg" alt="img"></p><h3 id="Front-matter配置说明"><a href="#Front-matter配置说明" class="headerlink" title="Front-matter配置说明"></a>Front-matter配置说明</h3><p>Front-matter 是文章(.md)文件最上方以 — 分隔的区域，用于设置文章的属性，此处是hexo默认的属性，在butterfly主题中又扩展了一部分，在后面章节会详细描述：</p><p><img src="/../image/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0.png" alt="img"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">reward:</span><br><span class="line">description:</span><br><span class="line">top_img:  # butterfly主题扩展，用于设置文章顶图用，后面的文章中会详细说明</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img:  # butterfly主题扩展，用于设置文章顶图用，后面的文章中会详细说明</span><br><span class="line">cover:    # butterfly主题扩展，用于设置文章顶图用，后面的文章中会详细说明</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="十一主页图片设置"><a href="#十一主页图片设置" class="headerlink" title="十一主页图片设置"></a>十一主页图片设置</h2><p>图片可以用云图片链接或者放在本地文件夹位置：&#x2F;themes&#x2F;butterfly&#x2F;source&#x2F;img</p><h3 id="1、网站图标"><a href="#1、网站图标" class="headerlink" title="1、网站图标"></a>1、网站图标</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># Favicon（网站图标）</span><br><span class="line">favicon: /img/favicon.png</span><br></pre></td></tr></table></figure><h3 id="2、头像"><a href="#2、头像" class="headerlink" title="2、头像"></a>2、头像</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  img: /img/avatar.jpg #图片路径</span><br><span class="line">  effect: false #头像会一直转圈  </span><br></pre></td></tr></table></figure><h3 id="3、主页封面图片"><a href="#3、主页封面图片" class="headerlink" title="3、主页封面图片"></a>3、主页封面图片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># The banner image of home page</span><br><span class="line">index_img: /img/background.jpg</span><br></pre></td></tr></table></figure><h3 id="4、文章详情页的顶部图片"><a href="#4、文章详情页的顶部图片" class="headerlink" title="4、文章详情页的顶部图片"></a>4、文章详情页的顶部图片</h3><p>当没有在front-matter设置top_img和cover的情况下会显示该图<br>修改主题配置文件_config.butterfly.yml：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># If the banner of page not setting, it will show the top_img</span><br><span class="line">default_top_img: /img/default_top_img.jpg #我设置的本地图片</span><br></pre></td></tr></table></figure><h3 id="5、归档页顶部图片"><a href="#5、归档页顶部图片" class="headerlink" title="5、归档页顶部图片"></a>5、归档页顶部图片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#归档子标签页图片</span><br><span class="line"># The banner image of archive page</span><br><span class="line">archive_img: /img/archive.jpg</span><br></pre></td></tr></table></figure><h3 id="6、tag页顶部图"><a href="#6、tag页顶部图" class="headerlink" title="6、tag页顶部图"></a>6、tag页顶部图</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#tag页（标签页）</span><br><span class="line"># If the banner of tag page not setting, it will show the top_img</span><br><span class="line"># note: tag page, not tags page (子標籤頁面的 top_img)</span><br><span class="line">tag_img: /img/tag_img.jpg</span><br></pre></td></tr></table></figure><h3 id="7、category页顶部图"><a href="#7、category页顶部图" class="headerlink" title="7、category页顶部图"></a>7、category页顶部图</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#category页</span><br><span class="line"># If the banner of category page not setting, it will show the top_img</span><br><span class="line"># note: category page, not categories page (子分類頁面的 top_img)</span><br><span class="line">category_img: /img/category_img.jpg</span><br></pre></td></tr></table></figure><h3 id="8、文章封面"><a href="#8、文章封面" class="headerlink" title="8、文章封面"></a>8、文章封面</h3><p>每篇文章都可以设置一张封面，可以为每篇文章设置默认封面</p><p>也可以修改每个md文件的front-matter的cover属性，会覆盖上面的默认封面。修改主题配置文件_config.butterfly.yml：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">cover:</span><br><span class="line">  index_enable: true #  是否展示文章封面</span><br><span class="line">  aside_enable: true</span><br><span class="line">  archives_enable: true</span><br><span class="line">  position: both # 封面展示的位置 left/right/both</span><br><span class="line">  # 当没有设置cover时，默认展示的文章封面</span><br><span class="line">  default_cover:</span><br><span class="line">    # 当配置多张图片时，会随机选择一张作为 cover. 此时写法为</span><br><span class="line">    - https:</span><br><span class="line">    - http:</span><br><span class="line">    - http:</span><br><span class="line">    - http:</span><br><span class="line">    - http:</span><br><span class="line">    - http:</span><br></pre></td></tr></table></figure><h2 id="十二、添加分类和标签"><a href="#十二、添加分类和标签" class="headerlink" title="十二、添加分类和标签"></a>十二、添加分类和标签</h2><h3 id="创建“分类”标签"><a href="#创建“分类”标签" class="headerlink" title="创建“分类”标签"></a>创建“分类”标签</h3><p>打开命令行，进入博客所在文件夹。执行命令</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><p>成功后会提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/categories/index.md</span><br></pre></td></tr></table></figure><p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: <span class="number">2022</span>-<span class="number">01</span>-<span class="number">07</span> <span class="number">22</span>:<span class="number">53</span>:<span class="number">43</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加type: “categories” layout: “categories”到内容中，添加后是这样的：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2022-01-07 22:53:43</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">layout: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>1.2 给文章添加“categories”属性</p><p>打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: jQuery对表单的操作及更多应用</span><br><span class="line">date: 2022-01-07 22:53:43</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p><h3 id="创建“标签”选项"><a href="#创建“标签”选项" class="headerlink" title="创建“标签”选项"></a>创建“标签”选项</h3><p>2.1 生成“标签”页并添加tpye属性</p><p>打开命令行，进入博客所在文件夹。执行命令</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><p>成功后会提示：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/tags/index.md</span><br></pre></td></tr></table></figure><p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2022-01-07 22:53:43</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><p>2.2 给文章添加“tags”属性</p><p>打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格<br>- 表单验证就是这篇文章的标签了</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: jQuery对表单的操作及更多应用</span><br><span class="line">date: 2022-01-07 22:53:43</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">tags:</span><br><span class="line">- jQuery</span><br><span class="line">- 表格</span><br><span class="line">- 表单验证</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="十三、修改副标题"><a href="#十三、修改副标题" class="headerlink" title="十三、修改副标题"></a>十三、修改副标题</h2><h3 id="1、修改主题配置文件-config-butterfly-yml"><a href="#1、修改主题配置文件-config-butterfly-yml" class="headerlink" title="1、修改主题配置文件 _config.butterfly.yml:"></a>1、修改主题配置文件 _config.butterfly.yml:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># the subtitle on homepage (主頁subtitle)</span><br><span class="line">subtitle:</span><br><span class="line">  enable: true</span><br><span class="line">  # Typewriter Effect (开启打字效果)</span><br><span class="line">  effect: true</span><br><span class="line">  # loop (循環打字)</span><br><span class="line">  loop: true</span><br><span class="line">  # source調用第三方服務</span><br><span class="line">  # source: false 關閉調用</span><br><span class="line">  # source: 1  調用搏天api的隨機語錄（簡體）</span><br><span class="line">  # source: 2  調用一言網的一句話（簡體）</span><br><span class="line">  # source: 3  調用一句網（簡體）</span><br><span class="line">  # source: 4  調用今日詩詞（簡體）</span><br><span class="line">  # subtitle 會先顯示 source , 再顯示 sub 的內容</span><br><span class="line">  source: false</span><br><span class="line">  # 如果有英文逗号&#x27; , &#x27;,请使用转义字元 <span class="symbol">&amp;#44;</span></span><br><span class="line">  # 如果有英文双引号&#x27; &quot; &#x27;,请使用转义字元 <span class="symbol">&amp;quot;</span></span><br><span class="line">  # 开头不允許转义字元，如需要，请把整個句子用双引号包住</span><br><span class="line">  # 如果关闭打字效果，subtitle只会现示sub的第一行文字</span><br><span class="line">  sub:</span><br><span class="line">    - 你在抱怨什么呢</span><br><span class="line">    - 为明天到来的事，说人生像是没有意义</span><br><span class="line">    - 没有选择会是唯一的路</span><br><span class="line">    - 这不是你自己的问题，人终归要好好去生活</span><br></pre></td></tr></table></figure><h3 id="2、副标题字体大小颜色"><a href="#2、副标题字体大小颜色" class="headerlink" title="2、副标题字体大小颜色"></a>2、副标题字体大小颜色</h3><p>在\themes\butterfly\source\css_layout中的head.styl:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#site-subtitle</span><br><span class="line">    color: var(--white)   //此处修改为白色</span><br><span class="line">    font-size: 1.05em     // 字体大小</span><br><span class="line">    +minWidth768()</span><br><span class="line">    font-size: 1.40em   // 字体大小</span><br></pre></td></tr></table></figure><p>效果图：sub句子轮流出现</p><h2 id="十四、字数统计"><a href="#十四、字数统计" class="headerlink" title="十四、字数统计"></a>十四、字数统计</h2><p>1、项目目录右键打开 Git Bash Here,</p><p>2、npm install hexo-wordcount –save or yarn add hexo-wordcount</p><p>3、修改主题配置文件_config.butterfly.yml</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># wordcount (字數統計)</span><br><span class="line">wordcount:</span><br><span class="line">  enable: true</span><br><span class="line">  post_wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  total_wordcount: true</span><br></pre></td></tr></table></figure><p>参考文档</p><p><a href="https://blog.csdn.net/yr_112233/category_11618529.html">https://blog.csdn.net/yr_112233/category_11618529.html</a></p><p><a href="https://blog.csdn.net/liudonglovehemin/category_12345252.html">https://blog.csdn.net/liudonglovehemin/category_12345252.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
